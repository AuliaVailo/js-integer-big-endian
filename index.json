[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/api/_divmod.js",
    "content": "import { _copy } from '../core' ;\nimport { _idivmod } from './_idivmod' ;\n\n/**\n * Computes the quotient and remainder of two numbers. Uses the most\n * appropriate algorithms depending on the size of the operands. The remainder\n * is written to the dividend array. There are a few assumptions made on the\n * input.\n *\n * Input\n * -----\n *  - No leading zeros in D or Q.\n *  - |D| = |Q| = |R|\n *\n * @param {Number} r The base to work with.\n * @param {Array} D Dividend array.\n * @param {Number} Di Left of dividend.\n * @param {Number} Dj Right of dividend.\n * @param {Array} d Divisor array.\n * @param {Number} di Left of divisor.\n * @param {Number} dj Right of divisor.\n * @param {Array} Q Quotient array.\n * @param {Number} Qi Left of quotient.\n * @param {Number} Qj Right of quotient.\n * @param {Array} R Remainder array.\n * @param {Number} Ri Left of remainder.\n * @param {Number} Rj Right of remainder.\n */\nexport function _divmod ( r , D , Di , Dj , d , di , dj , Q , Qi , Qj , R , Ri , Rj ) {\n\n\t_copy( D , Di , Dj , R , Rj - (Dj - Di) ) ;\n\n\t_idivmod( r , R , Ri , Rj , d , di , dj , Q , Qi , Qj ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/api/_divmod.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "_divmod",
    "memberof": "src/api/_divmod.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/_divmod.js~_divmod",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/api/_divmod.js",
    "importStyle": "{_divmod}",
    "description": "Computes the quotient and remainder of two numbers. Uses the most\nappropriate algorithms depending on the size of the operands. The remainder\nis written to the dividend array. There are a few assumptions made on the\ninput.\n\nInput\n-----\n - No leading zeros in D or Q.\n - |D| = |Q| = |R|",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The base to work with."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "D",
        "description": "Dividend array."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Di",
        "description": "Left of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Dj",
        "description": "Right of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "Divisor array."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "di",
        "description": "Left of divisor."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "dj",
        "description": "Right of divisor."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "Q",
        "description": "Quotient array."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Qi",
        "description": "Left of quotient."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Qj",
        "description": "Right of quotient."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "R",
        "description": "Remainder array."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Ri",
        "description": "Left of remainder."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Rj",
        "description": "Right of remainder."
      }
    ],
    "return": null
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/api/_idivmod.js",
    "content": "import { _idivmod_limb , _idivmod_schoolbook , _idivmod_dc } from '../core' ;\nimport { THRESHOLD_DIV_DC } from '../core' ;\n\n/**\n * Computes the quotient and remainder of two numbers. Uses the most\n * appropriate algorithms depending on the size of the operands. The remainder\n * is written to the dividend array. There are a few assumptions made on the\n * input.\n *\n * Input\n * -----\n *  - No leading zeros in D.\n *  - |D| = |Q|\n *  - Q is zero initialized.\n *\n * @param {Number} r The base to work with.\n * @param {Array} D Dividend / Remainder array (remainder computed in-place).\n * @param {Number} Di Left of dividend.\n * @param {Number} Dj Right of dividend.\n * @param {Array} d Divisor array.\n * @param {Number} di Left of divisor.\n * @param {Number} dj Right of divisor.\n * @param {Array} Q Quotient array (zero initialized).\n * @param {Number} Qi Left of quotient.\n * @param {Number} Qj Right of quotient.\n */\nexport function _idivmod ( r , D , Di , Dj , d , di , dj , Q , Qi , Qj ) {\n\n\tconst dn = dj - di ;\n\n\tif ( dn === 1 ) {\n\t\treturn _idivmod_limb( r , d[di] , D , Di , Dj , Q , Qi ) ;\n\t}\n\n\telse if ( dn < THRESHOLD_DIV_DC ) {\n\t\treturn _idivmod_schoolbook( r , D , Di , Dj , d , di , dj , Q , Qi ) ;\n\t}\n\n\telse {\n\t\treturn _idivmod_dc( r , D , Di , Dj , d , di , dj , Q , Qi , Qj ) ;\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/api/_idivmod.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "_idivmod",
    "memberof": "src/api/_idivmod.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/_idivmod.js~_idivmod",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/api/_idivmod.js",
    "importStyle": "{_idivmod}",
    "description": "Computes the quotient and remainder of two numbers. Uses the most\nappropriate algorithms depending on the size of the operands. The remainder\nis written to the dividend array. There are a few assumptions made on the\ninput.\n\nInput\n-----\n - No leading zeros in D.\n - |D| = |Q|\n - Q is zero initialized.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The base to work with."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "D",
        "description": "Dividend / Remainder array (remainder computed in-place)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Di",
        "description": "Left of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Dj",
        "description": "Right of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "Divisor array."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "di",
        "description": "Left of divisor."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "dj",
        "description": "Right of divisor."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "Q",
        "description": "Quotient array (zero initialized)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Qi",
        "description": "Left of quotient."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Qj",
        "description": "Right of quotient."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/api/add.js",
    "content": "import { _ADD } from '../core/arithmetic' ;\n\n/**\n * Adds two big endian arrays and puts result in a destination array.\n * Wraps on overflow. Works with any combination of array sizes.\n *\n * @param {Number} r base (radix)\n * @param {Array} a first operand\n * @param {Number} ai a left\n * @param {Number} aj a right\n * @param {Array} b second operand\n * @param {Number} bi b left\n * @param {Number} bj b right\n * @param {Array} c result, must be 0 initialized\n * @param {Number} ci c left\n * @param {Number} cj c right\n *\n */\n\nexport function add ( r , a , ai , aj , b , bi , bj , c , ci , cj ) {\n\n\tci = Math.max( 0 , ci );\n\tconst k = cj - ci;\n\n\tai = Math.max( 0 , ai , aj - k ) ;\n\tbi = Math.max( 0 , bi , bj - k ) ;\n\tconst m = aj - ai;\n\tconst n = bj - bi;\n\n\treturn m < n ?\n\t\t_ADD( r , b , bi , bj , a , ai , aj , c , ci , cj ) :\n\t\t_ADD( r , a , ai , aj , b , bi , bj , c , ci , cj ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/api/add.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "add",
    "memberof": "src/api/add.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/add.js~add",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/api/add.js",
    "importStyle": "{add}",
    "description": "Adds two big endian arrays and puts result in a destination array.\nWraps on overflow. Works with any combination of array sizes.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "base (radix)"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "second operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "b left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "b right"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "result, must be 0 initialized"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ci",
        "description": "c left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cj",
        "description": "c right"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/api/iadd.js",
    "content": "import { _IADD } from '../core/arithmetic' ;\n\n/**\n * Adds a big endian array to another ___in-place___.\n * Wraps on overflow. Works with any combination of array sizes.\n *\n * @param {Number} r base (radix)\n * @param {Array} a first operand (modified in-place)\n * @param {Number} ai a left\n * @param {Number} aj a right\n * @param {Array} b second operand\n * @param {Number} bi b left\n * @param {Number} bj b right\n */\nexport function iadd ( r , a , ai , aj , b , bi , bj ) {\n\n\tconst m = aj - ai ;\n\n\treturn _IADD( r , a , ai , aj , b , Math.max( bi , bj - m ) , bj ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/api/iadd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "iadd",
    "memberof": "src/api/iadd.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/iadd.js~iadd",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/api/iadd.js",
    "importStyle": "{iadd}",
    "description": "Adds a big endian array to another ___in-place___.\nWraps on overflow. Works with any combination of array sizes.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "base (radix)"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand (modified in-place)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "second operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "b left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "b right"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/api/index.js",
    "content": "export * from './_divmod' ;\nexport * from './_idivmod' ;\nexport * from './add' ;\nexport * from './iadd' ;\nexport * from './mul' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/api/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/api/mul.js",
    "content": "import { _mul } from '../core/arithmetic' ;\n\n/**\n *  - C is zero initialized,\n *  - |A| >= 0,\n *  - |B| >= 0,\n *  - |C| >= |A| + |B|.\n */\n\nexport function mul ( r , a , ai , aj , b , bi , bj , c , ci , cj ) {\n\n\t// TODO Truncate input if output is too small (see api/add)?\n\n\treturn aj - ai >= bj - bi ?\n\t\t_mul( r , a , ai , aj , b , bi , bj , c , ci , cj ) :\n\t\t_mul( r , b , bi , bj , a , ai , aj , c , ci , cj ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/api/mul.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "mul",
    "memberof": "src/api/mul.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/mul.js~mul",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/api/mul.js",
    "importStyle": "{mul}",
    "description": " - C is zero initialized,\n - |A| >= 0,\n - |B| >= 0,\n - |C| >= |A| + |B|.",
    "lineNumber": 10,
    "params": [
      {
        "name": "r",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "ci",
        "types": [
          "*"
        ]
      },
      {
        "name": "cj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/core/arithmetic/add/_ADD.js",
    "content": "/**\n * Adds two big endian arrays and puts result in a destination array.\n * Wraps on overflow. |C| >= |A| >= |B|.\n *\n * @param {Number} r base (radix)\n * @param {Array} a first operand\n * @param {Number} ai a left\n * @param {Number} aj a right\n * @param {Array} b second operand\n * @param {Number} bi b left\n * @param {Number} bj b right\n * @param {Array} c result, must be 0 initialized\n * @param {Number} ci c left\n * @param {Number} cj c right\n */\n\nexport function _ADD ( r , a , ai , aj , b , bi , bj , c , ci , cj ) {\n\n\tlet C = 0 ;\n\n\twhile ( --bj >= bi ) {\n\t\tconst t = a[--aj] + b[bj] + C ;\n\t\tc[--cj] = t % r ;\n\t\tC = t >= r ;\n\t}\n\n\twhile ( --aj >= ai ) {\n\t\tconst t = a[aj] + C ;\n\t\tc[--cj] = t % r ;\n\t\tC = t >= r ;\n\t}\n\n\tif ( --cj >= ci ) c[cj] = +C ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/add/_ADD.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "_ADD",
    "memberof": "src/core/arithmetic/add/_ADD.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/add/_ADD.js~_ADD",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/add/_ADD.js",
    "importStyle": "{_ADD}",
    "description": "Adds two big endian arrays and puts result in a destination array.\nWraps on overflow. |C| >= |A| >= |B|.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "base (radix)"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "second operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "b left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "b right"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "result, must be 0 initialized"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ci",
        "description": "c left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cj",
        "description": "c right"
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/core/arithmetic/add/_IADD.js",
    "content": "/**\n * Adds a big endian array to another.\n * Wraps on overflow. |A| >= |B|.\n *\n * @param {Number} r base (radix)\n * @param {Array} a first operand\n * @param {Number} ai a left\n * @param {Number} aj a right\n * @param {Array} b second operand\n * @param {Number} bi b left\n * @param {Number} bj b right\n */\n\nexport function _IADD ( r , a , ai , aj , b , bi , bj ) {\n\n\tlet C = 0 ;\n\n\twhile ( --bj >= bi ) {\n\t\tconst T = a[--aj] + b[bj] + C ;\n\t\ta[aj] = T % r ;\n\t\tC = T >= r ;\n\t}\n\n\twhile ( --aj >= ai ) {\n\t\tconst T = a[aj] + C ;\n\t\ta[aj] = T % r ;\n\t\tC = T >= r ;\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/add/_IADD.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "_IADD",
    "memberof": "src/core/arithmetic/add/_IADD.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/add/_IADD.js~_IADD",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/add/_IADD.js",
    "importStyle": "{_IADD}",
    "description": "Adds a big endian array to another.\nWraps on overflow. |A| >= |B|.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "base (radix)"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "second operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "b left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "b right"
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/core/arithmetic/add/_increment.js",
    "content": "\n/**\n * Adds 1 to a big endian array.\n *\n * @param {Number} r radix\n * @param {Array} a first operand\n * @param {Number} ai a left\n * @param {Number} aj a right\n */\nexport function _increment ( r , a , ai , aj ) {\n\n\tconst _r = r - 1 ;\n\n\twhile ( --aj >= ai ) {\n\n\t\tif ( a[aj] < _r ) {\n\t\t\t++a[aj] ;\n\t\t\treturn ;\n\t\t}\n\n\t\ta[aj] = 0 ;\n\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/add/_increment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "_increment",
    "memberof": "src/core/arithmetic/add/_increment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/add/_increment.js~_increment",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/add/_increment.js",
    "importStyle": "{_increment}",
    "description": "Adds 1 to a big endian array.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "radix"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/core/arithmetic/add/index.js",
    "content": "export * from './_ADD' ;\nexport * from './_IADD' ;\nexport * from './_increment' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/add/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/core/arithmetic/div/_div_limb_with_prefix.js",
    "content": "/**\n * Divides a big endian number by a single limb number.\n * Can only work with limbs of size at most sqrt( 2^53 ).\n * Allows to prefix the dividend with an intermediate remainder.\n *\n * Does not update the remainder.\n *\n * Input\n * -----\n *  - |Q| = |D|\n *\n * @param {Number} r The radix.\n * @param {Number} tmp Intermediate remainder (MUST be <code>< d</code>).\n * @param {Number} d The divisor.\n * @param {Array} D The dividend (NOT modified).\n * @param {Number} Di Left of dividend.\n * @param {Number} Dj Right of dividend.\n * @param {Array} Q The quotient.\n * @param {Number} Qi Left of quotient.\n */\nexport function _div_limb_with_prefix ( r , tmp , d , D , Di , Dj , Q , Qi ) {\n\n\twhile ( Di < Dj ) {\n\n\t\ttmp *= r ; tmp += D[Di] ;\n\n\t\tQ[Qi] = tmp / d | 0 ;\n\t\ttmp %= d ;\n\n\t\t++Qi ; ++Di ;\n\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_div_limb_with_prefix.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "_div_limb_with_prefix",
    "memberof": "src/core/arithmetic/div/_div_limb_with_prefix.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_div_limb_with_prefix.js~_div_limb_with_prefix",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_div_limb_with_prefix.js",
    "importStyle": "{_div_limb_with_prefix}",
    "description": "Divides a big endian number by a single limb number.\nCan only work with limbs of size at most sqrt( 2^53 ).\nAllows to prefix the dividend with an intermediate remainder.\n\nDoes not update the remainder.\n\nInput\n-----\n - |Q| = |D|",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The radix."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tmp",
        "description": "Intermediate remainder (MUST be <code>< d</code>)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "The divisor."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "D",
        "description": "The dividend (NOT modified)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Di",
        "description": "Left of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Dj",
        "description": "Right of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "Q",
        "description": "The quotient."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Qi",
        "description": "Left of quotient."
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/core/arithmetic/div/_idivmod_dc.js",
    "content": "import { _zeros , _copy } from '../../array' ;\nimport { _imul_limb } from '../mul' ;\nimport { _idivmod_dc_21 , _div_limb_with_prefix , _mod_limb } from '.' ;\nimport { _CMP_n } from '../../compare' ;\n\n\n/**\n * Input\n * -----\n *  - No leading zeros\n *  - |A| = |C|\n *\n * References\n * ----------\n *   - https://gmplib.org/manual/Divide-and-Conquer-Division.html\n *\n * @param {Number} X The radix.\n * @param {Array} a Dividend / Remainder.\n * @param {Number} ai\n * @param {Number} aj\n * @param {Array} b Divisor.\n * @param {Number} bi\n * @param {Number} bj\n * @param {Array} c Quotient.\n * @param {Number} ci\n * @param {Number} cj\n */\nexport function _idivmod_dc ( X , a , ai , aj , b , bi , bj , c , ci , cj ) {\n\n\t// [BZ98] Fast Recursive Division\n\n\tconst r = aj - ai ;\n\tconst s = bj - bi ;\n\n\tif ( r < s || r === s && _CMP_n( a , ai , aj , b , bi ) < 0 ) return ;\n\n\t// shift to get n = 2^k for some k\n\tlet _n = 1 ;\n\n\twhile ( _n  < s ) _n <<= 1 ;\n\n\tconst n = _n ;\n\n\tconst shift = n - s ;\n\n\tconst x = b[bi] ;\n\tconst _X = X / 2 ;\n\tconst _normalize = x < _X ;\n\tconst z = Math.ceil( _X / x ) ;\n\n\tconst w = r + shift + ( _normalize || a[ai] >= _X ) ;\n\tconst t = Math.ceil( w / n ) ;\n\tconst _ai = 0 ;\n\tconst _aj = t * n ;            // + 1 if\n\tconst _a = _zeros( _aj ) ;     // potential normalization overflow\n\tconst _ak = _aj - shift - r ;  // or if A potentially bigger than B\n\t_copy( a , ai , aj , _a , _ak ) ;\n\n\tconst _bi = 0 ;\n\tconst _bj = n ;\n\tconst _b = _zeros( n ) ;\n\t_copy( b , bi , bj , _b , 0 ) ;\n\n\tif ( _normalize ) {\n\n\t\t_imul_limb( X , z , _a , _ai , _aj ) ;\n\t\t_imul_limb( X , z , _b , _bi , _bj ) ;\n\n\t}\n\n\tconst _cj = _aj ;\n\tconst _c = _zeros( _cj ) ;\n\n\tfor ( let i = 0 ; i < _aj - n ; i += n ) {\n\n\t\t_idivmod_dc_21( X , _a , i , i + ( n << 1 ) , _b , _bi , _bj , _c , i , i + ( n << 1 ) ) ;\n\n\t}\n\n\tif ( _normalize ) {\n\t\tconst p = _mod_limb( X , z , _a , _ai , _ak ) ;\n\t\t_div_limb_with_prefix( X , p , z , _a , _ak , _aj - shift , a , ai , aj ) ;\n\t}\n\telse {\n\t\t_copy( _a , _ak , _aj - shift , a , ai , aj ) ;\n\t}\n\n\t_copy( _c , _cj - r , _cj , c , ci ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_idivmod_dc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "_idivmod_dc",
    "memberof": "src/core/arithmetic/div/_idivmod_dc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_idivmod_dc.js~_idivmod_dc",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_idivmod_dc.js",
    "importStyle": "{_idivmod_dc}",
    "description": "Input\n-----\n - No leading zeros\n - |A| = |C|\n\nReferences\n----------\n  - https://gmplib.org/manual/Divide-and-Conquer-Division.html",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "X",
        "description": "The radix."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "Dividend / Remainder."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Divisor."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "Quotient."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ci",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cj",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/core/arithmetic/div/_idivmod_dc_21.js",
    "content": "import { THRESHOLD_DIV_DC } from '../../thresholds' ;\nimport { _idivmod_dc_32 , _idivmod_schoolbook_large_divisor } from '.' ;\n\n\n/**\n * Algorithm 3.3 Divide-and-conquer division (2 by 1)\n * ==================================================\n *\n * Input\n * -----\n *  Two nonnegative integers A and B,\n *  such that A < β^n B and β^n / 2 ≤ B < β^n.\n *  n must be even.\n *\n *                    -----------                 -----\n *                   |  :  |  :  |               |  :  |\n *                    -----------                 -----\n *\n * Output\n * ------\n *  The quotient floor( A/B ) and the remainder A mod B.\n *\n * Complexity\n * ----------\n *  T(n) = 2T'(n/2) + K\n *\n */\nexport function _idivmod_dc_21 ( r , a , ai , aj , b , bi , bj , c , ci , cj ) {\n\n\tif ( bj - bi < THRESHOLD_DIV_DC ) {\n\t\treturn _idivmod_schoolbook_large_divisor( r , a , ai , aj , b , bi , bj , c , ci ) ;\n\t}\n\n\t// 1. Let A = A_3 β^{3n/2} + A_2 β^n + A_1 β^{n/2} + A_0 and\n\t//    B = B_1 β^{n/2} + B_0,\n\t//    with 0 ≤ A_i < β^{n/2} and 0 ≤ B_i < β^{n/2}.\n\n\tconst m = aj - ai ;\n\tconst k = m >>> 2 ;\n\n\t// 2. Compute the high half Q_1 of the quotient as\n\t//    Q_1 = ( A_3 β^n + A_2 β^{n/2} + A_1 ) / B\n\t//    with remainder R_1 using algorithm 3.4.\n\n\t_idivmod_dc_32( r , a , ai , aj - k , b , bi , bj , c , ci , cj - k ) ;\n\n\t// 3. Compute the low half Q_0 of the quotient as\n\t//    Q_0 = ( R_1 β^{n/2} + A_0 ) / B\n\t//    with remainder R_0 using algorithm 3.4.\n\n\t_idivmod_dc_32( r , a , ai + k , aj , b , bi , bj , c , ci + k , cj ) ;\n\n\t// 4. Return the quotient Q = Q_1 β^{n/2} + Q_0 and the remainder R = R_0 .\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_idivmod_dc_21.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "_idivmod_dc_21",
    "memberof": "src/core/arithmetic/div/_idivmod_dc_21.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_idivmod_dc_21.js~_idivmod_dc_21",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_idivmod_dc_21.js",
    "importStyle": "{_idivmod_dc_21}",
    "description": "Algorithm 3.3 Divide-and-conquer division (2 by 1)\n==================================================\n\nInput\n-----\n Two nonnegative integers A and B,\n such that A < β^n B and β^n / 2 ≤ B < β^n.\n n must be even.\n\n                   -----------                 -----\n                  |  :  |  :  |               |  :  |\n                   -----------                 -----\n\nOutput\n------\n The quotient floor( A/B ) and the remainder A mod B.\n\nComplexity\n----------\n T(n) = 2T'(n/2) + K",
    "lineNumber": 28,
    "params": [
      {
        "name": "r",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "ci",
        "types": [
          "*"
        ]
      },
      {
        "name": "cj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/core/arithmetic/div/_idivmod_dc_32.js",
    "content": "import { _zeros , _fill } from '../../array' ;\nimport { _decrement , _isub } from '../sub' ;\nimport { _mul } from '../mul' ;\nimport { _lt } from '../../compare' ;\nimport { iadd } from '../../../api' ;\nimport { _idivmod_dc_21 } from '.' ;\n\n/**\n * Algorithm 3.4 Divide-and-conquer division (3 by 2)\n * ==================================================\n *\n * Input\n * -----\n *  Two nonnegative integers A and B,\n *  such that A < β^n B and β^{2n} / 2 ≤ B < β^{2n}.\n *  n must be even.\n *\n *                    --------                 -----\n *                   |  |  |  |               |  |  |\n *                    --------                 -----\n *\n * Output\n * ------\n *  The quotient floor( A/B ) and the remainder A mod B.\n *\n * Complexity\n * ----------\n *  T'(n) ≤ T(n) + M(n) + Ln\n *\n */\nexport function _idivmod_dc_32 ( r , a , ai , aj , b , bi , bj , c , ci , cj ) {\n\n\t// 1. Let A = A_2 β^{2n} + A_1 β^n + A_0 and\n\t//    B = B_1 β^{n} + B_0,\n\t//    with 0 ≤ A_i < β^n and 0 ≤ B_i < β^n.\n\n\tconst k = bj - bi ;\n\tconst n = k >>> 1 ;\n\n\t// 2. If A_2 < B_1, compute Q = floor( ( A_2 β^n + A_1 ) / B_1 ) with\n\t//    remainder R_1 using algorithm 3.3;\n\n\tif ( _lt( a , ai , ai + n , b , bi , bi + n ) ) {\n\t\t_idivmod_dc_21( r , a , ai , aj - n , b , bi , bi + n , c , ci + n , cj ) ;\n\t}\n\n\t//    otherwise let Q = β^n - 1, and R_1 = ( A_2 - B_1 ) β^n + A_1 + B_1\n\t//    (note in this case that A_2 = B_1)\n\n\telse {\n\t\t_fill( c , cj - n , cj , r - 1 ) ;\n\t\tiadd( r , a , ai , aj - n , b , bi , bi + n  ) ;\n\t\t_isub( r , a , ai , ai + n , b , bi , bi + n  ) ;\n\t}\n\n\t// 3. R <- R_1 β^n + A_0 - Q*B_0\n\n\tconst zi = 0 ;\n\tconst zj = n << 1 ;\n\tconst z = _zeros( zj ) ;\n\t_mul( r , c , cj - n , cj , b , bi + n , bj , z , zi , zj ) ;\n\t_isub( r , a , ai , aj , z , zi , zj ) ;\n\n\t// 4. if R < 0 , R <- R + B and Q <- Q - 1\n\n\tif ( a[ai] === 0 ) return ;\n\tiadd( r , a , ai , aj , b , bi , bj ) ;\n\t_decrement( r , c , cj - n , cj ) ;\n\n\t// 5. if R < 0 , R <- R + B and Q <- Q - 1\n\n\tif ( a[ai] === 0 ) return ;\n\tiadd( r , a , ai , aj , b , bi , bj ) ;\n\t_decrement( r , c , cj - n , cj ) ;\n\n\t// 6. Return Q and R\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_idivmod_dc_32.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "_idivmod_dc_32",
    "memberof": "src/core/arithmetic/div/_idivmod_dc_32.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_idivmod_dc_32.js~_idivmod_dc_32",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_idivmod_dc_32.js",
    "importStyle": "{_idivmod_dc_32}",
    "description": "Algorithm 3.4 Divide-and-conquer division (3 by 2)\n==================================================\n\nInput\n-----\n Two nonnegative integers A and B,\n such that A < β^n B and β^{2n} / 2 ≤ B < β^{2n}.\n n must be even.\n\n                   --------                 -----\n                  |  |  |  |               |  |  |\n                   --------                 -----\n\nOutput\n------\n The quotient floor( A/B ) and the remainder A mod B.\n\nComplexity\n----------\n T'(n) ≤ T(n) + M(n) + Ln",
    "lineNumber": 31,
    "params": [
      {
        "name": "r",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "ci",
        "types": [
          "*"
        ]
      },
      {
        "name": "cj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/core/arithmetic/div/_idivmod_limb.js",
    "content": "import { _idivmod_limb_with_prefix } from '.' ;\n\n/**\n * Divides a big endian number by a single limb number.\n * Can only work with limbs of size at most sqrt( 2^53 ).\n *\n * @param {Number} r The radix.\n * @param {Number} d The divisor.\n * @param {Array} D The dividend.\n * @param {Number} Di Left of dividend.\n * @param {Number} Dj Right of dividend.\n * @param {Array} Q The quotient.\n * @param {Number} Qi Left of quotient.\n */\nexport function _idivmod_limb ( r , d , D , Di , Dj , Q , Qi ) {\n\n\t// simply prefix the dividend with 0\n\t_idivmod_limb_with_prefix( r , 0 , d , D , Di , Dj , Q , Qi ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_idivmod_limb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "_idivmod_limb",
    "memberof": "src/core/arithmetic/div/_idivmod_limb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_idivmod_limb.js~_idivmod_limb",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_idivmod_limb.js",
    "importStyle": "{_idivmod_limb}",
    "description": "Divides a big endian number by a single limb number.\nCan only work with limbs of size at most sqrt( 2^53 ).",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The radix."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "The divisor."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "D",
        "description": "The dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Di",
        "description": "Left of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Dj",
        "description": "Right of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "Q",
        "description": "The quotient."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Qi",
        "description": "Left of quotient."
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/core/arithmetic/div/_idivmod_limb_with_prefix.js",
    "content": "/**\n * Divides a big endian number by a single limb number.\n * Can only work with limbs of size at most sqrt( 2^53 ).\n * Allows to prefix the dividend with an intermediate remainder.\n *\n * Input\n * -----\n *  - |Q| = |D|\n *\n * @param {Number} r The radix.\n * @param {Number} tmp Intermediate remainder (MUST be <code>< d</code>).\n * @param {Number} d The divisor.\n * @param {Array} D The dividend.\n * @param {Number} Di Left of dividend.\n * @param {Number} Dj Right of dividend.\n * @param {Array} Q The quotient.\n * @param {Number} Qi Left of quotient.\n */\nexport function _idivmod_limb_with_prefix ( r , tmp , d , D , Di , Dj , Q , Qi ) {\n\n\twhile ( Di < Dj ) {\n\n\t\ttmp *= r ; tmp += D[Di] ;\n\n\t\tQ[Qi] = tmp / d | 0 ;\n\t\ttmp %= d ;\n\t\tD[Di] = 0 ;\n\n\t\t++Qi ; ++Di ;\n\n\t}\n\n\tD[Dj-1] = tmp ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_idivmod_limb_with_prefix.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "_idivmod_limb_with_prefix",
    "memberof": "src/core/arithmetic/div/_idivmod_limb_with_prefix.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_idivmod_limb_with_prefix.js~_idivmod_limb_with_prefix",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_idivmod_limb_with_prefix.js",
    "importStyle": "{_idivmod_limb_with_prefix}",
    "description": "Divides a big endian number by a single limb number.\nCan only work with limbs of size at most sqrt( 2^53 ).\nAllows to prefix the dividend with an intermediate remainder.\n\nInput\n-----\n - |Q| = |D|",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The radix."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tmp",
        "description": "Intermediate remainder (MUST be <code>< d</code>)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "The divisor."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "D",
        "description": "The dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Di",
        "description": "Left of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Dj",
        "description": "Right of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "Q",
        "description": "The quotient."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Qi",
        "description": "Left of quotient."
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/core/arithmetic/div/_idivmod_schoolbook.js",
    "content": "import { _zeros , _copy } from '../../array' ;\nimport { _mul_limb } from '../mul' ;\nimport { _idivmod_schoolbook_large_divisor , _div_limb_with_prefix } from '.' ;\n\n/**\n * Computes q <- a / b and a <- a % b.\n * No leading zeros allowed.\n * q has length at least aj - ai\n *\n * @param {Number} r The radix.\n * @param {Array} a Dividend / Remainder.\n * @param {Number} ai\n * @param {Number} aj\n * @param {Array} b Divisor.\n * @param {Number} bi\n * @param {Number} bj\n * @param {Array} q Quotient.\n * @param {Number} qi\n */\nexport function _idivmod_schoolbook ( r , a , ai , aj , b , bi , bj , q , qi ) {\n\n\tconst _r = Math.ceil( r / 2 ) ;\n\tconst x = b[bi] ;\n\n\tif ( x < _r ) {\n\n\t\t// we need x to be >= _r so we multiply b by ceil( _r / x )\n\t\t// this gives us <= ( 1 + _r / x ) b < r^(bj-bi)\n\t\t// (this can be implemented faster using bit shifts if r = 2^k )\n\t\tconst z = Math.ceil( _r / x ) ;\n\t\tconst m = aj - ai + 1 ;\n\t\tconst n = bj - bi ;\n\n\t\tconst _a = _zeros( m ) ;\n\t\t_mul_limb( r , z , a , ai , aj , _a , 0 , m ) ;\n\n\t\tconst _b = _zeros( n ) ;\n\t\t_mul_limb( r , z , b , bi , bj , _b , 0 , n ) ;\n\n\t\tconst _q = _zeros( m ) ;\n\t\t_idivmod_schoolbook_large_divisor( r , _a , 0 , m , _b , 0 , n , _q , 0 ) ;\n\t\t_div_limb_with_prefix( r , _a[0] , z , _a , 1 , m , a , ai ) ;\n\t\t_copy( _q , 1 , m , q , qi ) ;\n\n\t}\n\n\telse _idivmod_schoolbook_large_divisor( r , a , ai , aj , b , bi , bj , q , qi ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_idivmod_schoolbook.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "_idivmod_schoolbook",
    "memberof": "src/core/arithmetic/div/_idivmod_schoolbook.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_idivmod_schoolbook.js~_idivmod_schoolbook",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_idivmod_schoolbook.js",
    "importStyle": "{_idivmod_schoolbook}",
    "description": "Computes q <- a / b and a <- a % b.\nNo leading zeros allowed.\nq has length at least aj - ai",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The radix."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "Dividend / Remainder."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Divisor."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "q",
        "description": "Quotient."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "qi",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/core/arithmetic/div/_idivmod_schoolbook_large_divisor.js",
    "content": "import { _trim_positive } from '../../convert' ;\nimport { _lt } from '../../compare' ;\nimport { _isub } from '..' ;\nimport { _idivmod_schoolbook_subroutine } from '.' ;\n\n/**\n * Input\n * -----\n *  - Two integers A and B such that r^(m-1) <= A < r^m and (r^n)/2 <= B < r^(n).\n *  - No leading zeros\n *\n * Output\n * -----\n *  The quotient floor( A/B ) and the remainder A mod B.\n *\n * @param {Number} r The radix.\n * @param {Array} a Dividend.\n * @param {Number} ai Left of dividend.\n * @param {Number} aj Right of dividend.\n * @param {Array} b Divisor.\n * @param {Number} bi Left of divisor.\n * @param {Number} bj Right of divisor.\n * @param {Array} q Quotient.\n * @param {Number} qi Left of quotient.\n */\nexport function _idivmod_schoolbook_large_divisor ( r , a , ai , aj , b , bi , bj , q , qi ) {\n\n\tconst m = aj - ai ;\n\tconst n = bj - bi ;\n\n\t// If m < n, return the quotient 0 and the remainder A.\n\tif ( m < n ) return ;\n\n\tif ( m === n ) {\n\n\t\t// If m = n, then if A < B, return the quotient 0 and the remainder A;\n\t\tif ( _lt( a , ai , aj , b , bi , bj ) ) return ;\n\n\t\t// if A ≥ B, return the quotient 1 and the remainder A - B.\n\t\t++q[qi+m-1] ;\n\t\t_isub( r , a , ai , aj , b , bi , bj ) ;\n\t\treturn ;\n\n\t}\n\n\t// If m = n + 1, compute the quotient and remainder of A/B\n\t// using algorithm 3.1 and return them.\n\tif ( m === n + 1 ) return _idivmod_schoolbook_subroutine( r , a , ai , aj , b , bi , bj , q , qi ) ;\n\n\n\t// 4. A' <- A/β^{m-n-1} and s <- A mod β^{m-n-1}\n\tconst _aj = ai + n + 1 ;\n\n\t// 5. Compute the quotient q' and the remainder r' of A'/B using algorithm 3.1.\n\t_idivmod_schoolbook_subroutine( r , a , ai , _aj , b , bi , bj , q , qi ) ;\n\n\t// 6. Compute the quotient q and remainder r of( β^{m-n-1} r' + s ) / B recursively.\n\tconst ak = _trim_positive( a , ai , _aj ) ;\n\t_idivmod_schoolbook_large_divisor( r , a , ak , aj , b , bi , bj , q , qi + ak - ai ) ;\n\n\t// 7. Return the quotient Q = β^{m-n-1} q' + q and remainder R = r\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_idivmod_schoolbook_large_divisor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "_idivmod_schoolbook_large_divisor",
    "memberof": "src/core/arithmetic/div/_idivmod_schoolbook_large_divisor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_idivmod_schoolbook_large_divisor.js~_idivmod_schoolbook_large_divisor",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_idivmod_schoolbook_large_divisor.js",
    "importStyle": "{_idivmod_schoolbook_large_divisor}",
    "description": "Input\n-----\n - Two integers A and B such that r^(m-1) <= A < r^m and (r^n)/2 <= B < r^(n).\n - No leading zeros\n\nOutput\n-----\n The quotient floor( A/B ) and the remainder A mod B.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The radix."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "Dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "Left of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "Right of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Divisor."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "Left of divisor."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "Right of divisor."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "q",
        "description": "Quotient."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "qi",
        "description": "Left of quotient."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/core/arithmetic/div/_idivmod_schoolbook_subroutine.js",
    "content": "import { _zeros } from '../../array' ;\nimport { _ge , _gt } from '../../compare' ;\nimport { _increment } from '..' ;\nimport { _isub } from '..' ;\nimport { _mul_limb } from '..' ;\n\n/**\n * Input\n * -----\n *  - Two integers A and B such that 0 <= A < r^n+1 and (r^n)/2 <= B < r^(n).\n *  - |a| = |b| + 1\n *  - |q| = |a|\n *\n * Output\n * -----\n *  The quotient floor( A/B ) and the remainder A mod B.\n *\n * @param {Number} r The radix.\n * @param {Array} a Dividend.\n * @param {Number} ai Left of dividend.\n * @param {Number} aj Right of dividend.\n * @param {Array} b Divisor.\n * @param {Number} bi Left of divisor.\n * @param {Number} bj Right of divisor.\n * @param {Array} q Quotient.\n * @param {Number} qi Left of quotient.\n */\nexport function _idivmod_schoolbook_subroutine ( r , a , ai , aj , b , bi , bj , q , qi ) {\n\n\tconst m = aj - ai ;\n\n\t// If A ≥ B*β, compute the quotient q and remainder r of ( A − B*β ) / B\n\t// recursively, and return β + q and r.\n\tif ( _ge( a , ai , aj - 1 , b , bi , bj ) ) {\n\t\t_isub( r , a , ai , aj - 1 , b , bi , bj ) ;\n\t\t_idivmod_schoolbook_subroutine( r , a , ai , aj , b , bi , bj , q , qi ) ;\n\t\t_increment( r , q , qi , qi + m - 1 ) ;\n\t\treturn ;\n\t}\n\n\t// If A < B*β, then A/B < β\n\t// q <- min [ ( β a_0 + a_1 ) / b_0 , β - 1 ]\n\tlet _q = Math.min( r - 1 , Math.floor( ( a[ai] * r + a[ai+1] ) / b[bi] ) ) ;\n\n\t// fix _q\n\tconst T = _zeros( m ) ;\n\t_mul_limb( r , _q , b , bi , bj , T , 0 , m ) ;\n\n\tif ( _gt( T , 0 , m , a , ai , aj ) ) {\n\t\t--_q ;\n\t\t_isub( r , T , 0 , m , b , bi , bj ) ;\n\n\t\tif ( _gt( T , 0 , m , a , ai , aj ) ) {\n\t\t\t--_q ;\n\t\t\t_isub( r , T , 0 , m , b , bi , bj ) ;\n\t\t}\n\n\t}\n\n\tq[qi + m - 1] += _q ;\n\n\t_isub( r , a , ai , aj , T , 0 , m ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_idivmod_schoolbook_subroutine.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "_idivmod_schoolbook_subroutine",
    "memberof": "src/core/arithmetic/div/_idivmod_schoolbook_subroutine.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_idivmod_schoolbook_subroutine.js~_idivmod_schoolbook_subroutine",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_idivmod_schoolbook_subroutine.js",
    "importStyle": "{_idivmod_schoolbook_subroutine}",
    "description": "Input\n-----\n - Two integers A and B such that 0 <= A < r^n+1 and (r^n)/2 <= B < r^(n).\n - |a| = |b| + 1\n - |q| = |a|\n\nOutput\n-----\n The quotient floor( A/B ) and the remainder A mod B.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The radix."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "Dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "Left of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "Right of dividend."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Divisor."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "Left of divisor."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "Right of divisor."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "q",
        "description": "Quotient."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "qi",
        "description": "Left of quotient."
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/core/arithmetic/div/_idivmod_slow.js",
    "content": "import { _sub } from '..' ;\nimport { _lt } from '../..' ;\n\n/**\n * Computes quotient and remainder of two big endian arrays.\n * <p>\n * Computes quotient and remainder of two big endian arrays\n * using long division algorithm (the one teached in\n * european primary schools).\n *\n * /!\\ This algorithm modifies its first operand.\n *\n * HYP : q is at least as large as r\n *       b is not zero\n *\n * @param {int} x the radix\n * @param {array} r dividend and remainder\n * @param {int} ri r left\n * @param {int} rj r right\n * @param {array} b divisor\n * @param {int} bi b left\n * @param {int} bj b right\n * @param {array} q quotient, must be 0 initialized\n * @param {int} qi q left\n */\n\n// /!\\ There are implicit hypotheses\n//     made on the size of the operands.\n//     Should clarify.\n\nexport function _idivmod_slow ( x , r , ri , rj , b , bi , bj , q , qi ) {\n\n\tvar k, t = ri + 1;\n\n\tdo {\n\n\t\t// trim leading zeros\n\t\t// TODO maybe could try to put this procedure inside the _sub loop\n\t\t// TODO or assume that the number is trimed at the begining\n\t\t//      and put this statement at the end of the main loop\n\t\twhile (ri < rj && r[ri] === 0) ++ri;\n\n\t\t// search for a remainder block interval\n\t\t// greater than the divisor\n\t\t// TODO maybe could try binary search on the _lt function\n\t\t//      for another implementation\n\t\tk = ri + 1;\n\t\twhile (k <= rj && _lt(r, ri, k, b, bi, bj)) ++k;\n\n\t\t// remainder smaller than divisor --> end\n\t\tif (k > rj) break;\n\n\t\t// divide current block interval by quotient\n\t\tdo{\n\n\t\t\t// increment quotient block corresponding\n\t\t\t// to current ls block of remainder interval\n\t\t\t++q[qi + k - t];\n\n\t\t\t// subtract divisor from current remainder\n\t\t\t// block interval\n\t\t\t_sub(x, r, ri, k, b, bi, bj, r, ri, k);\n\n\t\t} while(!_lt(r, ri, k, b, bi, bj));\n\n\n\t} while(true);\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_idivmod_slow.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "_idivmod_slow",
    "memberof": "src/core/arithmetic/div/_idivmod_slow.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_idivmod_slow.js~_idivmod_slow",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_idivmod_slow.js",
    "importStyle": "{_idivmod_slow}",
    "description": "Computes quotient and remainder of two big endian arrays.\n<p>\nComputes quotient and remainder of two big endian arrays\nusing long division algorithm (the one teached in\neuropean primary schools).\n\n/!\\ This algorithm modifies its first operand.\n\nHYP : q is at least as large as r\n      b is not zero",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "the radix"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "dividend and remainder"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "ri",
        "description": "r left"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "rj",
        "description": "r right"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "divisor"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "b left"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "b right"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "q",
        "description": "quotient, must be 0 initialized"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "qi",
        "description": "q left"
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/core/arithmetic/div/_mod_limb.js",
    "content": "\n/**\n * Divides a big endian number by a single limb number and returns only the\n * remainder. Can only work with limbs of size at most sqrt( 2^53 ).\n *\n * @param {Number} r The radix of D.\n * @param {Number} d The divisor.\n * @param {Array} D The dividend (NOT modified).\n * @param {Number} Di Left of D.\n * @param {Number} Dj Right of D.\n * @returns {Number} The remainder D % d.\n */\nexport function _mod_limb ( r , d , D , Di , Dj ) {\n\n\tlet R = 0 ;\n\n\twhile ( Di < Dj ) {\n\n\t\tR *= r ;\n\t\tR += D[Di] ;\n\t\tR %= d ;\n\t\t++Di ;\n\n\t}\n\n\treturn R ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/_mod_limb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "_mod_limb",
    "memberof": "src/core/arithmetic/div/_mod_limb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/div/_mod_limb.js~_mod_limb",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/div/_mod_limb.js",
    "importStyle": "{_mod_limb}",
    "description": "Divides a big endian number by a single limb number and returns only the\nremainder. Can only work with limbs of size at most sqrt( 2^53 ).",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} The remainder D % d."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The radix of D."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "The divisor."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "D",
        "description": "The dividend (NOT modified)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Di",
        "description": "Left of D."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "Dj",
        "description": "Right of D."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The remainder D % d."
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/core/arithmetic/div/index.js",
    "content": "export * from './_div_limb_with_prefix' ;\nexport * from './_idivmod_dc' ;\nexport * from './_idivmod_dc_21' ;\nexport * from './_idivmod_dc_32' ;\nexport * from './_idivmod_limb' ;\nexport * from './_idivmod_limb_with_prefix' ;\nexport * from './_idivmod_schoolbook' ;\nexport * from './_idivmod_schoolbook_large_divisor' ;\nexport * from './_idivmod_schoolbook_subroutine' ;\nexport * from './_idivmod_slow' ;\nexport * from './_mod_limb' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/div/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/core/arithmetic/gcd/_euclidean_algorithm.js",
    "content": "import { _idivmod } from '../../../api'\nimport { _zeros } from '../../../core/array'\nimport { _trim_positive } from '../../../core/convert'\n\n/**\n * Euclidean algorithm. Computes the gcd of the two input numbers A and B,\n * A >= B. Input arrays are modified ___in-place___.\n *\n * Input\n * -----\n *\n *   - A >= B\n *   - No leading zeros\n *\n * @param {Number} r The radix.\n * @param {Array} a The first input number A.\n * @param {Number} ai Left of A.\n * @param {Number} aj Right of A.\n * @param {Array} b The second input number B.\n * @param {Number} bi Left of B.\n * @param {Number} bj Right of B.\n * @returns {Array} The array containing the gcd of A and B (one of A and B).\n * Return as [ d , di , dj ], where d is the array and di and dj are its left\n * and right bounds.\n */\nexport function _euclidean_algorithm ( r , a , ai , aj , b , bi , bj ) {\n\n\t// TODO use _imod when implemented\n\n\tconst _j = aj - ai ;\n\tconst _ = _zeros( 0 , _j ) ;\n\n\twhile ( true ) {\n\n\t\tif ( bi === bj ) return [ a , ai , aj ] ;\n\n\t\t_idivmod( r , a , ai , aj , b , bi , bj , _ , _j - (aj - ai) , _j ) ;\n\n\t\tai = _trim_positive( a , aj - (bj - bi) , aj ) ;\n\n\t\tif ( ai === aj ) return [ b , bi , bj ] ;\n\n\t\t_idivmod( r , b , bi , bj , a , ai , aj , _ , _j - (bj - bi) , _j ) ;\n\n\t\tbi = _trim_positive( b , bj - (aj - ai) , bj ) ;\n\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/gcd/_euclidean_algorithm.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "_euclidean_algorithm",
    "memberof": "src/core/arithmetic/gcd/_euclidean_algorithm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/gcd/_euclidean_algorithm.js~_euclidean_algorithm",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/gcd/_euclidean_algorithm.js",
    "importStyle": "{_euclidean_algorithm}",
    "description": "Euclidean algorithm. Computes the gcd of the two input numbers A and B,\nA >= B. Input arrays are modified ___in-place___.\n\nInput\n-----\n\n  - A >= B\n  - No leading zeros",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} The array containing the gcd of A and B (one of A and B).\nReturn as [ d , di , dj ], where d is the array and di and dj are its left\nand right bounds."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The radix."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The first input number A."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "Left of A."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "Right of A."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "The second input number B."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "Left of B."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "Right of B."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The array containing the gcd of A and B (one of A and B).\nReturn as [ d , di , dj ], where d is the array and di and dj are its left\nand right bounds."
    }
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/core/arithmetic/gcd/_extended_euclidean_algorithm.js",
    "content": "\nimport { _idivmod } from '../../../api' ;\nimport { mul } from '../../../api' ;\nimport { _IADD } from '../../../core/arithmetic/add' ;\nimport { _increment } from '../../../core/arithmetic/add' ;\nimport { _alloc } from '../../../core/array' ;\nimport { _zeros } from '../../../core/array' ;\nimport { _reset } from '../../../core/array' ;\nimport { _copy } from '../../../core/array' ;\nimport { _jz } from '../../../core/compare' ;\nimport { _trim_positive } from '../../../core/convert' ;\nimport { stringify } from '../../../core/convert' ;\n\n/**\n * Extended Euclidean algorithm.\n *\n * @see https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n *\n * Given two input integers a and b, a > b.\n * Let r_0 = a, r_1 = b,\n *     s_0 = 1, s_1 = 0,\n *     t_0 = 0, t_1 = 1 (Fibonacci :winkemoji:).\n *\n * Let r_{i+1} = r_{i-1} % r_i             (division remainder)\n * Let q_i = (r_{i-1} - r_{i+1}) / r_i > 0 (division quotient)\n *\n * An alternative definition is\n * r_{i+1} = r_{i-1} - q_i r_i       (with 0 <= r_{i+1} < r_i)\n *\n * Then define\n * s_{i+1} = s_{i-1} - q_i s_i\n * t_{i+1} = t_{i-1} - q_i t_i\n *\n * Let k be such that r_i > 0 for all i <= k and r_{k+1} = 0.\n *\n * Since q_i > 0, if t_{i-1} > 0 and t_i < 0 then t_{i+1} > 0. On the other\n * hand, if t_{i-1} < 0 and t_i > 0 then t_{i+1} < 0. Note that t_2 < 0, so the\n * signs of the t_i alternate: t_0 = 0, t_1 = 1, t_2 < 0, t_3 > 0, t_4 < 0, t_5\n * > 0, etc. The pattern for t is 0, 1, -, +, -, +, -, etc.\n *\n * The same holds for the s_i with flipped signs: note that s_2 = 1, then\n * s_0 = 1, s_1 = 0, s_2 = 1, s_3 < 0, s_4 > 0, s_5 < 0, etc.\n * The pattern for s is 1, 0, 1, -, +, -, +, etc.\n *\n *   | 0  1  2  3  4  5  6\n * ------------------------\n * s | 1  0  1  -  +  -  +\n * t | 0  1  -  +  -  +  -\n *\n * With i >= 1, |t_{i+1}| >= |t_i| + |t_{i-1}| > |t_i| because q_i >= 1 and\n * |t_i| > 0 and, since the signs are alternating, we have |t_{i-1} - q_i t_i|\n * = |t_{i-1}| + |q_i t_i|. Same goes for s_{i+1} w.r.t s_i and s_{i-1}.\n *\n *\n * Input\n * -----\n *  - No leading zeroes\n *  - A > B\n *  - (two bullets above imply |A| >= |B|)\n *\n *\n * Implementation details\n * ----------------------\n *\n * Here the implementation avoids computing with negative numbers and will only\n * output the absolute value of s_{i} and t_{i}. The signs can be recovered\n * from the number of steps of the algorithm.\n *\n * Note that s_i <= b and t_i <= a (proof?). Equality holds\n * when i = k+1 and a and b are coprime. Thus s_i can sit in an array as large\n * as b and same for t_i and a.\n *\n * Output\n * ------\n *\n *  Calling this function returns and array with 6 items in this order:\n *\n *    1. The GCD of a and b.\n *    2. s_k.\n *    3. t_k.\n *    4. s_{k+1}.\n *    5. t_{k+1}.\n *    6. The number of steps that were executed.\n *\n * @param {Number} r The radix.\n * @param {Array} a First input number <code>a>b</code>.\n * @param {Number} ai <code>a</code> left bound.\n * @param {Number} aj <code>a</code> right bound.\n * @param {Array} b Second input number <code>b<a</code>.\n * @param {Number} bi <code>b</code> left bound.\n * @param {Number} bj <code>b</code> right bound.\n */\nexport function _extended_euclidean_algorithm(r, a, ai, aj, b, bi, bj) {\n\n\tconst m = aj - ai ;\n\tconst n = bj - bi ;\n\n\t// R_0 = a\n\tconst R0 = _alloc(m);\n\t_copy(a, ai, aj, R0, 0);\n\tlet R0i = 0;\n\tconst R0j = R0.length;\n\n\t// R_1 = b\n\tconst R1 = _alloc(n);\n\t_copy(b, bi, bj, R1, 0);\n\tlet R1i = 0;\n\tconst R1j = R1.length;\n\n\tconst Q = _zeros(m);\n\tlet   Qi = 0;\n\tconst Qj = Q.length;\n\n\t// S_0 = 1\n\tconst S0 = _zeros(Math.max(1,n));\n\tlet S0i = S0.length - 1;\n\tconst S0j = S0.length;\n\tS0[S0j - 1] = 1;\n\n\t// S_1 = 0\n\tconst S1 = _zeros(n);\n\tlet S1i = S1.length;\n\tconst S1j = S1.length;\n\n\t// T_0 = 0\n\tconst T0 = _zeros(m);\n\tlet T0i = T0.length;\n\tconst T0j = T0.length;\n\n\t// T_1 = 1\n\tconst T1 = _zeros(m);\n\tlet T1i = T1.length - 1;\n\tconst T1j = T1.length;\n\tT1[T1j - 1] = 1;\n\n\tconst X = _zeros(2*m);\n\tlet Xi = 0;\n\tconst Xj = X.length;\n\n\t// We handle the first two steps outside of loop because s_1 = t_0 = 0\n\t// and s_1 = 0, s_2 = 1\n\n\t// Invariants\n\t// ----------\n\t//\n\t// 1. No leading zeros in R0\n\t// 2. No leading zeros in R1\n\t// 3. |Q| = |R0| (why ???)\n\t// 4. s_0 = S0 > 0\n\t// 5. s_1 = S1 < 0\n\t// 6. t_0 = T0 < 0\n\t// 7. t_1 = T1 > 0\n\n\tif ( R1i === R1j ) {\n\t\treturn [ R0 , S0 , T0 , S1 , T1 , 1 ] ;\n\t}\n\n\t// Q_1 = (r_0 - r_2) / r_1\n\t// R0 is r_0 and becomes r_2\n\t// R1 is r_1\n\t// Q is q_1\n\t_idivmod(r, R0, R0i, R0j, R1, R1i, R1j, Q, Qi, Qj);\n\n\t// remove leading zeros from Q\n\t// since Q = R0 / R1 we have |R0| - |R1| <= |Q| <= |R0| - |R1| + 1\n\tQi = Qj - (R0j - R1j + 1) ; // R0i = R1i = 0\n\tif ( Q[Qi] === 0 ) ++Qi;\n\n\t// remove leading zeros from R0\n\t// since R0 = R0 % R1 we have |R0| <= |R1|\n\tR0i = _trim_positive( R0 , R0j - (R1j - R1i) , R0j) ;\n\n\t// s_2 = s_0 - q_1 * s_1 = s_0\n\t// S0 is s_0 and becomes s_2 i.e. NOTHING TO DO\n\n\t// t_2 = t_0 - q_1 * t_1 = q_1\n\t// T0 is t_0 and becomes t_2\n\tT0i = T0j - (Qj - Qi) ;\n\t_copy(Q, Qi, Qj, T0, T0i);\n\n\t// Invariants\n\t// ----------\n\t//\n\t// 1. No leading zeros in R0\n\t// 2. No leading zeros in R1\n\t// 3. |Q| = |R1| (why ???)\n\t// 4. s_1 = S1 < 0\n\t// 5. s_2 = S0 > 0\n\t// 6. t_1 = T1 > 0\n\t// 7. t_2 = T0 < 0\n\n\tif ( R0i === R0j ) {\n\t\treturn [ R1 , S1 , T1 , S0 , T0 , 2 ] ;\n\t}\n\n\t// Q_2 = (r_1 - r_{i+1}) / r_2\n\t// R1 is r_1 and becomes r_3\n\t// R0 is r_2\n\t// Q is q_2\n\tQi = Qj - (R1j - R1i);\n\t_reset(Q, Qi, Qj);\n\t_idivmod(r, R1, R1i, R1j, R0, R0i, R0j, Q, Qi, Qj);\n\n\t// remove leading zeros from Q\n\t// since Q = R1 / R0 we have |R1| - |R0| <= |Q| <= |R1| - |R0| + 1\n\tQi = Qj - (R1j - R0j + R0i + 1) ; // R1i = 0\n\tif ( Q[Qi] === 0 ) ++Qi;\n\n\t// remove leading zeros from R1\n\t// since R1 = R1 % R0 we have |R1| <= |R0|\n\tR1i = _trim_positive( R1 , R1j - (R0j - R0i) , R1j) ;\n\n\t// s_3 = s_1 - q_2 * s_2 = -q_2\n\tS1i = S1j - (Qj - Qi) ;\n\t_copy(Q, Qi, Qj, S1, S1i);\n\n\t// q_2 * t_2\n\t// since Q and T0 have no leading zeros then\n\t// Q * T0 has |Q| + |T0| - 1 <= |Q*T0| <= |Q| + |T0| limbs with no leading zeros.\n\tXi = Xj - (Qj - Qi) - (T0j - T0i) ;\n\tmul(r, T0, T0i, T0j, Q, Qi, Qj, X, Xi, Xj);\n\t// t_3 = t_1 - q_2 * t_2 = 1 - q_2 * t_2\n\t// T1 is t_1 and becomes t_3\n\t_increment(r, X, Xi, Xj);\n\tXi = _trim_positive( X , Xi , Xj) ;\n\tT1i = T1j - (Xj - Xi) ;\n\t_copy(X, Xi, Xj, T1, T1i);\n\n\tlet steps = 3 ;\n\twhile (true) {\n\n\t\t// Invariants\n\t\t// ----------\n\t\t//\n\t\t// 1. No leading zeros in R0\n\t\t// 2. No leading zeros in R1\n\t\t// 3. |Q| = |R0| (why ???)\n\t\t// 4. s_{i-1} = S0 > 0\n\t\t// 5. s_i = S1 < 0\n\t\t// 6. t_{i-1} = T0 < 0\n\t\t// 7. t_i = T1 > 0\n\n\t\tif ( R1i === R1j ) {\n\t\t\treturn [ R0 , S0 , T0 , S1 , T1 , steps ] ;\n\t\t}\n\t\t++steps;\n\n\t\t// Q_i = (r_{i-1} - r_{i+1}) / r_i\n\t\t// R0 is r_{i-1} and becomes r_{i+1}\n\t\t// R1 is r_i\n\t\t// Q is q_i\n\t\tQi = Qj - (R0j - R0i);\n\t\t_reset(Q, Qi, Qj);\n\t\t_idivmod(r, R0, R0i, R0j, R1, R1i, R1j, Q, Qi, Qj);\n\t\t// remove leading zeros from Q\n\t\t// since Q = R0 / R1 we have |R0| - |R1| <= |Q| <= |R0| - |R1| + 1\n\t\tQi = Qj - (R0j - R0i - R1j + R1i + 1) ;\n\t\tif ( Q[Qi] === 0 ) ++Qi;\n\t\t// remove leading zeros from R0\n\t\t// since R0 = R0 % R1 we have |R0| <= |R1|\n\t\tR0i = _trim_positive( R0 , R0j - (R1j - R1i) , R0j) ;\n\n\t\t// q_i * s_i\n\t\t// since Q and S1 have no leading zeros then\n\t\t// Q * S1 has |Q| + |S1| - 1 <= |Q*S1| <= |Q| + |S1| limbs with no leading zeros.\n\t\tXi = Xj - (Qj - Qi) - (S1j - S1i) ;\n\t\t_reset(X, Xi, Xj);\n\t\tmul(r, Q, Qi, Qj, S1, S1i, S1j, X, Xi, Xj);\n\t\tif ( X[Xi] === 0 ) ++Xi; // remove leading zero if no carry\n\n\t\t// s_{i+1} = s_{i-1} - q_i * s_i\n\t\t// S0 is s_{i-1} and becomes s_{i+1}\n\t\tS0i = S0j - (Xj - Xi + 1) ;\n\t\t_IADD(r, S0, S0i, S0j, X, Xi, Xj);\n\t\tif ( S0[S0i] === 0 ) ++S0i;\n\n\t\t// q_i * t_i\n\t\t// since Q and T1 have no leading zeros then\n\t\t// Q * T1 has |Q| + |T1| - 1 <= |Q*T1| <= |Q| + |T1| limbs with no leading zeros.\n\t\tXi = Xj - (Qj - Qi) - (T1j - T1i) ;\n\t\t_reset(X, Xi, Xj);\n\t\tmul(r, Q, Qi, Qj, T1, T1i, T1j, X, Xi, Xj);\n\t\tif ( X[Xi] === 0 ) ++Xi; // remove leading zero if no carry\n\n\t\t// t_{i+1} = t_{i-1} - q_i * t_i\n\t\t// T0 is t_{i-1} and becomes t_{i+1}\n\t\tT0i = T0j - (Xj - Xi + 1) ;\n\t\t_IADD(r, T0, T0i, T0j, X, Xi, Xj);\n\t\tif ( T0[T0i] === 0 ) ++T0i;\n\n\t\t// Invariants\n\t\t// ----------\n\t\t//\n\t\t// 1. No leading zeros in R0\n\t\t// 2. No leading zeros in R1\n\t\t// 3. |Q| = |R1| (why ???)\n\t\t// 4. s_{i-1} = S1 < 0\n\t\t// 5. s_i = S0 > 0\n\t\t// 6. t_{i-1} = T1 > 0\n\t\t// 7. t_i = T0 < 0\n\n\t\tif ( R0i === R0j ) {\n\t\t\treturn [ R1 , S1 , T1 , S0 , T0 , steps ] ;\n\t\t}\n\t\t++steps;\n\n\t\t// Q_i = (r_{i-1} - r_{i+1}) / r_i\n\t\t// R1 is r_{i-1} and becomes r_{i+1}\n\t\t// R0 is r_i\n\t\t// Q is q_i\n\t\tQi = Qj - (R1j - R1i);\n\t\t_reset(Q, Qi, Qj);\n\t\t_idivmod(r, R1, R1i, R1j, R0, R0i, R0j, Q, Qi, Qj);\n\t\t// remove leading zeros from Q\n\t\t// since Q = R1 / R0 we have |R1| - |R0| <= |Q| <= |R1| - |R0| + 1\n\t\tQi = Qj - (R1j - R1i - R0j + R0i + 1) ;\n\t\tif ( Q[Qi] === 0 ) ++Qi;\n\t\t// remove leading zeros from R1\n\t\t// since R1 = R1 % R0 we have |R1| <= |R0|\n\t\tR1i = _trim_positive( R1 , R1j - (R0j - R0i) , R1j) ;\n\n\t\t// q_i * s_i\n\t\t// since Q and S0 have no leading zeros then\n\t\t// Q * S0 has |Q| + |S0| - 1 <= |Q*S0| <= |Q| + |S0| limbs with no leading zeros.\n\t\tXi = Xj - (Qj - Qi) - (S0j - S0i) ;\n\t\t_reset(X, Xi, Xj);\n\t\tmul(r, Q, Qi, Qj, S0, S0i, S0j, X, Xi, Xj);\n\t\tif ( X[Xi] === 0 ) ++Xi; // remove leading zero if no carry\n\n\t\t// s_{i+1} = s_{i-1} - q_i * s_i\n\t\t// S1 is s_{i-1} and becomes s_{i+1}\n\t\tS1i = S1j - (Xj - Xi + 1) ;\n\t\t_IADD(r, S1, S1i, S1j, X, Xi, Xj);\n\t\tif ( S1[S1i] === 0 ) ++S1i;\n\n\t\t// q_i * t_i\n\t\t// since Q and T0 have no leading zeros then\n\t\t// Q * T0 has |Q| + |T0| - 1 <= |Q*T0| <= |Q| + |T0| limbs with no leading zeros.\n\t\tXi = Xj - (Qj - Qi) - (T0j - T0i) ;\n\t\t_reset(X, Xi, Xj);\n\t\tmul(r, Q, Qi, Qj, T0, T0i, T0j, X, Xi, Xj);\n\t\tif ( X[Xi] === 0 ) ++Xi; // remove leading zero if no carry\n\n\t\t// t_{i+1} = t_{i-1} - q_i * t_i\n\t\t// T1 is t_{i-1} and becomes t_{i+1}\n\t\tT1i = T1j - (Xj - Xi + 1) ;\n\t\t_IADD(r, T1, T1i, T1j, X, Xi, Xj);\n\t\tif ( T1[T1i] === 0 ) ++T1i;\n\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/gcd/_extended_euclidean_algorithm.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "_extended_euclidean_algorithm",
    "memberof": "src/core/arithmetic/gcd/_extended_euclidean_algorithm.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/gcd/_extended_euclidean_algorithm.js~_extended_euclidean_algorithm",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/gcd/_extended_euclidean_algorithm.js",
    "importStyle": "{_extended_euclidean_algorithm}",
    "description": "Extended Euclidean algorithm.",
    "see": [
      "https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n\nGiven two input integers a and b, a > b.\nLet r_0 = a, r_1 = b,\n    s_0 = 1, s_1 = 0,\n    t_0 = 0, t_1 = 1 (Fibonacci :winkemoji:).\n\nLet r_{i+1} = r_{i-1} % r_i             (division remainder)\nLet q_i = (r_{i-1} - r_{i+1}) / r_i > 0 (division quotient)\n\nAn alternative definition is\nr_{i+1} = r_{i-1} - q_i r_i       (with 0 <= r_{i+1} < r_i)\n\nThen define\ns_{i+1} = s_{i-1} - q_i s_i\nt_{i+1} = t_{i-1} - q_i t_i\n\nLet k be such that r_i > 0 for all i <= k and r_{k+1} = 0.\n\nSince q_i > 0, if t_{i-1} > 0 and t_i < 0 then t_{i+1} > 0. On the other\nhand, if t_{i-1} < 0 and t_i > 0 then t_{i+1} < 0. Note that t_2 < 0, so the\nsigns of the t_i alternate: t_0 = 0, t_1 = 1, t_2 < 0, t_3 > 0, t_4 < 0, t_5\n> 0, etc. The pattern for t is 0, 1, -, +, -, +, -, etc.\n\nThe same holds for the s_i with flipped signs: note that s_2 = 1, then\ns_0 = 1, s_1 = 0, s_2 = 1, s_3 < 0, s_4 > 0, s_5 < 0, etc.\nThe pattern for s is 1, 0, 1, -, +, -, +, etc.\n\n  | 0  1  2  3  4  5  6\n------------------------\ns | 1  0  1  -  +  -  +\nt | 0  1  -  +  -  +  -\n\nWith i >= 1, |t_{i+1}| >= |t_i| + |t_{i-1}| > |t_i| because q_i >= 1 and\n|t_i| > 0 and, since the signs are alternating, we have |t_{i-1} - q_i t_i|\n= |t_{i-1}| + |q_i t_i|. Same goes for s_{i+1} w.r.t s_i and s_{i-1}.\n\n\nInput\n-----\n - No leading zeroes\n - A > B\n - (two bullets above imply |A| >= |B|)\n\n\nImplementation details\n----------------------\n\nHere the implementation avoids computing with negative numbers and will only\noutput the absolute value of s_{i} and t_{i}. The signs can be recovered\nfrom the number of steps of the algorithm.\n\nNote that s_i <= b and t_i <= a (proof?). Equality holds\nwhen i = k+1 and a and b are coprime. Thus s_i can sit in an array as large\nas b and same for t_i and a.\n\nOutput\n------\n\n Calling this function returns and array with 6 items in this order:\n\n   1. The GCD of a and b.\n   2. s_k.\n   3. t_k.\n   4. s_{k+1}.\n   5. t_{k+1}.\n   6. The number of steps that were executed."
    ],
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The radix."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "First input number <code>a>b</code>."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "<code>a</code> left bound."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "<code>a</code> right bound."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Second input number <code>b<a</code>."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "<code>b</code> left bound."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "<code>b</code> right bound."
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/core/arithmetic/gcd/index.js",
    "content": "export * from './_extended_euclidean_algorithm' ;\nexport * from './_euclidean_algorithm' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/gcd/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/core/arithmetic/index.js",
    "content": "export * from './add' ;\nexport * from './div' ;\nexport * from './gcd' ;\nexport * from './mul' ;\nexport * from './pow' ;\nexport * from './sub' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/core/arithmetic/mul/_imul_limb.js",
    "content": "/**\n * Multiply b by x where x is a single limb.\n */\n\nexport function _imul_limb ( r , x , b , bi , bj ) {\n\n\tlet C = 0 ;\n\n\twhile ( --bj >= bi ) {\n\n\t\tconst t = b[bj] * x + C ;\n\t\tconst u = t % r ;\n\n\t\tb[bj] = u ;\n\n\t\tC = (t - u) / r ;\n\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/mul/_imul_limb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "_imul_limb",
    "memberof": "src/core/arithmetic/mul/_imul_limb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/mul/_imul_limb.js~_imul_limb",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/mul/_imul_limb.js",
    "importStyle": "{_imul_limb}",
    "description": "Multiply b by x where x is a single limb.",
    "lineNumber": 5,
    "params": [
      {
        "name": "r",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/core/arithmetic/mul/_karatsuba.js",
    "content": "import { add , iadd } from '../../../api' ;\nimport { _mul } from '.' ;\nimport { _isub } from '..' ;\nimport { _zeros , _copy } from '../..' ;\n\n/**\n *\n * Multiply two big endian arrays using karatsuba algorithm,\n * |A| >= |B| > 0, |C| >= 2 * |A|, |A| > 1.\n *\n * /!\\ BLOCK MULTIPLICATION RESULT MUST HOLD IN THE JAVASCRIPT NUMBER TYPE\n *     (DOUBLE i.e. 53 bits)\n *\n * EXPLANATION\n * ###########\n *\n * We consider the numbers a and b, both of size N = 2n.\n *\n * We divide a and b into their lower and upper parts.\n *\n * a = a1 r^{n} + a0 (1)\n * b = b1 r^{n} + b0 (2)\n *\n * We express the product of a and b using their lower and upper parts.\n *\n * a b = (a1 r^{n} + a0) (b1 r^{n} + b0) (3)\n *     = a1 b1 r^{2n} + (a1 b0 + a0 b1) r^{n} + a0 b0 (4)\n *\n * This gives us 4 multiplications with operands of size n.\n * Using a simple trick, we can reduce this computation to 3 multiplications.\n *\n * We give the 3 terms of (4) the names z0, z1 and z2.\n *\n * z2 = a1 b1\n * z1 = a1 b0 + a0 b1\n * z0 = a0 b0\n *\n * a b  = z2 r^{2n} + z1 r^{n} + z0\n *\n * We then express z1 using z0, z2 and one additional multiplication.\n *\n * (a1 + a0)(b1 + b0) = a1 b1 + a0 b0 + (a1 b0 + a0 b1)\n *                    = z2 + z0 + z1\n *\n * z1 = (a1 + a0)(b1 + b0) - z2 - z0\n *\n * AN ANOTHER WAY AROUND (not used here)\n *\n * (a1 - a0)(b1 - b0) = (a1 b1 + a0 b0) - (a1 b0 + a0 b1)\n * (a0 - a1)(b1 - b0) = (a1 b0 + a0 b1) - (a1 b1 + a0 b0)\n * a b = (r^{2n} + r^{n})a1 b1 + r^{n}(a0 - a1)(b1 - b0) + (r^{n} + 1)a0 b0\n *\n * This algorithm is a specific case of the Toom-Cook algorithm, when m = n =\n * 2.\n *\n * For further reference, see\n *  - http://en.wikipedia.org/wiki/Karatsuba_algorithm\n *  - http://en.wikipedia.org/wiki/Toom–Cook_multiplication\n *\n * @param {Number} r base (radix)\n * @param {Array} a first operand\n * @param {Number} ai a left\n * @param {Number} aj a right\n * @param {Array} b second operand\n * @param {Number} bi b left\n * @param {Number} bj b right\n * @param {Array} c result, must be 0 initialized\n * @param {Number} ci c left\n * @param {Number} cj c right\n */\n\nexport function _karatsuba ( r , a , ai , aj , b , bi , bj , c , ci , cj ) {\n\n\tconst i = aj - ai ;\n\tconst j = bj - bi ;\n\tconst k = cj - ci ;\n\n\tconst n  = Math.ceil( i / 2 ) ;\n\tconst I  = i + j ;\n\tconst N  = 2 * n ;\n\tconst N_ = I - N ;\n\tconst i_ = aj - n ;\n\tconst j_ = Math.max( bi , bj - n ) ;\n\n\tconst t1 = _zeros( n + 1 ) ; // + 1 to handle addition overflows\n\tconst t2 = _zeros( n + 1 ) ; // and guarantee reducing k for the\n\tconst t3 = _zeros( N + 1 ) ; // recursive calls\n\tconst z2 = _zeros( N_ ) ;\n\tconst z0 = _zeros( N ) ;\n\n\t// RECURSIVE CALLS\n\t_mul( r , a , ai , i_ , b , bi , j_ , z2 , 0 , N_ ) ;            // z2 = a1.b1\n\t_mul( r , a , i_ , aj , b , j_ , bj , z0 , 0 , N ) ;             // z0 = a0.b0\n\tadd( r , a , ai , i_ , a , i_ , aj , t1 , 0 , n + 1 ) ;         // (a0 + a1)\n\tadd( r , b , bi , j_ , b , j_ , bj , t2 , 0 , n + 1 ) ;         // (b1 + b0)\n\t_mul( r , t1 , 1 , n + 1 , t2 , 1 , n + 1 , t3 , 1 , N + 1 ) ;   // (a0 + a1)(b1 + b0)\n\n\t// BUILD OUTPUT\n\t_copy( z2 , 0 , N_ , c , cj - I ) ; // + z2 . r^{2n}\n\t_copy( z0 , 0 , N  , c , cj - N ) ; // + z0\n\n\t// overflow on t1, add t2 . r^{n}\n\tif ( t1[0] ) iadd( r , t3 , 0 , n + 1 , t2 , 0 , n + 1 ) ;\n\n\t// overflow on t2, add t1 . r^{n} (except t1[0])\n\tif ( t2[0] ) iadd( r , t3 , 0 , n + 1 , t1 , 1 , n + 1 ) ;\n\n\tiadd( r , c , ci , cj - n , t3 , 0 , N + 1 ) ; // + (a0 + a1)(b1 + b0) . r^{n}\n\t_isub( r , c , ci , cj - n , z2 , 0 , N_ ) ;    // - z2 . r^{n}\n\t_isub( r , c , ci , cj - n , z0 , 0 , N ) ;     // - z1 . r^{n}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/mul/_karatsuba.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "_karatsuba",
    "memberof": "src/core/arithmetic/mul/_karatsuba.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/mul/_karatsuba.js~_karatsuba",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/mul/_karatsuba.js",
    "importStyle": "{_karatsuba}",
    "description": "\nMultiply two big endian arrays using karatsuba algorithm,\n|A| >= |B| > 0, |C| >= 2 * |A|, |A| > 1.\n\n/!\\ BLOCK MULTIPLICATION RESULT MUST HOLD IN THE JAVASCRIPT NUMBER TYPE\n    (DOUBLE i.e. 53 bits)\n\nEXPLANATION\n###########\n\nWe consider the numbers a and b, both of size N = 2n.\n\nWe divide a and b into their lower and upper parts.\n\na = a1 r^{n} + a0 (1)\nb = b1 r^{n} + b0 (2)\n\nWe express the product of a and b using their lower and upper parts.\n\na b = (a1 r^{n} + a0) (b1 r^{n} + b0) (3)\n    = a1 b1 r^{2n} + (a1 b0 + a0 b1) r^{n} + a0 b0 (4)\n\nThis gives us 4 multiplications with operands of size n.\nUsing a simple trick, we can reduce this computation to 3 multiplications.\n\nWe give the 3 terms of (4) the names z0, z1 and z2.\n\nz2 = a1 b1\nz1 = a1 b0 + a0 b1\nz0 = a0 b0\n\na b  = z2 r^{2n} + z1 r^{n} + z0\n\nWe then express z1 using z0, z2 and one additional multiplication.\n\n(a1 + a0)(b1 + b0) = a1 b1 + a0 b0 + (a1 b0 + a0 b1)\n                   = z2 + z0 + z1\n\nz1 = (a1 + a0)(b1 + b0) - z2 - z0\n\nAN ANOTHER WAY AROUND (not used here)\n\n(a1 - a0)(b1 - b0) = (a1 b1 + a0 b0) - (a1 b0 + a0 b1)\n(a0 - a1)(b1 - b0) = (a1 b0 + a0 b1) - (a1 b1 + a0 b0)\na b = (r^{2n} + r^{n})a1 b1 + r^{n}(a0 - a1)(b1 - b0) + (r^{n} + 1)a0 b0\n\nThis algorithm is a specific case of the Toom-Cook algorithm, when m = n =\n2.\n\nFor further reference, see\n - http://en.wikipedia.org/wiki/Karatsuba_algorithm\n - http://en.wikipedia.org/wiki/Toom–Cook_multiplication",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "base (radix)"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "second operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "b left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "b right"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "result, must be 0 initialized"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ci",
        "description": "c left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cj",
        "description": "c right"
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/core/arithmetic/mul/_mul.js",
    "content": "import { _mul_limb , _schoolbook_mul , _karatsuba } from '.' ;\nimport { THRESHOLD_MUL_TOOM22 } from '../../thresholds' ;\n\n/**\n * C is zero initialized\n * |A| >= |B| >= 1, |C| >= |A| + |B|.\n * TODO use schoolbook mul if n = O(log m)\n */\n\nexport function _mul ( r , a , ai , aj , b , bi , bj , c , ci , cj ) {\n\n\t//const m = aj - ai ;\n\tconst n = bj - bi ;\n\n\t// TODO then |B| = 1 and could be faster\n\t//if ( m === 1 ) return _mul_limb( r , a[ai] , b , bi , bj , c , ci , cj ) ;\n\n\tif ( n === 1 ) return _mul_limb( r , b[bi] , a , ai , aj , c , ci , cj ) ;\n\n\t//if ( m === n ) {\n\n\t\t//if ( a === b && ai === bi ) return _sqr( r , a , ai , aj , c , ci , cj ) ;\n\n\t\t//return _mul_n( r , a , ai , aj , b , bi , bj , c , ci , cj ) ;\n\n\t//}\n\n\tif ( n < THRESHOLD_MUL_TOOM22 ) {\n\t\treturn _schoolbook_mul( r , a , ai , aj , b , bi , bj , c , ci , cj ) ;\n\t}\n\n\treturn _karatsuba( r , a , ai , aj , b , bi , bj , c , ci , cj ) ;\n\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/mul/_mul.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "_mul",
    "memberof": "src/core/arithmetic/mul/_mul.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/mul/_mul.js~_mul",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/mul/_mul.js",
    "importStyle": "{_mul}",
    "description": "C is zero initialized\n|A| >= |B| >= 1, |C| >= |A| + |B|.\nTODO use schoolbook mul if n = O(log m)",
    "lineNumber": 10,
    "params": [
      {
        "name": "r",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "ci",
        "types": [
          "*"
        ]
      },
      {
        "name": "cj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/core/arithmetic/mul/_mul_limb.js",
    "content": "/**\n * Compute x * b where x is a single limb.\n */\n\nexport function _mul_limb ( r , x , b , bi , bj , c , ci , cj ) {\n\n\tlet C = 0 ;\n\n\twhile ( true ) {\n\n\t\t--bj ;\n\t\t--cj ;\n\n\t\tif ( bj < bi ) {\n\t\t\tif ( cj >= ci ) c[cj] = C ;\n\t\t\treturn ;\n\t\t}\n\n\t\tif ( cj < ci ) return ;\n\n\t\tconst t = b[bj] * x + C ;\n\t\tconst u = t % r ;\n\n\t\tc[cj] = u ;\n\n\t\tC = (t - u) / r ;\n\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/mul/_mul_limb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "_mul_limb",
    "memberof": "src/core/arithmetic/mul/_mul_limb.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/mul/_mul_limb.js~_mul_limb",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/mul/_mul_limb.js",
    "importStyle": "{_mul_limb}",
    "description": "Compute x * b where x is a single limb.",
    "lineNumber": 5,
    "params": [
      {
        "name": "r",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "ci",
        "types": [
          "*"
        ]
      },
      {
        "name": "cj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/core/arithmetic/mul/_schoolbook_mul.js",
    "content": "\n/**\n * Computes the product of two big endian arrays using schoolbook\n * multiplication. |C| >= |A|+|B|.\n *\n * TODO Can this be optimized if we know that |A| >= |B|?\n * Probably better to do many small passes rather than few large passes ?!\n * This is what this implementation achieves, although it returns correct\n * results even when |A| < |B|.\n */\n\nexport function _schoolbook_mul ( r , a , ai , aj , b , bi , bj , c , ci , cj ) {\n\n\tconst m = aj - ai ;\n\tconst n = bj - bi ;\n\t--aj ;\n\t--bj ;\n\t--cj ;\n\n\tfor ( let i = 0 ; i < m ; ++i ) {\n\n\t\tlet q = 0 ;\n\n\t\tfor ( let j = 0 ; j < n ; ++j ) {\n\n\t\t\tconst t = c[cj-i-j] + q + a[aj-i] * b[bj-j] ;\n\t\t\tconst s = t % r ;\n\t\t\tc[cj-i-j] = s ;\n\t\t\tq = ( t - s ) / r ;\n\n\t\t}\n\n\t\tc[cj-i-n] = q ;\n\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/mul/_schoolbook_mul.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "_schoolbook_mul",
    "memberof": "src/core/arithmetic/mul/_schoolbook_mul.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/mul/_schoolbook_mul.js~_schoolbook_mul",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/mul/_schoolbook_mul.js",
    "importStyle": "{_schoolbook_mul}",
    "description": "Computes the product of two big endian arrays using schoolbook\nmultiplication. |C| >= |A|+|B|.\n\nTODO Can this be optimized if we know that |A| >= |B|?\nProbably better to do many small passes rather than few large passes ?!\nThis is what this implementation achieves, although it returns correct\nresults even when |A| < |B|.",
    "lineNumber": 12,
    "params": [
      {
        "name": "r",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "ci",
        "types": [
          "*"
        ]
      },
      {
        "name": "cj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/core/arithmetic/mul/_toom22.js",
    "content": "import { _karatsuba } from '.' ;\n\nexport const _toom22 = _karatsuba ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/mul/_toom22.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "_toom22",
    "memberof": "src/core/arithmetic/mul/_toom22.js",
    "static": true,
    "longname": "src/core/arithmetic/mul/_toom22.js~_toom22",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/mul/_toom22.js",
    "importStyle": "{_toom22}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/core/arithmetic/mul/index.js",
    "content": "export * from './_imul_limb' ;\nexport * from './_karatsuba' ;\nexport * from './_mul' ;\nexport * from './_mul_limb' ;\nexport * from './_schoolbook_mul' ;\nexport * from './_toom22' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/mul/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/core/arithmetic/pow/_powd.js",
    "content": "import { _zeros , _copy } from '../../array' ;\nimport { _mul } from '..' ;\n\n/**\n * Computes <code>pow(a,x) = a^x</code> using exponentiation by squaring.\n * Writes result to output array.\n *\n * /!\\ |C| >= |A| * x , |C| = 000...0\n *\n * @param {Number} r The base to work with.\n * @param {Number} x The power to raise <code>a</code> to.\n * @param {Array} a The base array.\n * @param {Number} ai <code>a</code> left.\n * @param {Number} aj <code>b</code> right.\n * @param {Array} c The output array.\n * @param {Number} ci <code>a</code> left.\n * @param {Number} cj <code>b</code> right.\n */\nexport function _powd (r, x, a, ai, aj, c, ci, cj) {\n\n\tif ( x === 0 ) {\n\t\tc[cj-1] = 1;\n\t}\n\n\telse if ( x === 1 ) {\n\t\t_copy( a , ai , aj , c , cj - ( aj - ai ) ) ;\n\t}\n\n\telse if ( x & 1 ) {\n\n\t\tconst p = x - 1 ;\n\t\tconst n = (aj - ai) * p;\n\t\tconst u = _zeros(n);\n\n\t\t_powd(r, p, a, ai, aj, u, 0, n);\n\t\t_mul(r, u, 0, n, a, ai, aj, c, ci, cj); // largest must be put first\n\t}\n\n\telse {\n\n\t\tconst p = x / 2 | 0 ;\n\t\tconst n = (aj - ai) * p;\n\t\tconst u = _zeros(n);\n\n\t\t_powd(r, p, a, ai, aj, u, 0, n);\n\t\t_mul(r, u, 0, n, u, 0, n, c, ci, cj);\n\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/pow/_powd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "_powd",
    "memberof": "src/core/arithmetic/pow/_powd.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/pow/_powd.js~_powd",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/pow/_powd.js",
    "importStyle": "{_powd}",
    "description": "Computes <code>pow(a,x) = a^x</code> using exponentiation by squaring.\nWrites result to output array.\n\n/!\\ |C| >= |A| * x , |C| = 000...0",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "The base to work with."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The power to raise <code>a</code> to."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The base array."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "<code>a</code> left."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "<code>b</code> right."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "The output array."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ci",
        "description": "<code>a</code> left."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cj",
        "description": "<code>b</code> right."
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/core/arithmetic/pow/index.js",
    "content": "export * from './_powd' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/pow/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/core/arithmetic/sub/_decrement.js",
    "content": "\n/**\n * Subtracts 1 from a big endian array.\n *\n * @param {Number} r radix\n * @param {Array} a first operand\n * @param {Number} ai a left\n * @param {Number} aj a right\n */\nexport function _decrement ( r , a , ai , aj ) {\n\n\twhile ( --aj >= ai ) {\n\n\t\tif ( a[aj] > 0 ) {\n\t\t\t--a[aj] ;\n\t\t\treturn ;\n\t\t}\n\n\t\ta[aj] = r - 1 ;\n\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/sub/_decrement.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "_decrement",
    "memberof": "src/core/arithmetic/sub/_decrement.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/sub/_decrement.js~_decrement",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/sub/_decrement.js",
    "importStyle": "{_decrement}",
    "description": "Subtracts 1 from a big endian array.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "radix"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/core/arithmetic/sub/_isub.js",
    "content": "\n/**\n * Subtracts B from A, |A| >= |B|.\n * Wraps.\n *\n * @param {int} r base (radix)\n * @param {array} a first operand\n * @param {int} ai a left\n * @param {int} aj a right\n * @param {array} b second operand\n * @param {int} bi b left\n * @param {int} bj b right\n */\n\nexport function _isub ( r , a , ai , aj , b , bi , bj ) {\n\n\tlet C = 0 ;\n\n\twhile ( --bj >= bi ) {\n\t\t--aj ;\n\t\tconst T = C ;\n\t\tC = a[aj] < b[bj] + T ;\n\t\ta[aj] = a[aj] - b[bj] + (C*r - T) ;\n\t}\n\n\twhile ( C && --aj >= ai ) {\n\t\tconst T = C ;\n\t\tC = a[aj] < T ;\n\t\ta[aj] += ( C*r - T ) ;\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/sub/_isub.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "_isub",
    "memberof": "src/core/arithmetic/sub/_isub.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/sub/_isub.js~_isub",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/sub/_isub.js",
    "importStyle": "{_isub}",
    "description": "Subtracts B from A, |A| >= |B|.\nWraps.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "base (radix)"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "second operand"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "b left"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "b right"
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/core/arithmetic/sub/_sub.js",
    "content": "\n/**\n * Subtracts two big endian arrays, |c| >= |a| >= |b|\n * wraps\n *\n * @param {int} r base (radix)\n * @param {array} a first operand\n * @param {int} ai a left\n * @param {int} aj a right\n * @param {array} b second operand\n * @param {int} bi b left\n * @param {int} bj b right\n * @param {array} c result, must be 0 initialized\n * @param {int} ci c left\n * @param {int} cj c right\n */\n\nexport function _sub ( r , a, ai, aj, b, bi, bj, c, ci, cj){\n\tvar T, C = 0;\n\n\twhile(--bj >= bi){\n\t\t--aj; --cj;\n\t\tT = C;\n\t\tC = a[aj] < b[bj] + T;\n\t\tc[cj] = a[aj] - b[bj] + (C*r - T);\n\t}\n\n\twhile(--aj >= ai){\n\t\t--cj;\n\t\tT = C;\n\t\tC = a[aj] < T;\n\t\tc[cj] = a[aj] + (C*r - T);\n\t}\n\n\tif(C){\n\t\twhile(--cj >= ci){\n\t\t\tc[cj] = r - 1;\n\t\t}\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/sub/_sub.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "_sub",
    "memberof": "src/core/arithmetic/sub/_sub.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/arithmetic/sub/_sub.js~_sub",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/arithmetic/sub/_sub.js",
    "importStyle": "{_sub}",
    "description": "Subtracts two big endian arrays, |c| >= |a| >= |b|\nwraps",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "base (radix)"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "second operand"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "b left"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "b right"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "result, must be 0 initialized"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "ci",
        "description": "c left"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "cj",
        "description": "c right"
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/core/arithmetic/sub/index.js",
    "content": "export * from './_decrement' ;\nexport * from './_isub' ;\nexport * from './_sub' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/arithmetic/sub/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/core/array/_alloc.js",
    "content": "\nexport function _alloc ( n ) {\n\n\treturn new Array( n ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/array/_alloc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "_alloc",
    "memberof": "src/core/array/_alloc.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/array/_alloc.js~_alloc",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/array/_alloc.js",
    "importStyle": "{_alloc}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/core/array/_build.js",
    "content": "\nexport function _build ( base , number ) {\n\n\tconst data = [ ] ;\n\n\tlet q = number ;\n\tconst d = base ;\n\n\twhile ( q >= d ) {\n\t\tconst r = q % d ;\n\t\tdata.push( r ) ;\n\t\tq = ( q - r ) / d ;\n\t}\n\n\tdata.push( q ) ;\n\n\treturn data.reverse( ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/array/_build.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "_build",
    "memberof": "src/core/array/_build.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/array/_build.js~_build",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/array/_build.js",
    "importStyle": "{_build}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      },
      {
        "name": "number",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/core/array/_copy.js",
    "content": "\nexport function _copy ( a , ai , aj , b , bi ) {\n\n\tfor ( ; ai < aj ; ++ai, ++bi ) b[bi] = a[ai] ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/array/_copy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "_copy",
    "memberof": "src/core/array/_copy.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/array/_copy.js~_copy",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/array/_copy.js",
    "importStyle": "{_copy}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/core/array/_fill.js",
    "content": "\nexport function _fill ( a , ai , aj , v ) {\n\n\tfor ( let i = ai ; i < aj ; ++i ) a[i] = v ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/array/_fill.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "_fill",
    "memberof": "src/core/array/_fill.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/array/_fill.js~_fill",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/array/_fill.js",
    "importStyle": "{_fill}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "v",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/core/array/_reset.js",
    "content": "import { _fill } from '.' ;\n\nexport function _reset ( a , ai , aj ) {\n\n\t_fill( a , ai , aj , 0 ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/array/_reset.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "_reset",
    "memberof": "src/core/array/_reset.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/array/_reset.js~_reset",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/array/_reset.js",
    "importStyle": "{_reset}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/core/array/_zeros.js",
    "content": "import { _alloc , _reset } from '.' ;\n\nexport function _zeros ( n ) {\n\n\tconst a = _alloc( n ) ;\n\n\t_reset( a , 0 , n ) ;\n\n\treturn a ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/array/_zeros.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "_zeros",
    "memberof": "src/core/array/_zeros.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/array/_zeros.js~_zeros",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/array/_zeros.js",
    "importStyle": "{_zeros}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/core/array/index.js",
    "content": "export * from './_alloc' ;\nexport * from './_build' ;\nexport * from './_copy' ;\nexport * from './_fill' ;\nexport * from './_reset' ;\nexport * from './_zeros' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/array/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/core/compare/_CMP.js",
    "content": "\n/**\n * Compares two big endian arrays, |a| >= |b|\n *\n * @param {array} a first operand\n * @param {int} ai a left\n * @param {int} aj a right\n * @param {array} b second operand\n * @param {int} bi b left\n * @param {int} bj b right\n *\n * @return {int} result 1 if a > b; 0 if a = b; -1 otherwise.\n */\n\nexport function _CMP (a, ai, aj, b, bi, bj){\n\n\tvar tmp = aj - bj + bi;\n\n\tfor (; ai < tmp; ++ai)\n\t\tif (a[ai] > 0) return 1;\n\n\t// same size aj - ai === bj - bi\n\tfor (; ai < aj; ++ai, ++bi) {\n\t\tif (a[ai] > b[bi]) return  1;\n\t\tif (a[ai] < b[bi]) return -1;\n\t}\n\n\treturn 0;\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/_CMP.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "_CMP",
    "memberof": "src/core/compare/_CMP.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/compare/_CMP.js~_CMP",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/compare/_CMP.js",
    "importStyle": "{_CMP}",
    "description": "Compares two big endian arrays, |a| >= |b|",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "second operand"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "b left"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "b right"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "int"
      ],
      "spread": false,
      "description": "result 1 if a > b; 0 if a = b; -1 otherwise."
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/core/compare/_CMP_n.js",
    "content": "\n/**\n * Compares two big endian arrays, |a| = |b|\n *\n * @param {Array} a first operand\n * @param {Number} ai a left\n * @param {Number} aj a right\n * @param {Array} b second operand\n * @param {Number} bi b left\n *\n * @return {Number} 1 if a > b; 0 if a = b; -1 otherwise.\n */\n\nexport function _CMP_n ( a , ai , aj , b , bi ) {\n\n\tfor (; ai < aj; ++ai, ++bi) {\n\t\tif (a[ai] > b[bi]) return  1;\n\t\tif (a[ai] < b[bi]) return -1;\n\t}\n\n\treturn 0;\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/_CMP_n.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "_CMP_n",
    "memberof": "src/core/compare/_CMP_n.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/compare/_CMP_n.js~_CMP_n",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/compare/_CMP_n.js",
    "importStyle": "{_CMP_n}",
    "description": "Compares two big endian arrays, |a| = |b|",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "second operand"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "b left"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "1 if a > b; 0 if a = b; -1 otherwise."
    }
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/core/compare/_cmp.js",
    "content": "import { _CMP } from '.' ;\n\nexport function _cmp ( a , ai , aj , b , bi , bj ) {\n\n\tif ( aj - ai < bj - bi )\n\t\treturn -_CMP( b , bi , bj , a , ai , aj ) ;\n\telse\n\t\treturn  _CMP( a , ai , aj , b , bi , bj ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/_cmp.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "_cmp",
    "memberof": "src/core/compare/_cmp.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/compare/_cmp.js~_cmp",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/compare/_cmp.js",
    "importStyle": "{_cmp}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/core/compare/_eq.js",
    "content": "import { _cmp } from '.' ;\n\nexport const _eq = ( a , ai , aj , b , bi , bj ) => _cmp( a , ai , aj , b , bi , bj ) === 0 ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/_eq.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "_eq",
    "memberof": "src/core/compare/_eq.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/compare/_eq.js~_eq",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/compare/_eq.js",
    "importStyle": "{_eq}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/core/compare/_ge.js",
    "content": "import { _cmp } from '.' ;\n\nexport const _ge = ( a , ai , aj , b , bi , bj ) => _cmp( a , ai , aj , b , bi , bj ) >= 0 ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/_ge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "_ge",
    "memberof": "src/core/compare/_ge.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/compare/_ge.js~_ge",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/compare/_ge.js",
    "importStyle": "{_ge}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/core/compare/_gt.js",
    "content": "import { _cmp } from '.' ;\n\nexport const _gt = ( a , ai , aj , b , bi , bj ) => _cmp( a , ai , aj , b , bi , bj ) > 0 ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/_gt.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "_gt",
    "memberof": "src/core/compare/_gt.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/compare/_gt.js~_gt",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/compare/_gt.js",
    "importStyle": "{_gt}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/core/compare/_jz.js",
    "content": "\n/**\n * Returns true if number is 0.\n *\n * @param {array} a first operand\n * @param {int} ai a left\n * @param {int} aj a right\n */\n\nexport function _jz ( a , ai , aj ) {\n\n\tfor ( ; ai < aj ; ++ai ) if ( a[ai] !== 0 ) return false ;\n\n\treturn true ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/_jz.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "_jz",
    "memberof": "src/core/compare/_jz.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/compare/_jz.js~_jz",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/compare/_jz.js",
    "importStyle": "{_jz}",
    "description": "Returns true if number is 0.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first operand"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "a left"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "a right"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/core/compare/_le.js",
    "content": "import { _cmp } from '.' ;\n\nexport const _le = ( a , ai , aj , b , bi , bj ) => _cmp( a , ai , aj , b , bi , bj ) <= 0 ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/_le.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "_le",
    "memberof": "src/core/compare/_le.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/compare/_le.js~_le",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/compare/_le.js",
    "importStyle": "{_le}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/core/compare/_lt.js",
    "content": "import { _cmp } from '.' ;\n\nexport const _lt = ( a , ai , aj , b , bi , bj ) => _cmp( a , ai , aj , b , bi , bj ) < 0 ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/_lt.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "_lt",
    "memberof": "src/core/compare/_lt.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/compare/_lt.js~_lt",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/compare/_lt.js",
    "importStyle": "{_lt}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/core/compare/_ne.js",
    "content": "import { _cmp } from '.' ;\n\nexport const _ne = ( a , ai , aj , b , bi , bj ) => _cmp( a , ai , aj , b , bi , bj ) !== 0 ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/_ne.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "_ne",
    "memberof": "src/core/compare/_ne.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/compare/_ne.js~_ne",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/compare/_ne.js",
    "importStyle": "{_ne}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "bi",
        "types": [
          "*"
        ]
      },
      {
        "name": "bj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/core/compare/index.js",
    "content": "export * from './_CMP' ;\nexport * from './_CMP_n' ;\nexport * from './_cmp' ;\nexport * from './_eq' ;\nexport * from './_ge' ;\nexport * from './_gt' ;\nexport * from './_jz' ;\nexport * from './_le' ;\nexport * from './_lt' ;\nexport * from './_ne' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/compare/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/core/convert/_chr.js",
    "content": "\nexport function _chr ( x ) {\n\n\tif ( x < 10 ) return String.fromCharCode( 48 + x ) ;\n\treturn String.fromCharCode( 87 + x ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_chr.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "_chr",
    "memberof": "src/core/convert/_chr.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_chr.js~_chr",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_chr.js",
    "importStyle": "{_chr}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/core/convert/_convert.js",
    "content": "import { _convert_to_smaller , _convert_to_larger } from '.' ;\nimport { _copy } from '../array' ;\n\n/**\n *\n * @param {Number} f the base to convert from\n * @param {Number} t the base to convert to\n * @param {Array} a the origin array\n * @param {Number} ai start offset in the origin array\n * @param {Number} aj end offset in the origin array\n * @param {Array} b the destination array\n * @param {Number} bi start offset in the destination array\n * @param {Number} bj end offset in the destination array\n */\n\nexport function _convert ( f , t , a , ai , aj , b , bi , bj ) {\n\n\tif ( f > t ) return _convert_to_smaller( f , t , a , ai , aj , b , bi , bj ) ;\n\tif ( f < t ) return _convert_to_larger( f , t , a , ai , aj , b , bi , bj ) ;\n\treturn _copy( a , ai , aj , b , bi ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_convert.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "_convert",
    "memberof": "src/core/convert/_convert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_convert.js~_convert",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_convert.js",
    "importStyle": "{_convert}",
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "the base to convert from"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "the base to convert to"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "start offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "end offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "start offset in the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "end offset in the destination array"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/core/convert/_convert_slow.js",
    "content": "import { _build , _alloc , _reset , _copy } from '../array' ;\nimport { _idivmod } from '../../api' ;\nimport { _jz } from '../compare' ;\n\n/**\n *\n * @param {Number} f the base to convert from\n * @param {Number} t the base to convert to\n * @param {Array} a the origin array\n * @param {Number} ai start offset in the origin array\n * @param {Number} aj end offset in the origin array\n * @param {Array} b the destination array\n * @param {Number} bi start offset in the destination array\n * @param {Number} bj end offset in the destination array\n */\n\nexport function _convert_slow ( f , t , a , ai , aj , b , bi , bj ) {\n\n\tconst d = _build( f , t ) ;\n\tconst n = d.length ;\n\tconst m = aj - ai ;\n\tconst q = _alloc( m ) ;\n\tconst r = _alloc( m ) ;        // NOTE that this copy is unnecessary when\n\t_copy( a , ai , aj , r , 0 ) ; // called from parse since we can discard it.\n\n\twhile ( true ) {\n\n\t\t_reset( q , 0 , m ) ;\n\n\t\t_idivmod( f , r , 0 , m , d , 0 , n , q , 0 , m ) ;\n\n\t\t--bj ;\n\t\tlet x = 0 ;\n\n\t\tfor ( let k = 0 ; k < m ; ++k ) {\n\t\t\tx *= f ;\n\t\t\tx += r[k] ;\n\t\t}\n\n\t\tb[bj] = x ;\n\n\t\tif ( _jz( q , 0 , m ) ) return ;\n\n\t\t_copy( q , 0 , m , r , 0 ) ;\n\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_convert_slow.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "_convert_slow",
    "memberof": "src/core/convert/_convert_slow.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_convert_slow.js~_convert_slow",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_convert_slow.js",
    "importStyle": "{_convert_slow}",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "the base to convert from"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "the base to convert to"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "start offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "end offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "start offset in the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "end offset in the destination array"
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "src/core/convert/_convert_to_larger.js",
    "content": "import { _log , _convert_to_larger_fast , _convert_slow } from '.' ;\n\n/**\n *\n * @param {Number} f the base to convert from\n * @param {Number} t the base to convert to\n * @param {Array} a the origin array\n * @param {Number} ai start offset in the origin array\n * @param {Number} aj end offset in the origin array\n * @param {Array} b the destination array\n * @param {Number} bi start offset in the destination array\n * @param {Number} bj end offset in the destination array\n */\n\nexport function _convert_to_larger ( f , t , a , ai , aj , b , bi , bj ) {\n\n\tconst [ z , x ] = _log( t , f ) ;\n\n\tif ( x === 1 ) return _convert_to_larger_fast( f , z , a , ai , aj , b , bi , bj ) ;\n\n\treturn _convert_slow( f , t , a , ai , aj , b , bi , bj ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_convert_to_larger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "_convert_to_larger",
    "memberof": "src/core/convert/_convert_to_larger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_convert_to_larger.js~_convert_to_larger",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_convert_to_larger.js",
    "importStyle": "{_convert_to_larger}",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "the base to convert from"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "the base to convert to"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "start offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "end offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "start offset in the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "end offset in the destination array"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/core/convert/_convert_to_larger_fast.js",
    "content": "\n\n/**\n *\n * @param {Number} ar the base to convert from\n * @param {Number} z if br is the base to convert to then log(br) = z log(ar)\n * @param {Array} a the origin array\n * @param {Number} ai start offset in the origin array\n * @param {Number} aj end offset in the origin array\n * @param {Array} b the destination array\n * @param {Number} bi start offset in the destination array\n * @param {Number} bj end offset in the destination array\n */\n\nexport function _convert_to_larger_fast ( ar , z , a , ai , aj , b , bi , bj ) {\n\n\tvar m, n, q, r, i, w, t;\n\n\tm = aj - ai;\n\tn = bj - bi;\n\n\t// number of parts of first\n\t// destination block if incomplete\n\tr = m % z;\n\n\t// number of complete blocks in destination\n\tq = (m - r) / z;\n\n\t// total number of blocks in destination\n\t// (complete ones + first if incomplete)\n\tw = q + !!r;\n\n\n\tif (n >= w) {\n\t\t// if destination can contain more than\n\t\t// what is available in source then\n\t\t// compute the effective write start\n\t\t// in destination and set i to the correct\n\t\t// offset according to the size\n\t\t// (in source blocks) of the\n\t\t// first destination block if incomplete\n\t\tbi = bj - w;\n\t\ti = (z - r) % z;\n\t}\n\telse {\n\t\t// if source contains more than what\n\t\t// destination can handle set the effective\n\t\t// read start in source and set i to 0 because\n\t\t// all blocks will be complete\n\t\tai = aj - n * z;\n\t\ti = 0;\n\t}\n\n\tfor (; ai < aj && bi < bj; ++bi) {\n\t\tt = 0;\n\t\tfor (; i < z; ++i) {\n\t\t\tt *= ar;     // aggregate source blocks\n\t\t\tt += a[ai];  // using simple\n\t\t\t++ai;        // multiply + add\n\t\t}\n\t\tb[bi] = t;  // set block in destination\n\t\ti = 0;\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_convert_to_larger_fast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "_convert_to_larger_fast",
    "memberof": "src/core/convert/_convert_to_larger_fast.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_convert_to_larger_fast.js~_convert_to_larger_fast",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_convert_to_larger_fast.js",
    "importStyle": "{_convert_to_larger_fast}",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ar",
        "description": "the base to convert from"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "if br is the base to convert to then log(br) = z log(ar)"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "start offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "end offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "start offset in the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "end offset in the destination array"
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/core/convert/_convert_to_smaller.js",
    "content": "import { _log , _convert_to_smaller_fast , _convert_slow } from '.' ;\n\n/**\n *\n * @param {Number} f the base to convert from\n * @param {Number} t the base to convert to\n * @param {Array} a the origin array\n * @param {Number} ai start offset in the origin array\n * @param {Number} aj end offset in the origin array\n * @param {Array} b the destination array\n * @param {Number} bi start offset in the destination array\n * @param {Number} bj end offset in the destination array\n */\n\nexport function _convert_to_smaller ( f , t , a , ai , aj , b , bi , bj ) {\n\n\tconst [ z , x ] = _log( f , t ) ;\n\n\tif ( x === 1 ) return _convert_to_smaller_fast( t , z , a , ai , aj , b , bi , bj ) ;\n\n\treturn _convert_slow( f , t , a , ai , aj , b , bi , bj ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_convert_to_smaller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "_convert_to_smaller",
    "memberof": "src/core/convert/_convert_to_smaller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_convert_to_smaller.js~_convert_to_smaller",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_convert_to_smaller.js",
    "importStyle": "{_convert_to_smaller}",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "the base to convert from"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "the base to convert to"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "start offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "end offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "start offset in the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "end offset in the destination array"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/core/convert/_convert_to_smaller_fast.js",
    "content": "\n/**\n *\n * @param {Number} br the base to convert to\n * @param {Number} z if ar is the base to convert to then log(ar) = z log(br)\n * @param {Array} a the origin array\n * @param {Number} ai start offset in the origin array\n * @param {Number} aj end offset in the origin array\n * @param {Array} b the destination array\n * @param {Number} bi start offset in the destination array\n * @param {Number} bj end offset in the destination array\n */\n\nexport function _convert_to_smaller_fast ( br , z , a , ai , aj , b , bi , bj ) {\n\n\tvar m, n, q, r, i, w, t;\n\n\tm = bj - bi;\n\tn = aj - ai;\n\n\t// number of parts of first\n\t// destination block if incomplete\n\tr = m % z;\n\n\t// number of complete blocks in destination\n\tq = (m - r) / z;\n\n\t// total number of blocks in destination\n\t// (complete ones + first if incomplete)\n\tw = q + !!r;\n\n\n\tif (n >= w) {\n\t\t// if source contains more than what\n\t\t// destination can handle set the effective\n\t\t// read start in source and set i to the correct\n\t\t// offset according to the size\n\t\t// (in destination blocks) of the\n\t\t// first source block if incomplete\n\t\tai = aj - w;\n\t\ti = (z - r) % z;\n\t}\n\telse {\n\t\t// if destination can contain more than\n\t\t// what is available in source then\n\t\t// compute the effective write start\n\t\t// in destination and set i to 0 because\n\t\t// all blocks will be complete\n\t\tbi = bj - n * z;\n\t\ti = 0;\n\t}\n\n\tfor (; ai < aj && bi < bj; ++ai) {\n\t\tq = a[ai];\n\t\tt = bi + z - 1 - i;\n\t\tbi += z - i;\n\t\tfor (; i < z; ++i) {\n\t\t\tr = q % br;        // unpack source blocks\n\t\t\tq = (q - r) / br;  // using simple\n\t\t\tb[t] = r;          // modulo + quotient\n\t\t\t--t;\n\t\t}\n\t\ti = 0;\n\t}\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_convert_to_smaller_fast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "_convert_to_smaller_fast",
    "memberof": "src/core/convert/_convert_to_smaller_fast.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_convert_to_smaller_fast.js~_convert_to_smaller_fast",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_convert_to_smaller_fast.js",
    "importStyle": "{_convert_to_smaller_fast}",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "br",
        "description": "the base to convert to"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "if ar is the base to convert to then log(ar) = z log(br)"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ai",
        "description": "start offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aj",
        "description": "end offset in the origin array"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bi",
        "description": "start offset in the destination array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "bj",
        "description": "end offset in the destination array"
      }
    ],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/core/convert/_int.js",
    "content": "\nexport function _int ( x ) {\n\n\tif ( x >= '0' && x <= '9' ) return x.charCodeAt( 0 ) - 48 ;\n\tif ( x >= 'A' && x <= 'Z' ) return x.charCodeAt( 0 ) - 55 ;\n\tif ( x >= 'a' && x <= 'z' ) return x.charCodeAt( 0 ) - 87 ;\n\n\tthrow new Error('invalid literal for _int: ' + x) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_int.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "_int",
    "memberof": "src/core/convert/_int.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_int.js~_int",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_int.js",
    "importStyle": "{_int}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/core/convert/_log.js",
    "content": "\nexport function _log ( x , y ) {\n\n\tlet z = 0 ;\n\n\twhile ( x >= y ) {\n\t\tif ( x % y ) break ;\n\t\tx /= y ;\n\t\t++z ;\n\t}\n\n\treturn [ z , x ] ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_log.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "_log",
    "memberof": "src/core/convert/_log.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_log.js~_log",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_log.js",
    "importStyle": "{_log}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/core/convert/_to_string.js",
    "content": "import { _chr } from '.' ;\n\nexport function _to_string ( b ) {\n\n\tconst n = b.length ;\n\n\tconst data = [ ] ;\n\n\tfor ( let k = 0 ; k < n ; ++k ) data.push( _chr( b[k] ) ) ;\n\n\treturn data.join( '' ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_to_string.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "_to_string",
    "memberof": "src/core/convert/_to_string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_to_string.js~_to_string",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_to_string.js",
    "importStyle": "{_to_string}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/core/convert/_trim_positive.js",
    "content": "\nexport function _trim_positive ( a , ai , aj ) {\n\n\twhile ( a[ai] === 0 && ai < aj ) ++ai ;\n\n\treturn ai ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/_trim_positive.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "_trim_positive",
    "memberof": "src/core/convert/_trim_positive.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/_trim_positive.js~_trim_positive",
    "access": "private",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/_trim_positive.js",
    "importStyle": "{_trim_positive}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/core/convert/convert.js",
    "content": "import { convert_keep_zeros , trim_natural } from '.' ;\n\nexport function convert ( f , t , a , ai , aj ) {\n\n\tconst b = convert_keep_zeros( f , t , a , ai , aj ) ;\n\n\treturn trim_natural( b , 0 , b.length ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/convert.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "convert",
    "memberof": "src/core/convert/convert.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/convert.js~convert",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/convert.js",
    "importStyle": "{convert}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "src/core/convert/convert_keep_zeros.js",
    "content": "import { _zeros } from '../array' ;\nimport { _convert } from '.' ;\n\nexport function convert_keep_zeros ( f , t , a , ai , aj ) {\n\n\tconst bi = 0 ;\n\tconst bj = Math.ceil( Math.log( f ) / Math.log( t ) * ( aj - ai ) ) ;\n\tconst b = _zeros( bj - bi ) ;\n\n\t_convert( f , t , a , ai , aj , b , bi , bj ) ;\n\n\treturn b ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/convert_keep_zeros.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "convert_keep_zeros",
    "memberof": "src/core/convert/convert_keep_zeros.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/convert_keep_zeros.js~convert_keep_zeros",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/convert_keep_zeros.js",
    "importStyle": "{convert_keep_zeros}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/core/convert/index.js",
    "content": "export * from './_chr' ;\nexport * from './_convert' ;\nexport * from './_convert_slow' ;\nexport * from './_convert_to_larger' ;\nexport * from './_convert_to_larger_fast' ;\nexport * from './_convert_to_smaller' ;\nexport * from './_convert_to_smaller_fast' ;\nexport * from './_int' ;\nexport * from './_log' ;\nexport * from './_to_string' ;\nexport * from './_trim_positive' ;\nexport * from './convert' ;\nexport * from './convert_keep_zeros' ;\nexport * from './parse' ;\nexport * from './parse_keep_zeros' ;\nexport * from './stringify' ;\nexport * from './stringify_keep_zeros' ;\nexport * from './translate' ;\nexport * from './trim_natural' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "src/core/convert/parse.js",
    "content": "import { parse_keep_zeros , trim_natural } from '.' ;\n\nexport function parse ( f , t , string ) {\n\n\tconst b = parse_keep_zeros( f , t , string ) ;\n\n\treturn trim_natural( b , 0 , b.length ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/parse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "parse",
    "memberof": "src/core/convert/parse.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/parse.js~parse",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/parse.js",
    "importStyle": "{parse}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "src/core/convert/parse_keep_zeros.js",
    "content": "import { _int , convert_keep_zeros } from '.' ;\n\nexport function parse_keep_zeros ( f , t , string ) {\n\n\tif ( f > 36 ) throw new Error('f > 36 not implemented') ;\n\n\tconst n = string.length ;\n\n\tconst a = [ ] ;\n\n\tfor ( let k = 0 ; k < n ; ++k ) a.push( _int( string[k] ) ) ;\n\n\treturn convert_keep_zeros( f , t , a , 0 , n ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/parse_keep_zeros.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "parse_keep_zeros",
    "memberof": "src/core/convert/parse_keep_zeros.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/parse_keep_zeros.js~parse_keep_zeros",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/parse_keep_zeros.js",
    "importStyle": "{parse_keep_zeros}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/core/convert/stringify.js",
    "content": "import { convert , _to_string } from '.' ;\n\nexport function stringify ( f , t , a , ai , aj ) {\n\n\tif ( t > 36 ) throw new Error('t > 36 not implemented') ;\n\n\tconst b = convert( f , t , a , ai , aj ) ;\n\n\treturn _to_string( b ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/stringify.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/core/convert/stringify.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/stringify.js~stringify",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/stringify.js",
    "importStyle": "{stringify}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/core/convert/stringify_keep_zeros.js",
    "content": "import { convert_keep_zeros , _to_string } from '.' ;\n\nexport function stringify_keep_zeros ( f , t , a , ai , aj ) {\n\n\tif ( t > 36 ) throw new Error('t > 36 not implemented') ;\n\n\tconst b = convert_keep_zeros( f , t , a , ai , aj ) ;\n\n\treturn _to_string( b ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/stringify_keep_zeros.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "stringify_keep_zeros",
    "memberof": "src/core/convert/stringify_keep_zeros.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/stringify_keep_zeros.js~stringify_keep_zeros",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/stringify_keep_zeros.js",
    "importStyle": "{stringify_keep_zeros}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "src/core/convert/translate.js",
    "content": "import { parse , stringify } from '.' ;\n\nexport function translate ( f , t , string ) {\n\n\tconst a = parse( f , t , string ) ;\n\treturn stringify( t , t , a , 0 , a.length ) ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/translate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "translate",
    "memberof": "src/core/convert/translate.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/translate.js~translate",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/translate.js",
    "importStyle": "{translate}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/core/convert/trim_natural.js",
    "content": "import { _trim_positive } from '.' ;\nimport { _alloc , _copy } from '../array' ;\n\nexport function trim_natural ( a , ai , aj ) {\n\n\tconst x = _trim_positive( a , ai , aj ) ;\n\n\tif ( x >= aj ) return [ 0 ] ;\n\n\tconst b = _alloc( aj - x ) ;\n\n\t_copy( a , x , aj , b , 0 ) ;\n\n\treturn b ;\n\n}\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/convert/trim_natural.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "trim_natural",
    "memberof": "src/core/convert/trim_natural.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/convert/trim_natural.js~trim_natural",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/convert/trim_natural.js",
    "importStyle": "{trim_natural}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "ai",
        "types": [
          "*"
        ]
      },
      {
        "name": "aj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "src/core/index.js",
    "content": "export * from './arithmetic' ;\nexport * from './array' ;\nexport * from './compare' ;\nexport * from './convert' ;\nexport * from './thresholds' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "file",
    "name": "src/core/thresholds/division.js",
    "content": "import { THRESHOLD_MUL_TOOM22 } from './multiplication' ;\n\nexport const THRESHOLD_DIV_DC = THRESHOLD_MUL_TOOM22 ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/thresholds/division.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "THRESHOLD_DIV_DC",
    "memberof": "src/core/thresholds/division.js",
    "static": true,
    "longname": "src/core/thresholds/division.js~THRESHOLD_DIV_DC",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/thresholds/division.js",
    "importStyle": "{THRESHOLD_DIV_DC}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/core/thresholds/index.js",
    "content": "export * from './division' ;\nexport * from './multiplication' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/thresholds/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/core/thresholds/multiplication.js",
    "content": "export const THRESHOLD_MUL_TOOM22 = 10 ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/core/thresholds/multiplication.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "THRESHOLD_MUL_TOOM22",
    "memberof": "src/core/thresholds/multiplication.js",
    "static": true,
    "longname": "src/core/thresholds/multiplication.js~THRESHOLD_MUL_TOOM22",
    "access": "public",
    "export": true,
    "importPath": "@aureooms/js-integer-big-endian/src/core/thresholds/multiplication.js",
    "importStyle": "{THRESHOLD_MUL_TOOM22}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/index.js",
    "content": "export * from './api' ;\nexport * from './core' ;\n",
    "static": true,
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "[@aureooms/js-integer-big-endian](https://aureooms.github.io/js-integer-big-endian)\n==\n\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/54/Big-Endian.svg\" width=\"864\">\n\nArbitrary precision arithmetic for integers in big endian order.\nTwin project of [@aureooms/js-integer-little-endian](https://github.com/aureooms/js-integer-little-endian).\n\n```js\ninteger.parse( 16 , 100 , 'ff' ) ; // [ 2 , 55 ]\ninteger.stringify( 100 , 16 , [ 2 , 55 ] ) ; // 'ff'\ninteger.translate( 10 , 16 , '255' ) ; // 'ff'\n```\n\n[![License](https://img.shields.io/github/license/aureooms/js-integer-big-endian.svg)](https://raw.githubusercontent.com/aureooms/js-integer-big-endian/master/LICENSE)\n[![Version](https://img.shields.io/npm/v/@aureooms/js-integer-big-endian.svg)](https://www.npmjs.org/package/@aureooms/js-integer-big-endian)\n[![Build](https://img.shields.io/travis/aureooms/js-integer-big-endian/master.svg)](https://travis-ci.org/aureooms/js-integer-big-endian/branches)\n[![Dependencies](https://img.shields.io/david/aureooms/js-integer-big-endian.svg)](https://david-dm.org/aureooms/js-integer-big-endian)\n[![Dev dependencies](https://img.shields.io/david/dev/aureooms/js-integer-big-endian.svg)](https://david-dm.org/aureooms/js-integer-big-endian?type=dev)\n[![GitHub issues](https://img.shields.io/github/issues/aureooms/js-integer-big-endian.svg)](https://github.com/aureooms/js-integer-big-endian/issues)\n[![Downloads](https://img.shields.io/npm/dm/@aureooms/js-integer-big-endian.svg)](https://www.npmjs.org/package/@aureooms/js-integer-big-endian)\n\n[![Code issues](https://img.shields.io/codeclimate/issues/aureooms/js-integer-big-endian.svg)](https://codeclimate.com/github/aureooms/js-integer-big-endian/issues)\n[![Code maintainability](https://img.shields.io/codeclimate/maintainability/aureooms/js-integer-big-endian.svg)](https://codeclimate.com/github/aureooms/js-integer-big-endian/trends/churn)\n[![Code coverage (cov)](https://img.shields.io/codecov/c/gh/aureooms/js-integer-big-endian/master.svg)](https://codecov.io/gh/aureooms/js-integer-big-endian)\n[![Code technical debt](https://img.shields.io/codeclimate/tech-debt/aureooms/js-integer-big-endian.svg)](https://codeclimate.com/github/aureooms/js-integer-big-endian/trends/technical_debt)\n[![Documentation](https://aureooms.github.io/js-integer-big-endian/badge.svg)](https://aureooms.github.io/js-integer-big-endian/source.html)\n[![Package size](https://img.shields.io/bundlephobia/minzip/@aureooms/js-integer-big-endian)](https://bundlephobia.com/result?p=@aureooms/js-integer-big-endian)\n\n## Reference\n\n - [The GNU Multiple Precision Arithmetic Library](https://gmplib.org/)\n - https://gmplib.org/gmp-man-6.0.0a.pdf\n - https://en.wikipedia.org/wiki/Sch%C3%B6nhage%E2%80%93Strassen_algorithm\n - http://bioinfo.ict.ac.cn/~dbu/AlgorithmCourses/Lectures/Hasselstrom2003.pdf\n",
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@aureooms/js-integer-big-endian\",\n  \"description\": \"Arbitrary precision arithmetic for integers in big endian order for JavaScript\",\n  \"version\": \"5.0.1\",\n  \"author\": \"Aurélien Ooms <aurelien.ooms@gmail.com>\",\n  \"ava\": {\n    \"require\": [\n      \"@babel/polyfill\",\n      \"@babel/register\"\n    ],\n    \"files\": [\n      \"test/src/**/*\"\n    ],\n    \"timeout\": \"1m\",\n    \"concurrency\": 8\n  },\n  \"babel\": {\n    \"presets\": [\n      \"@babel/preset-env\"\n    ],\n    \"env\": {\n      \"development\": {\n        \"sourceMaps\": \"inline\"\n      }\n    }\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/aureooms/js-integer-big-endian/issues\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@aureooms/js-array\": \"4.0.0\",\n    \"@aureooms/js-itertools\": \"4.0.0\",\n    \"@aureooms/js-memory\": \"4.0.0\",\n    \"@aureooms/js-operator\": \"1.0.2\",\n    \"@aureooms/js-random\": \"2.0.0\",\n    \"@babel/cli\": \"7.8.4\",\n    \"@babel/core\": \"7.9.6\",\n    \"@babel/polyfill\": \"7.8.7\",\n    \"@babel/preset-env\": \"7.9.6\",\n    \"@babel/register\": \"7.9.0\",\n    \"ava\": \"3.8.1\",\n    \"coveralls\": \"3.1.0\",\n    \"esdoc\": \"1.1.0\",\n    \"esdoc-inject-script-plugin\": \"1.0.0\",\n    \"esdoc-inject-style-plugin\": \"1.0.0\",\n    \"esdoc-standard-plugin\": \"1.0.0\",\n    \"np\": \"6.2.3\",\n    \"nyc\": \"15.0.1\"\n  },\n  \"files\": [\n    \"lib\"\n  ],\n  \"homepage\": \"https://aureooms.github.io/js-integer-big-endian\",\n  \"keywords\": [\n    \"arbitrary\",\n    \"arithmetic\",\n    \"big\",\n    \"endian\",\n    \"integers\",\n    \"javascript\",\n    \"js\",\n    \"numbers\",\n    \"precision\"\n  ],\n  \"license\": \"AGPL-3.0\",\n  \"main\": \"lib/index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/aureooms/js-integer-big-endian.git\"\n  },\n  \"scripts\": {\n    \"build\": \"rm -rf lib && babel src -d lib\",\n    \"cover\": \"nyc --reporter=lcov npm test\",\n    \"esdoc\": \"esdoc\",\n    \"prepare\": \"npm run build\",\n    \"release\": \"np\",\n    \"test\": \"ava\"\n  }\n}\n",
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": null,
    "longname": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/doc/manual/overview.md",
    "name": "./doc/manual/overview.md",
    "content": "# Overview\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/doc/manual/installation.md",
    "name": "./doc/manual/installation.md",
    "content": "# Installation\nCan be managed using\n[jspm](http://jspm.io)\nor [npm](https://github.com/npm/npm).\n\n### jspm\n```terminal\njspm install npm:@aureooms/js-integer-big-endian\n```\n\n### npm\n```terminal\nnpm install @aureooms/js-integer-big-endian --save\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/doc/manual/usage.md",
    "name": "./doc/manual/usage.md",
    "content": "# Usage\nThe code needs a ES2015+ polyfill to work, for example\n[@babel/polyfill](https://babeljs.io/docs/usage/polyfill).\n```js\nrequire( '@babel/polyfill' ) ;\n// or\nimport '@babel/polyfill' ;\n```\n\nThen\n```js\nconst measure = require( '@aureooms/js-integer-big-endian' ) ;\n// or\nimport measure from '@aureooms/js-integer-big-endian' ;\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/aureooms/dev/js/js-integer-big-endian/doc/manual/example.md",
    "name": "./doc/manual/example.md",
    "content": "# Examples\n",
    "static": true,
    "access": "public"
  }
]