'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._dc_div = _dc_div;

var _array = require('../../array');

var _mul = require('../mul');

var _ = require('.');

var _compare = require('../../compare');

/**
 * Input
 * -----
 *  - No leading zeros
 *  - |A| = |C|
 *
 * References
 * ----------
 *   - https://gmplib.org/manual/Divide-and-Conquer-Division.html
 *
 */
function _dc_div(X, a, ai, aj, b, bi, bj, c, ci, cj) {

	// [BZ98] Fast Recursive Division

	var r = aj - ai;
	var s = bj - bi;

	if (r < s || r === s && (0, _compare._CMP_n)(a, ai, aj, b, bi) < 0) return;

	// shift to get n = 2^k for some k
	var _n = 1;

	while (_n < s) {
		_n <<= 1;
	}var n = _n;

	var shift = n - s;

	var x = b[bi];
	var _X = X / 2;
	var _normalize = x < _X;
	var z = Math.ceil(_X / x);

	var w = r + shift + (_normalize || a[ai] >= _X);
	var t = Math.ceil(w / n);
	var _ai = 0;
	var _aj = t * n; // + 1 if
	var _a = (0, _array._zeros)(_aj); // potential normalization overflow
	var _ak = _aj - shift - r; // or if A potentially bigger than B
	(0, _array._copy)(a, ai, aj, _a, _ak);

	var _bi = 0;
	var _bj = n;
	var _b = (0, _array._zeros)(n);
	(0, _array._copy)(b, bi, bj, _b, 0);

	if (_normalize) {

		_imul_limb(X, z, _a, _ai, _aj);
		_imul_limb(X, z, _b, _bi, _bj);
	}

	var _cj = _aj;
	var _c = (0, _array._zeros)(_cj);

	for (var i = 0; i < _aj - n; i += n) {

		(0, _._dc_div_21)(X, _a, i, i + (n << 1), _b, _bi, _bj, _c, i, i + (n << 1));
	}

	if (_normalize) {
		var p = (0, _._mod_limb)(X, z, _a, _ai, _ak);
		(0, _._div_limb_partial_fast)(X, p, z, _a, _ak, _aj - shift, a, ai, aj);
	} else {
		(0, _array._copy)(_a, _ak, _aj - shift, a, ai, aj);
	}

	(0, _array._copy)(_c, _cj - r, _cj, c, ci);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy8xLW5ldy9hcml0aG1ldGljL2Rpdi9fZGNfZGl2LmpzIl0sIm5hbWVzIjpbIl9kY19kaXYiLCJYIiwiYSIsImFpIiwiYWoiLCJiIiwiYmkiLCJiaiIsImMiLCJjaSIsImNqIiwiciIsInMiLCJfbiIsIm4iLCJzaGlmdCIsIngiLCJfWCIsIl9ub3JtYWxpemUiLCJ6IiwiTWF0aCIsImNlaWwiLCJ3IiwidCIsIl9haSIsIl9haiIsIl9hIiwiX2FrIiwiX2JpIiwiX2JqIiwiX2IiLCJfaW11bF9saW1iIiwiX2NqIiwiX2MiLCJpIiwicCJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFpQmdCQSxPLEdBQUFBLE87O0FBakJoQjs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7Ozs7Ozs7Ozs7QUFXTyxTQUFTQSxPQUFULENBQW1CQyxDQUFuQixFQUF1QkMsQ0FBdkIsRUFBMkJDLEVBQTNCLEVBQWdDQyxFQUFoQyxFQUFxQ0MsQ0FBckMsRUFBeUNDLEVBQXpDLEVBQThDQyxFQUE5QyxFQUFtREMsQ0FBbkQsRUFBdURDLEVBQXZELEVBQTREQyxFQUE1RCxFQUFpRTs7QUFFdkU7O0FBRUEsS0FBTUMsSUFBSVAsS0FBS0QsRUFBZjtBQUNBLEtBQU1TLElBQUlMLEtBQUtELEVBQWY7O0FBRUEsS0FBS0ssSUFBSUMsQ0FBSixJQUFTRCxNQUFNQyxDQUFOLElBQVcscUJBQVFWLENBQVIsRUFBWUMsRUFBWixFQUFpQkMsRUFBakIsRUFBc0JDLENBQXRCLEVBQTBCQyxFQUExQixJQUFpQyxDQUExRCxFQUE4RDs7QUFFOUQ7QUFDQSxLQUFJTyxLQUFLLENBQVQ7O0FBRUEsUUFBUUEsS0FBTUQsQ0FBZDtBQUFrQkMsU0FBTyxDQUFQO0FBQWxCLEVBRUEsSUFBTUMsSUFBSUQsRUFBVjs7QUFFQSxLQUFNRSxRQUFRRCxJQUFJRixDQUFsQjs7QUFFQSxLQUFNSSxJQUFJWCxFQUFFQyxFQUFGLENBQVY7QUFDQSxLQUFNVyxLQUFLaEIsSUFBSSxDQUFmO0FBQ0EsS0FBTWlCLGFBQWFGLElBQUlDLEVBQXZCO0FBQ0EsS0FBTUUsSUFBSUMsS0FBS0MsSUFBTCxDQUFXSixLQUFLRCxDQUFoQixDQUFWOztBQUVBLEtBQU1NLElBQUlYLElBQUlJLEtBQUosSUFBY0csY0FBY2hCLEVBQUVDLEVBQUYsS0FBU2MsRUFBckMsQ0FBVjtBQUNBLEtBQU1NLElBQUlILEtBQUtDLElBQUwsQ0FBV0MsSUFBSVIsQ0FBZixDQUFWO0FBQ0EsS0FBTVUsTUFBTSxDQUFaO0FBQ0EsS0FBTUMsTUFBTUYsSUFBSVQsQ0FBaEIsQ0ExQnVFLENBMEJ4QztBQUMvQixLQUFNWSxLQUFLLG1CQUFRRCxHQUFSLENBQVgsQ0EzQnVFLENBMkJ4QztBQUMvQixLQUFNRSxNQUFNRixNQUFNVixLQUFOLEdBQWNKLENBQTFCLENBNUJ1RSxDQTRCeEM7QUFDL0IsbUJBQU9ULENBQVAsRUFBV0MsRUFBWCxFQUFnQkMsRUFBaEIsRUFBcUJzQixFQUFyQixFQUEwQkMsR0FBMUI7O0FBRUEsS0FBTUMsTUFBTSxDQUFaO0FBQ0EsS0FBTUMsTUFBTWYsQ0FBWjtBQUNBLEtBQU1nQixLQUFLLG1CQUFRaEIsQ0FBUixDQUFYO0FBQ0EsbUJBQU9ULENBQVAsRUFBV0MsRUFBWCxFQUFnQkMsRUFBaEIsRUFBcUJ1QixFQUFyQixFQUEwQixDQUExQjs7QUFFQSxLQUFLWixVQUFMLEVBQWtCOztBQUVqQmEsYUFBWTlCLENBQVosRUFBZ0JrQixDQUFoQixFQUFvQk8sRUFBcEIsRUFBeUJGLEdBQXpCLEVBQStCQyxHQUEvQjtBQUNBTSxhQUFZOUIsQ0FBWixFQUFnQmtCLENBQWhCLEVBQW9CVyxFQUFwQixFQUF5QkYsR0FBekIsRUFBK0JDLEdBQS9CO0FBRUE7O0FBRUQsS0FBTUcsTUFBTVAsR0FBWjtBQUNBLEtBQU1RLEtBQUssbUJBQVFELEdBQVIsQ0FBWDs7QUFFQSxNQUFNLElBQUlFLElBQUksQ0FBZCxFQUFrQkEsSUFBSVQsTUFBTVgsQ0FBNUIsRUFBZ0NvQixLQUFLcEIsQ0FBckMsRUFBeUM7O0FBRXhDLG9CQUFZYixDQUFaLEVBQWdCeUIsRUFBaEIsRUFBcUJRLENBQXJCLEVBQXlCQSxLQUFNcEIsS0FBSyxDQUFYLENBQXpCLEVBQTBDZ0IsRUFBMUMsRUFBK0NGLEdBQS9DLEVBQXFEQyxHQUFyRCxFQUEyREksRUFBM0QsRUFBZ0VDLENBQWhFLEVBQW9FQSxLQUFNcEIsS0FBSyxDQUFYLENBQXBFO0FBRUE7O0FBRUQsS0FBS0ksVUFBTCxFQUFrQjtBQUNqQixNQUFNaUIsSUFBSSxpQkFBV2xDLENBQVgsRUFBZWtCLENBQWYsRUFBbUJPLEVBQW5CLEVBQXdCRixHQUF4QixFQUE4QkcsR0FBOUIsQ0FBVjtBQUNBLGdDQUF3QjFCLENBQXhCLEVBQTRCa0MsQ0FBNUIsRUFBZ0NoQixDQUFoQyxFQUFvQ08sRUFBcEMsRUFBeUNDLEdBQXpDLEVBQStDRixNQUFNVixLQUFyRCxFQUE2RGIsQ0FBN0QsRUFBaUVDLEVBQWpFLEVBQXNFQyxFQUF0RTtBQUNBLEVBSEQsTUFJSztBQUNKLG9CQUFPc0IsRUFBUCxFQUFZQyxHQUFaLEVBQWtCRixNQUFNVixLQUF4QixFQUFnQ2IsQ0FBaEMsRUFBb0NDLEVBQXBDLEVBQXlDQyxFQUF6QztBQUNBOztBQUVELG1CQUFPNkIsRUFBUCxFQUFZRCxNQUFNckIsQ0FBbEIsRUFBc0JxQixHQUF0QixFQUE0QnhCLENBQTVCLEVBQWdDQyxFQUFoQztBQUVBIiwiZmlsZSI6Il9kY19kaXYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfemVyb3MgLCBfY29weSB9IGZyb20gJy4uLy4uL2FycmF5JyA7XG5pbXBvcnQgeyBfbXVsX2xpbWIgfSBmcm9tICcuLi9tdWwnIDtcbmltcG9ydCB7IF9kY19kaXZfMjEgLCBfZGl2X2xpbWJfcGFydGlhbF9mYXN0ICwgX21vZF9saW1iIH0gZnJvbSAnLicgO1xuaW1wb3J0IHsgX0NNUF9uIH0gZnJvbSAnLi4vLi4vY29tcGFyZScgO1xuXG5cbi8qKlxuICogSW5wdXRcbiAqIC0tLS0tXG4gKiAgLSBObyBsZWFkaW5nIHplcm9zXG4gKiAgLSB8QXwgPSB8Q3xcbiAqXG4gKiBSZWZlcmVuY2VzXG4gKiAtLS0tLS0tLS0tXG4gKiAgIC0gaHR0cHM6Ly9nbXBsaWIub3JnL21hbnVhbC9EaXZpZGUtYW5kLUNvbnF1ZXItRGl2aXNpb24uaHRtbFxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9kY19kaXYgKCBYICwgYSAsIGFpICwgYWogLCBiICwgYmkgLCBiaiAsIGMgLCBjaSAsIGNqICkge1xuXG5cdC8vIFtCWjk4XSBGYXN0IFJlY3Vyc2l2ZSBEaXZpc2lvblxuXG5cdGNvbnN0IHIgPSBhaiAtIGFpIDtcblx0Y29uc3QgcyA9IGJqIC0gYmkgO1xuXG5cdGlmICggciA8IHMgfHwgciA9PT0gcyAmJiBfQ01QX24oIGEgLCBhaSAsIGFqICwgYiAsIGJpICkgPCAwICkgcmV0dXJuIDtcblxuXHQvLyBzaGlmdCB0byBnZXQgbiA9IDJeayBmb3Igc29tZSBrXG5cdGxldCBfbiA9IDEgO1xuXG5cdHdoaWxlICggX24gIDwgcyApIF9uIDw8PSAxIDtcblxuXHRjb25zdCBuID0gX24gO1xuXG5cdGNvbnN0IHNoaWZ0ID0gbiAtIHMgO1xuXG5cdGNvbnN0IHggPSBiW2JpXSA7XG5cdGNvbnN0IF9YID0gWCAvIDIgO1xuXHRjb25zdCBfbm9ybWFsaXplID0geCA8IF9YIDtcblx0Y29uc3QgeiA9IE1hdGguY2VpbCggX1ggLyB4ICkgO1xuXG5cdGNvbnN0IHcgPSByICsgc2hpZnQgKyAoIF9ub3JtYWxpemUgfHwgYVthaV0gPj0gX1ggKSA7XG5cdGNvbnN0IHQgPSBNYXRoLmNlaWwoIHcgLyBuICkgO1xuXHRjb25zdCBfYWkgPSAwIDtcblx0Y29uc3QgX2FqID0gdCAqIG4gOyAgICAgICAgICAgIC8vICsgMSBpZlxuXHRjb25zdCBfYSA9IF96ZXJvcyggX2FqICkgOyAgICAgLy8gcG90ZW50aWFsIG5vcm1hbGl6YXRpb24gb3ZlcmZsb3dcblx0Y29uc3QgX2FrID0gX2FqIC0gc2hpZnQgLSByIDsgIC8vIG9yIGlmIEEgcG90ZW50aWFsbHkgYmlnZ2VyIHRoYW4gQlxuXHRfY29weSggYSAsIGFpICwgYWogLCBfYSAsIF9hayApIDtcblxuXHRjb25zdCBfYmkgPSAwIDtcblx0Y29uc3QgX2JqID0gbiA7XG5cdGNvbnN0IF9iID0gX3plcm9zKCBuICkgO1xuXHRfY29weSggYiAsIGJpICwgYmogLCBfYiAsIDAgKSA7XG5cblx0aWYgKCBfbm9ybWFsaXplICkge1xuXG5cdFx0X2ltdWxfbGltYiggWCAsIHogLCBfYSAsIF9haSAsIF9haiApIDtcblx0XHRfaW11bF9saW1iKCBYICwgeiAsIF9iICwgX2JpICwgX2JqICkgO1xuXG5cdH1cblxuXHRjb25zdCBfY2ogPSBfYWogO1xuXHRjb25zdCBfYyA9IF96ZXJvcyggX2NqICkgO1xuXG5cdGZvciAoIGxldCBpID0gMCA7IGkgPCBfYWogLSBuIDsgaSArPSBuICkge1xuXG5cdFx0X2RjX2Rpdl8yMSggWCAsIF9hICwgaSAsIGkgKyAoIG4gPDwgMSApICwgX2IgLCBfYmkgLCBfYmogLCBfYyAsIGkgLCBpICsgKCBuIDw8IDEgKSApIDtcblxuXHR9XG5cblx0aWYgKCBfbm9ybWFsaXplICkge1xuXHRcdGNvbnN0IHAgPSBfbW9kX2xpbWIoIFggLCB6ICwgX2EgLCBfYWkgLCBfYWsgKSA7XG5cdFx0X2Rpdl9saW1iX3BhcnRpYWxfZmFzdCggWCAsIHAgLCB6ICwgX2EgLCBfYWsgLCBfYWogLSBzaGlmdCAsIGEgLCBhaSAsIGFqICkgO1xuXHR9XG5cdGVsc2Uge1xuXHRcdF9jb3B5KCBfYSAsIF9hayAsIF9haiAtIHNoaWZ0ICwgYSAsIGFpICwgYWogKSA7XG5cdH1cblxuXHRfY29weSggX2MgLCBfY2ogLSByICwgX2NqICwgYyAsIGNpICkgO1xuXG59XG4iXX0=