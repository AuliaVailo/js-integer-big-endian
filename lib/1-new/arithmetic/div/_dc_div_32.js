"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._dc_div_32 = _dc_div_32;

/**
 * Algorithm 3.4 Divide-and-conquer division (3 by 2)
 * ==================================================
 *
 * Input
 * -----
 *  Two nonnegative integers A and B,
 *  such that A < β^n B and β^{2n} / 2 ≤ B < β^{2n}.
 *  n must be even.
 *
 *                    --------                 -----
 *                   |  |  |  |               |  |  |
 *                    --------                 -----
 *
 * Output
 * ------
 *  The quotient floor( A/B ) and the remainder A mod B.
 *
 * Complexity
 * ----------
 *  T'(n) ≤ T(n) + M(n) + Ln
 *
 */
function _dc_div_32(r, a, ai, aj, b, bi, bj, c, ci, cj) {

	// 1. Let A = A_2 β^{2n} + A_1 β^n + A_0 and
	//    B = B_1 β^{n} + B_0,
	//    with 0 ≤ A_i < β^n and 0 ≤ B_i < β^n.

	var k = bj - bi;
	var n = k >>> 1;

	// 2. If A_2 < B_1, compute Q = floor( ( A_2 β^n + A_1 ) / B_1 ) with
	//    remainder R_1 using algorithm 3.3;

	if (_lt(a, ai, ai + n, b, bi, bi + n)) {
		_dc_div_21(r, a, ai, aj - n, b, bi, bi + n, c, ci + n, cj);
	}

	//    otherwise let Q = β^n - 1, and R_1 = ( A_2 - B_1 ) β^n + A_1 + B_1
	//    (note in this case that A_2 = B_1)

	else {
			_fill(c, cj - n, cj, r - 1);
			_iadd(r, a, ai, aj - n, b, bi, bi + n);
			_isub(r, a, ai, ai + n, b, bi, bi + n);
		}

	// 3. R <- R_1 β^n + A_0 - Q*B_0

	var zi = 0;
	var zj = n << 1;
	var z = _zeros(zj);
	_mul(r, c, cj - n, cj, b, bi + n, bj, z, zi, zj);
	_isub(r, a, ai, aj, z, zi, zj);

	// 4. if R < 0 , R <- R + B and Q <- Q - 1

	if (a[ai] === 0) return;
	_iadd(r, a, ai, aj, b, bi, bj);
	_decrement(r, c, cj - n, cj);

	// 5. if R < 0 , R <- R + B and Q <- Q - 1

	if (a[ai] === 0) return;
	_iadd(r, a, ai, aj, b, bi, bj);
	_decrement(r, c, cj - n, cj);

	// 6. Return Q and R
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy8xLW5ldy9hcml0aG1ldGljL2Rpdi9fZGNfZGl2XzMyLmpzIl0sIm5hbWVzIjpbIl9kY19kaXZfMzIiLCJyIiwiYSIsImFpIiwiYWoiLCJiIiwiYmkiLCJiaiIsImMiLCJjaSIsImNqIiwiayIsIm4iLCJfbHQiLCJfZGNfZGl2XzIxIiwiX2ZpbGwiLCJfaWFkZCIsIl9pc3ViIiwiemkiLCJ6aiIsInoiLCJfemVyb3MiLCJfbXVsIiwiX2RlY3JlbWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUF3QmdCQSxVLEdBQUFBLFU7O0FBdkJoQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1Qk8sU0FBU0EsVUFBVCxDQUFzQkMsQ0FBdEIsRUFBMEJDLENBQTFCLEVBQThCQyxFQUE5QixFQUFtQ0MsRUFBbkMsRUFBd0NDLENBQXhDLEVBQTRDQyxFQUE1QyxFQUFpREMsRUFBakQsRUFBc0RDLENBQXRELEVBQTBEQyxFQUExRCxFQUErREMsRUFBL0QsRUFBb0U7O0FBRTFFO0FBQ0E7QUFDQTs7QUFFQSxLQUFNQyxJQUFJSixLQUFLRCxFQUFmO0FBQ0EsS0FBTU0sSUFBSUQsTUFBTSxDQUFoQjs7QUFFQTtBQUNBOztBQUVBLEtBQUtFLElBQUtYLENBQUwsRUFBU0MsRUFBVCxFQUFjQSxLQUFLUyxDQUFuQixFQUF1QlAsQ0FBdkIsRUFBMkJDLEVBQTNCLEVBQWdDQSxLQUFLTSxDQUFyQyxDQUFMLEVBQWdEO0FBQy9DRSxhQUFZYixDQUFaLEVBQWdCQyxDQUFoQixFQUFvQkMsRUFBcEIsRUFBeUJDLEtBQUtRLENBQTlCLEVBQWtDUCxDQUFsQyxFQUFzQ0MsRUFBdEMsRUFBMkNBLEtBQUtNLENBQWhELEVBQW9ESixDQUFwRCxFQUF3REMsS0FBS0csQ0FBN0QsRUFBaUVGLEVBQWpFO0FBQ0E7O0FBRUQ7QUFDQTs7QUFMQSxNQU9LO0FBQ0pLLFNBQU9QLENBQVAsRUFBV0UsS0FBS0UsQ0FBaEIsRUFBb0JGLEVBQXBCLEVBQXlCVCxJQUFJLENBQTdCO0FBQ0FlLFNBQU9mLENBQVAsRUFBV0MsQ0FBWCxFQUFlQyxFQUFmLEVBQW9CQyxLQUFLUSxDQUF6QixFQUE2QlAsQ0FBN0IsRUFBaUNDLEVBQWpDLEVBQXNDQSxLQUFLTSxDQUEzQztBQUNBSyxTQUFPaEIsQ0FBUCxFQUFXQyxDQUFYLEVBQWVDLEVBQWYsRUFBb0JBLEtBQUtTLENBQXpCLEVBQTZCUCxDQUE3QixFQUFpQ0MsRUFBakMsRUFBc0NBLEtBQUtNLENBQTNDO0FBQ0E7O0FBRUQ7O0FBRUEsS0FBTU0sS0FBSyxDQUFYO0FBQ0EsS0FBTUMsS0FBS1AsS0FBSyxDQUFoQjtBQUNBLEtBQU1RLElBQUlDLE9BQVFGLEVBQVIsQ0FBVjtBQUNBRyxNQUFNckIsQ0FBTixFQUFVTyxDQUFWLEVBQWNFLEtBQUtFLENBQW5CLEVBQXVCRixFQUF2QixFQUE0QkwsQ0FBNUIsRUFBZ0NDLEtBQUtNLENBQXJDLEVBQXlDTCxFQUF6QyxFQUE4Q2EsQ0FBOUMsRUFBa0RGLEVBQWxELEVBQXVEQyxFQUF2RDtBQUNBRixPQUFPaEIsQ0FBUCxFQUFXQyxDQUFYLEVBQWVDLEVBQWYsRUFBb0JDLEVBQXBCLEVBQXlCZ0IsQ0FBekIsRUFBNkJGLEVBQTdCLEVBQWtDQyxFQUFsQzs7QUFFQTs7QUFFQSxLQUFLakIsRUFBRUMsRUFBRixNQUFVLENBQWYsRUFBbUI7QUFDbkJhLE9BQU9mLENBQVAsRUFBV0MsQ0FBWCxFQUFlQyxFQUFmLEVBQW9CQyxFQUFwQixFQUF5QkMsQ0FBekIsRUFBNkJDLEVBQTdCLEVBQWtDQyxFQUFsQztBQUNBZ0IsWUFBWXRCLENBQVosRUFBZ0JPLENBQWhCLEVBQW9CRSxLQUFLRSxDQUF6QixFQUE2QkYsRUFBN0I7O0FBRUE7O0FBRUEsS0FBS1IsRUFBRUMsRUFBRixNQUFVLENBQWYsRUFBbUI7QUFDbkJhLE9BQU9mLENBQVAsRUFBV0MsQ0FBWCxFQUFlQyxFQUFmLEVBQW9CQyxFQUFwQixFQUF5QkMsQ0FBekIsRUFBNkJDLEVBQTdCLEVBQWtDQyxFQUFsQztBQUNBZ0IsWUFBWXRCLENBQVosRUFBZ0JPLENBQWhCLEVBQW9CRSxLQUFLRSxDQUF6QixFQUE2QkYsRUFBN0I7O0FBRUE7QUFFQSIsImZpbGUiOiJfZGNfZGl2XzMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEFsZ29yaXRobSAzLjQgRGl2aWRlLWFuZC1jb25xdWVyIGRpdmlzaW9uICgzIGJ5IDIpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIElucHV0XG4gKiAtLS0tLVxuICogIFR3byBub25uZWdhdGl2ZSBpbnRlZ2VycyBBIGFuZCBCLFxuICogIHN1Y2ggdGhhdCBBIDwgzrJebiBCIGFuZCDOsl57Mm59IC8gMiDiiaQgQiA8IM6yXnsybn0uXG4gKiAgbiBtdXN0IGJlIGV2ZW4uXG4gKlxuICogICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tICAgICAgICAgICAgICAgICAtLS0tLVxuICogICAgICAgICAgICAgICAgICAgfCAgfCAgfCAgfCAgICAgICAgICAgICAgIHwgIHwgIHxcbiAqICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLSAgICAgICAgICAgICAgICAgLS0tLS1cbiAqXG4gKiBPdXRwdXRcbiAqIC0tLS0tLVxuICogIFRoZSBxdW90aWVudCBmbG9vciggQS9CICkgYW5kIHRoZSByZW1haW5kZXIgQSBtb2QgQi5cbiAqXG4gKiBDb21wbGV4aXR5XG4gKiAtLS0tLS0tLS0tXG4gKiAgVCcobikg4omkIFQobikgKyBNKG4pICsgTG5cbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfZGNfZGl2XzMyICggciAsIGEgLCBhaSAsIGFqICwgYiAsIGJpICwgYmogLCBjICwgY2kgLCBjaiApIHtcblxuXHQvLyAxLiBMZXQgQSA9IEFfMiDOsl57Mm59ICsgQV8xIM6yXm4gKyBBXzAgYW5kXG5cdC8vICAgIEIgPSBCXzEgzrJee259ICsgQl8wLFxuXHQvLyAgICB3aXRoIDAg4omkIEFfaSA8IM6yXm4gYW5kIDAg4omkIEJfaSA8IM6yXm4uXG5cblx0Y29uc3QgayA9IGJqIC0gYmkgO1xuXHRjb25zdCBuID0gayA+Pj4gMSA7XG5cblx0Ly8gMi4gSWYgQV8yIDwgQl8xLCBjb21wdXRlIFEgPSBmbG9vciggKCBBXzIgzrJebiArIEFfMSApIC8gQl8xICkgd2l0aFxuXHQvLyAgICByZW1haW5kZXIgUl8xIHVzaW5nIGFsZ29yaXRobSAzLjM7XG5cblx0aWYgKCBfbHQoIGEgLCBhaSAsIGFpICsgbiAsIGIgLCBiaSAsIGJpICsgbiApICkge1xuXHRcdF9kY19kaXZfMjEoIHIgLCBhICwgYWkgLCBhaiAtIG4gLCBiICwgYmkgLCBiaSArIG4gLCBjICwgY2kgKyBuICwgY2ogKSA7XG5cdH1cblxuXHQvLyAgICBvdGhlcndpc2UgbGV0IFEgPSDOsl5uIC0gMSwgYW5kIFJfMSA9ICggQV8yIC0gQl8xICkgzrJebiArIEFfMSArIEJfMVxuXHQvLyAgICAobm90ZSBpbiB0aGlzIGNhc2UgdGhhdCBBXzIgPSBCXzEpXG5cblx0ZWxzZSB7XG5cdFx0X2ZpbGwoIGMgLCBjaiAtIG4gLCBjaiAsIHIgLSAxICkgO1xuXHRcdF9pYWRkKCByICwgYSAsIGFpICwgYWogLSBuICwgYiAsIGJpICwgYmkgKyBuICApIDtcblx0XHRfaXN1YiggciAsIGEgLCBhaSAsIGFpICsgbiAsIGIgLCBiaSAsIGJpICsgbiAgKSA7XG5cdH1cblxuXHQvLyAzLiBSIDwtIFJfMSDOsl5uICsgQV8wIC0gUSpCXzBcblxuXHRjb25zdCB6aSA9IDAgO1xuXHRjb25zdCB6aiA9IG4gPDwgMSA7XG5cdGNvbnN0IHogPSBfemVyb3MoIHpqICkgO1xuXHRfbXVsKCByICwgYyAsIGNqIC0gbiAsIGNqICwgYiAsIGJpICsgbiAsIGJqICwgeiAsIHppICwgemogKSA7XG5cdF9pc3ViKCByICwgYSAsIGFpICwgYWogLCB6ICwgemkgLCB6aiApIDtcblxuXHQvLyA0LiBpZiBSIDwgMCAsIFIgPC0gUiArIEIgYW5kIFEgPC0gUSAtIDFcblxuXHRpZiAoIGFbYWldID09PSAwICkgcmV0dXJuIDtcblx0X2lhZGQoIHIgLCBhICwgYWkgLCBhaiAsIGIgLCBiaSAsIGJqICkgO1xuXHRfZGVjcmVtZW50KCByICwgYyAsIGNqIC0gbiAsIGNqICkgO1xuXG5cdC8vIDUuIGlmIFIgPCAwICwgUiA8LSBSICsgQiBhbmQgUSA8LSBRIC0gMVxuXG5cdGlmICggYVthaV0gPT09IDAgKSByZXR1cm4gO1xuXHRfaWFkZCggciAsIGEgLCBhaSAsIGFqICwgYiAsIGJpICwgYmogKSA7XG5cdF9kZWNyZW1lbnQoIHIgLCBjICwgY2ogLSBuICwgY2ogKSA7XG5cblx0Ly8gNi4gUmV0dXJuIFEgYW5kIFJcblxufVxuIl19