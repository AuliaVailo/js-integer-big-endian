'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._dc_div_32 = _dc_div_32;

var _array = require('../../array');

var _sub = require('../sub');

var _compare = require('../../compare');

var _add = require('../add');

var _mul2 = require('../mul');

var _ = require('.');

/**
 * Algorithm 3.4 Divide-and-conquer division (3 by 2)
 * ==================================================
 *
 * Input
 * -----
 *  Two nonnegative integers A and B,
 *  such that A < β^n B and β^{2n} / 2 ≤ B < β^{2n}.
 *  n must be even.
 *
 *                    --------                 -----
 *                   |  |  |  |               |  |  |
 *                    --------                 -----
 *
 * Output
 * ------
 *  The quotient floor( A/B ) and the remainder A mod B.
 *
 * Complexity
 * ----------
 *  T'(n) ≤ T(n) + M(n) + Ln
 *
 */
function _dc_div_32(r, a, ai, aj, b, bi, bj, c, ci, cj) {

	// 1. Let A = A_2 β^{2n} + A_1 β^n + A_0 and
	//    B = B_1 β^{n} + B_0,
	//    with 0 ≤ A_i < β^n and 0 ≤ B_i < β^n.

	var k = bj - bi;
	var n = k >>> 1;

	// 2. If A_2 < B_1, compute Q = floor( ( A_2 β^n + A_1 ) / B_1 ) with
	//    remainder R_1 using algorithm 3.3;

	if ((0, _compare._lt)(a, ai, ai + n, b, bi, bi + n)) {
		(0, _._dc_div_21)(r, a, ai, aj - n, b, bi, bi + n, c, ci + n, cj);
	}

	//    otherwise let Q = β^n - 1, and R_1 = ( A_2 - B_1 ) β^n + A_1 + B_1
	//    (note in this case that A_2 = B_1)

	else {
			(0, _array._fill)(c, cj - n, cj, r - 1);
			(0, _add._iadd)(r, a, ai, aj - n, b, bi, bi + n);
			(0, _sub._isub)(r, a, ai, ai + n, b, bi, bi + n);
		}

	// 3. R <- R_1 β^n + A_0 - Q*B_0

	var zi = 0;
	var zj = n << 1;
	var z = (0, _array._zeros)(zj);
	(0, _mul2._mul)(r, c, cj - n, cj, b, bi + n, bj, z, zi, zj);
	(0, _sub._isub)(r, a, ai, aj, z, zi, zj);

	// 4. if R < 0 , R <- R + B and Q <- Q - 1

	if (a[ai] === 0) return;
	(0, _add._iadd)(r, a, ai, aj, b, bi, bj);
	(0, _sub._decrement)(r, c, cj - n, cj);

	// 5. if R < 0 , R <- R + B and Q <- Q - 1

	if (a[ai] === 0) return;
	(0, _add._iadd)(r, a, ai, aj, b, bi, bj);
	(0, _sub._decrement)(r, c, cj - n, cj);

	// 6. Return Q and R
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy8xLW5ldy9hcml0aG1ldGljL2Rpdi9fZGNfZGl2XzMyLmpzIl0sIm5hbWVzIjpbIl9kY19kaXZfMzIiLCJyIiwiYSIsImFpIiwiYWoiLCJiIiwiYmkiLCJiaiIsImMiLCJjaSIsImNqIiwiayIsIm4iLCJ6aSIsInpqIiwieiJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUE4QmdCQSxVLEdBQUFBLFU7O0FBOUJoQjs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1Qk8sU0FBU0EsVUFBVCxDQUFzQkMsQ0FBdEIsRUFBMEJDLENBQTFCLEVBQThCQyxFQUE5QixFQUFtQ0MsRUFBbkMsRUFBd0NDLENBQXhDLEVBQTRDQyxFQUE1QyxFQUFpREMsRUFBakQsRUFBc0RDLENBQXRELEVBQTBEQyxFQUExRCxFQUErREMsRUFBL0QsRUFBb0U7O0FBRTFFO0FBQ0E7QUFDQTs7QUFFQSxLQUFNQyxJQUFJSixLQUFLRCxFQUFmO0FBQ0EsS0FBTU0sSUFBSUQsTUFBTSxDQUFoQjs7QUFFQTtBQUNBOztBQUVBLEtBQUssa0JBQUtULENBQUwsRUFBU0MsRUFBVCxFQUFjQSxLQUFLUyxDQUFuQixFQUF1QlAsQ0FBdkIsRUFBMkJDLEVBQTNCLEVBQWdDQSxLQUFLTSxDQUFyQyxDQUFMLEVBQWdEO0FBQy9DLG9CQUFZWCxDQUFaLEVBQWdCQyxDQUFoQixFQUFvQkMsRUFBcEIsRUFBeUJDLEtBQUtRLENBQTlCLEVBQWtDUCxDQUFsQyxFQUFzQ0MsRUFBdEMsRUFBMkNBLEtBQUtNLENBQWhELEVBQW9ESixDQUFwRCxFQUF3REMsS0FBS0csQ0FBN0QsRUFBaUVGLEVBQWpFO0FBQ0E7O0FBRUQ7QUFDQTs7QUFMQSxNQU9LO0FBQ0oscUJBQU9GLENBQVAsRUFBV0UsS0FBS0UsQ0FBaEIsRUFBb0JGLEVBQXBCLEVBQXlCVCxJQUFJLENBQTdCO0FBQ0EsbUJBQU9BLENBQVAsRUFBV0MsQ0FBWCxFQUFlQyxFQUFmLEVBQW9CQyxLQUFLUSxDQUF6QixFQUE2QlAsQ0FBN0IsRUFBaUNDLEVBQWpDLEVBQXNDQSxLQUFLTSxDQUEzQztBQUNBLG1CQUFPWCxDQUFQLEVBQVdDLENBQVgsRUFBZUMsRUFBZixFQUFvQkEsS0FBS1MsQ0FBekIsRUFBNkJQLENBQTdCLEVBQWlDQyxFQUFqQyxFQUFzQ0EsS0FBS00sQ0FBM0M7QUFDQTs7QUFFRDs7QUFFQSxLQUFNQyxLQUFLLENBQVg7QUFDQSxLQUFNQyxLQUFLRixLQUFLLENBQWhCO0FBQ0EsS0FBTUcsSUFBSSxtQkFBUUQsRUFBUixDQUFWO0FBQ0EsaUJBQU1iLENBQU4sRUFBVU8sQ0FBVixFQUFjRSxLQUFLRSxDQUFuQixFQUF1QkYsRUFBdkIsRUFBNEJMLENBQTVCLEVBQWdDQyxLQUFLTSxDQUFyQyxFQUF5Q0wsRUFBekMsRUFBOENRLENBQTlDLEVBQWtERixFQUFsRCxFQUF1REMsRUFBdkQ7QUFDQSxpQkFBT2IsQ0FBUCxFQUFXQyxDQUFYLEVBQWVDLEVBQWYsRUFBb0JDLEVBQXBCLEVBQXlCVyxDQUF6QixFQUE2QkYsRUFBN0IsRUFBa0NDLEVBQWxDOztBQUVBOztBQUVBLEtBQUtaLEVBQUVDLEVBQUYsTUFBVSxDQUFmLEVBQW1CO0FBQ25CLGlCQUFPRixDQUFQLEVBQVdDLENBQVgsRUFBZUMsRUFBZixFQUFvQkMsRUFBcEIsRUFBeUJDLENBQXpCLEVBQTZCQyxFQUE3QixFQUFrQ0MsRUFBbEM7QUFDQSxzQkFBWU4sQ0FBWixFQUFnQk8sQ0FBaEIsRUFBb0JFLEtBQUtFLENBQXpCLEVBQTZCRixFQUE3Qjs7QUFFQTs7QUFFQSxLQUFLUixFQUFFQyxFQUFGLE1BQVUsQ0FBZixFQUFtQjtBQUNuQixpQkFBT0YsQ0FBUCxFQUFXQyxDQUFYLEVBQWVDLEVBQWYsRUFBb0JDLEVBQXBCLEVBQXlCQyxDQUF6QixFQUE2QkMsRUFBN0IsRUFBa0NDLEVBQWxDO0FBQ0Esc0JBQVlOLENBQVosRUFBZ0JPLENBQWhCLEVBQW9CRSxLQUFLRSxDQUF6QixFQUE2QkYsRUFBN0I7O0FBRUE7QUFFQSIsImZpbGUiOiJfZGNfZGl2XzMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX3plcm9zICwgX2ZpbGwgfSBmcm9tICcuLi8uLi9hcnJheScgO1xuaW1wb3J0IHsgX2RlY3JlbWVudCAsIF9pc3ViIH0gZnJvbSAnLi4vc3ViJyA7XG5pbXBvcnQgeyBfbHQgfSBmcm9tICcuLi8uLi9jb21wYXJlJyA7XG5pbXBvcnQgeyBfaWFkZCB9IGZyb20gJy4uL2FkZCcgO1xuaW1wb3J0IHsgX211bCB9IGZyb20gJy4uL211bCcgO1xuaW1wb3J0IHsgX2RjX2Rpdl8yMSB9IGZyb20gJy4nIDtcblxuLyoqXG4gKiBBbGdvcml0aG0gMy40IERpdmlkZS1hbmQtY29ucXVlciBkaXZpc2lvbiAoMyBieSAyKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBJbnB1dFxuICogLS0tLS1cbiAqICBUd28gbm9ubmVnYXRpdmUgaW50ZWdlcnMgQSBhbmQgQixcbiAqICBzdWNoIHRoYXQgQSA8IM6yXm4gQiBhbmQgzrJeezJufSAvIDIg4omkIEIgPCDOsl57Mm59LlxuICogIG4gbXVzdCBiZSBldmVuLlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLSAgICAgICAgICAgICAgICAgLS0tLS1cbiAqICAgICAgICAgICAgICAgICAgIHwgIHwgIHwgIHwgICAgICAgICAgICAgICB8ICB8ICB8XG4gKiAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0gICAgICAgICAgICAgICAgIC0tLS0tXG4gKlxuICogT3V0cHV0XG4gKiAtLS0tLS1cbiAqICBUaGUgcXVvdGllbnQgZmxvb3IoIEEvQiApIGFuZCB0aGUgcmVtYWluZGVyIEEgbW9kIEIuXG4gKlxuICogQ29tcGxleGl0eVxuICogLS0tLS0tLS0tLVxuICogIFQnKG4pIOKJpCBUKG4pICsgTShuKSArIExuXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gX2RjX2Rpdl8zMiAoIHIgLCBhICwgYWkgLCBhaiAsIGIgLCBiaSAsIGJqICwgYyAsIGNpICwgY2ogKSB7XG5cblx0Ly8gMS4gTGV0IEEgPSBBXzIgzrJeezJufSArIEFfMSDOsl5uICsgQV8wIGFuZFxuXHQvLyAgICBCID0gQl8xIM6yXntufSArIEJfMCxcblx0Ly8gICAgd2l0aCAwIOKJpCBBX2kgPCDOsl5uIGFuZCAwIOKJpCBCX2kgPCDOsl5uLlxuXG5cdGNvbnN0IGsgPSBiaiAtIGJpIDtcblx0Y29uc3QgbiA9IGsgPj4+IDEgO1xuXG5cdC8vIDIuIElmIEFfMiA8IEJfMSwgY29tcHV0ZSBRID0gZmxvb3IoICggQV8yIM6yXm4gKyBBXzEgKSAvIEJfMSApIHdpdGhcblx0Ly8gICAgcmVtYWluZGVyIFJfMSB1c2luZyBhbGdvcml0aG0gMy4zO1xuXG5cdGlmICggX2x0KCBhICwgYWkgLCBhaSArIG4gLCBiICwgYmkgLCBiaSArIG4gKSApIHtcblx0XHRfZGNfZGl2XzIxKCByICwgYSAsIGFpICwgYWogLSBuICwgYiAsIGJpICwgYmkgKyBuICwgYyAsIGNpICsgbiAsIGNqICkgO1xuXHR9XG5cblx0Ly8gICAgb3RoZXJ3aXNlIGxldCBRID0gzrJebiAtIDEsIGFuZCBSXzEgPSAoIEFfMiAtIEJfMSApIM6yXm4gKyBBXzEgKyBCXzFcblx0Ly8gICAgKG5vdGUgaW4gdGhpcyBjYXNlIHRoYXQgQV8yID0gQl8xKVxuXG5cdGVsc2Uge1xuXHRcdF9maWxsKCBjICwgY2ogLSBuICwgY2ogLCByIC0gMSApIDtcblx0XHRfaWFkZCggciAsIGEgLCBhaSAsIGFqIC0gbiAsIGIgLCBiaSAsIGJpICsgbiAgKSA7XG5cdFx0X2lzdWIoIHIgLCBhICwgYWkgLCBhaSArIG4gLCBiICwgYmkgLCBiaSArIG4gICkgO1xuXHR9XG5cblx0Ly8gMy4gUiA8LSBSXzEgzrJebiArIEFfMCAtIFEqQl8wXG5cblx0Y29uc3QgemkgPSAwIDtcblx0Y29uc3QgemogPSBuIDw8IDEgO1xuXHRjb25zdCB6ID0gX3plcm9zKCB6aiApIDtcblx0X211bCggciAsIGMgLCBjaiAtIG4gLCBjaiAsIGIgLCBiaSArIG4gLCBiaiAsIHogLCB6aSAsIHpqICkgO1xuXHRfaXN1YiggciAsIGEgLCBhaSAsIGFqICwgeiAsIHppICwgemogKSA7XG5cblx0Ly8gNC4gaWYgUiA8IDAgLCBSIDwtIFIgKyBCIGFuZCBRIDwtIFEgLSAxXG5cblx0aWYgKCBhW2FpXSA9PT0gMCApIHJldHVybiA7XG5cdF9pYWRkKCByICwgYSAsIGFpICwgYWogLCBiICwgYmkgLCBiaiApIDtcblx0X2RlY3JlbWVudCggciAsIGMgLCBjaiAtIG4gLCBjaiApIDtcblxuXHQvLyA1LiBpZiBSIDwgMCAsIFIgPC0gUiArIEIgYW5kIFEgPC0gUSAtIDFcblxuXHRpZiAoIGFbYWldID09PSAwICkgcmV0dXJuIDtcblx0X2lhZGQoIHIgLCBhICwgYWkgLCBhaiAsIGIgLCBiaSAsIGJqICkgO1xuXHRfZGVjcmVtZW50KCByICwgYyAsIGNqIC0gbiAsIGNqICkgO1xuXG5cdC8vIDYuIFJldHVybiBRIGFuZCBSXG5cbn1cbiJdfQ==