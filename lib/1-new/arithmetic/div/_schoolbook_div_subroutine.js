"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._schoolbook_div_subroutine = _schoolbook_div_subroutine;
/**
 *
 * Input
 * -----
 *
 *  Two integers A and B such that 0 <= A < r^n+1 and (r^n)/2 <= B < r^(n).
 *
 * Output
 * -----
 *
 *  The quotient floor( A/B ) and the remainder A mod B.
 *
 * @param {Number} r radix
 * @param {Array} a dividend
 * @param {Number} ai
 * @param {Number} aj
 * @param {Array} b divisor (aj - ai = bj - bi + 1)
 * @param {Number} bi
 * @param {Number} bj
 * @param {Array} q quotient (length is at least qi + aj - ai)
 * @param {Number} qi
 *
 */

function _schoolbook_div_subroutine(r, a, ai, aj, b, bi, bj, q, qi) {

	var m = aj - ai;

	// If A ≥ B*β, compute the quotient q and remainder r of ( A − B*β ) / B
	// recursively, and return β + q and r.
	if (_ge(a, ai, aj - 1, b, bi, bj)) {
		_isub(r, a, ai, aj - 1, b, bi, bj);
		_schoolbook_div_subroutine(r, a, ai, aj, b, bi, bj, q, qi);
		_increment(r, q, qi, qi + m - 1);
		return;
	}

	// If A < B*β, then A/B < β
	// q <- min [ ( β a_0 + a_1 ) / b_0 , β - 1 ]
	var _q = Math.min(r - 1, Math.floor((a[ai] * r + a[ai + 1]) / b[bi]));

	// fix _q
	var T = _zeros(m);
	_mul_limb(r, _q, b, bi, bj, T, 0, m);

	if (_gt(T, 0, m, a, ai, aj)) {
		--_q;
		_isub(r, T, 0, m, b, bi, bj);

		if (_gt(T, 0, m, a, ai, aj)) {
			--_q;
			_isub(r, T, 0, m, b, bi, bj);
		}
	}

	q[qi + m - 1] += _q;

	_isub(r, a, ai, aj, T, 0, m);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy8xLW5ldy9hcml0aG1ldGljL2Rpdi9fc2Nob29sYm9va19kaXZfc3Vicm91dGluZS5qcyJdLCJuYW1lcyI6WyJfc2Nob29sYm9va19kaXZfc3Vicm91dGluZSIsInIiLCJhIiwiYWkiLCJhaiIsImIiLCJiaSIsImJqIiwicSIsInFpIiwibSIsIl9nZSIsIl9pc3ViIiwiX2luY3JlbWVudCIsIl9xIiwiTWF0aCIsIm1pbiIsImZsb29yIiwiVCIsIl96ZXJvcyIsIl9tdWxfbGltYiIsIl9ndCJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUF3QmdCQSwwQixHQUFBQSwwQjtBQXhCaEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCTyxTQUFTQSwwQkFBVCxDQUFzQ0MsQ0FBdEMsRUFBMENDLENBQTFDLEVBQThDQyxFQUE5QyxFQUFtREMsRUFBbkQsRUFBd0RDLENBQXhELEVBQTREQyxFQUE1RCxFQUFpRUMsRUFBakUsRUFBc0VDLENBQXRFLEVBQTBFQyxFQUExRSxFQUErRTs7QUFFckYsS0FBTUMsSUFBSU4sS0FBS0QsRUFBZjs7QUFFQTtBQUNBO0FBQ0EsS0FBS1EsSUFBS1QsQ0FBTCxFQUFTQyxFQUFULEVBQWNDLEtBQUssQ0FBbkIsRUFBdUJDLENBQXZCLEVBQTJCQyxFQUEzQixFQUFnQ0MsRUFBaEMsQ0FBTCxFQUE0QztBQUMzQ0ssUUFBT1gsQ0FBUCxFQUFXQyxDQUFYLEVBQWVDLEVBQWYsRUFBb0JDLEtBQUssQ0FBekIsRUFBNkJDLENBQTdCLEVBQWlDQyxFQUFqQyxFQUFzQ0MsRUFBdEM7QUFDQVAsNkJBQTRCQyxDQUE1QixFQUFnQ0MsQ0FBaEMsRUFBb0NDLEVBQXBDLEVBQXlDQyxFQUF6QyxFQUE4Q0MsQ0FBOUMsRUFBa0RDLEVBQWxELEVBQXVEQyxFQUF2RCxFQUE0REMsQ0FBNUQsRUFBZ0VDLEVBQWhFO0FBQ0FJLGFBQVlaLENBQVosRUFBZ0JPLENBQWhCLEVBQW9CQyxFQUFwQixFQUF5QkEsS0FBS0MsQ0FBTCxHQUFTLENBQWxDO0FBQ0E7QUFDQTs7QUFFRDtBQUNBO0FBQ0EsS0FBSUksS0FBS0MsS0FBS0MsR0FBTCxDQUFVZixJQUFJLENBQWQsRUFBa0JjLEtBQUtFLEtBQUwsQ0FBWSxDQUFFZixFQUFFQyxFQUFGLElBQVFGLENBQVIsR0FBWUMsRUFBRUMsS0FBRyxDQUFMLENBQWQsSUFBMEJFLEVBQUVDLEVBQUYsQ0FBdEMsQ0FBbEIsQ0FBVDs7QUFFQTtBQUNBLEtBQU1ZLElBQUlDLE9BQVFULENBQVIsQ0FBVjtBQUNBVSxXQUFXbkIsQ0FBWCxFQUFlYSxFQUFmLEVBQW9CVCxDQUFwQixFQUF3QkMsRUFBeEIsRUFBNkJDLEVBQTdCLEVBQWtDVyxDQUFsQyxFQUFzQyxDQUF0QyxFQUEwQ1IsQ0FBMUM7O0FBRUEsS0FBS1csSUFBS0gsQ0FBTCxFQUFTLENBQVQsRUFBYVIsQ0FBYixFQUFpQlIsQ0FBakIsRUFBcUJDLEVBQXJCLEVBQTBCQyxFQUExQixDQUFMLEVBQXNDO0FBQ3JDLElBQUVVLEVBQUY7QUFDQUYsUUFBT1gsQ0FBUCxFQUFXaUIsQ0FBWCxFQUFlLENBQWYsRUFBbUJSLENBQW5CLEVBQXVCTCxDQUF2QixFQUEyQkMsRUFBM0IsRUFBZ0NDLEVBQWhDOztBQUVBLE1BQUtjLElBQUtILENBQUwsRUFBUyxDQUFULEVBQWFSLENBQWIsRUFBaUJSLENBQWpCLEVBQXFCQyxFQUFyQixFQUEwQkMsRUFBMUIsQ0FBTCxFQUFzQztBQUNyQyxLQUFFVSxFQUFGO0FBQ0FGLFNBQU9YLENBQVAsRUFBV2lCLENBQVgsRUFBZSxDQUFmLEVBQW1CUixDQUFuQixFQUF1QkwsQ0FBdkIsRUFBMkJDLEVBQTNCLEVBQWdDQyxFQUFoQztBQUNBO0FBRUQ7O0FBRURDLEdBQUVDLEtBQUtDLENBQUwsR0FBUyxDQUFYLEtBQWlCSSxFQUFqQjs7QUFFQUYsT0FBT1gsQ0FBUCxFQUFXQyxDQUFYLEVBQWVDLEVBQWYsRUFBb0JDLEVBQXBCLEVBQXlCYyxDQUF6QixFQUE2QixDQUE3QixFQUFpQ1IsQ0FBakM7QUFFQSIsImZpbGUiOiJfc2Nob29sYm9va19kaXZfc3Vicm91dGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIElucHV0XG4gKiAtLS0tLVxuICpcbiAqICBUd28gaW50ZWdlcnMgQSBhbmQgQiBzdWNoIHRoYXQgMCA8PSBBIDwgcl5uKzEgYW5kIChyXm4pLzIgPD0gQiA8IHJeKG4pLlxuICpcbiAqIE91dHB1dFxuICogLS0tLS1cbiAqXG4gKiAgVGhlIHF1b3RpZW50IGZsb29yKCBBL0IgKSBhbmQgdGhlIHJlbWFpbmRlciBBIG1vZCBCLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSByIHJhZGl4XG4gKiBAcGFyYW0ge0FycmF5fSBhIGRpdmlkZW5kXG4gKiBAcGFyYW0ge051bWJlcn0gYWlcbiAqIEBwYXJhbSB7TnVtYmVyfSBhalxuICogQHBhcmFtIHtBcnJheX0gYiBkaXZpc29yIChhaiAtIGFpID0gYmogLSBiaSArIDEpXG4gKiBAcGFyYW0ge051bWJlcn0gYmlcbiAqIEBwYXJhbSB7TnVtYmVyfSBialxuICogQHBhcmFtIHtBcnJheX0gcSBxdW90aWVudCAobGVuZ3RoIGlzIGF0IGxlYXN0IHFpICsgYWogLSBhaSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBxaVxuICpcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gX3NjaG9vbGJvb2tfZGl2X3N1YnJvdXRpbmUgKCByICwgYSAsIGFpICwgYWogLCBiICwgYmkgLCBiaiAsIHEgLCBxaSApIHtcblxuXHRjb25zdCBtID0gYWogLSBhaSA7XG5cblx0Ly8gSWYgQSDiiaUgQirOsiwgY29tcHV0ZSB0aGUgcXVvdGllbnQgcSBhbmQgcmVtYWluZGVyIHIgb2YgKCBBIOKIkiBCKs6yICkgLyBCXG5cdC8vIHJlY3Vyc2l2ZWx5LCBhbmQgcmV0dXJuIM6yICsgcSBhbmQgci5cblx0aWYgKCBfZ2UoIGEgLCBhaSAsIGFqIC0gMSAsIGIgLCBiaSAsIGJqICkgKSB7XG5cdFx0X2lzdWIoIHIgLCBhICwgYWkgLCBhaiAtIDEgLCBiICwgYmkgLCBiaiApIDtcblx0XHRfc2Nob29sYm9va19kaXZfc3Vicm91dGluZSggciAsIGEgLCBhaSAsIGFqICwgYiAsIGJpICwgYmogLCBxICwgcWkgKSA7XG5cdFx0X2luY3JlbWVudCggciAsIHEgLCBxaSAsIHFpICsgbSAtIDEgKSA7XG5cdFx0cmV0dXJuIDtcblx0fVxuXG5cdC8vIElmIEEgPCBCKs6yLCB0aGVuIEEvQiA8IM6yXG5cdC8vIHEgPC0gbWluIFsgKCDOsiBhXzAgKyBhXzEgKSAvIGJfMCAsIM6yIC0gMSBdXG5cdGxldCBfcSA9IE1hdGgubWluKCByIC0gMSAsIE1hdGguZmxvb3IoICggYVthaV0gKiByICsgYVthaSsxXSApIC8gYltiaV0gKSApIDtcblxuXHQvLyBmaXggX3Fcblx0Y29uc3QgVCA9IF96ZXJvcyggbSApIDtcblx0X211bF9saW1iKCByICwgX3EgLCBiICwgYmkgLCBiaiAsIFQgLCAwICwgbSApIDtcblxuXHRpZiAoIF9ndCggVCAsIDAgLCBtICwgYSAsIGFpICwgYWogKSApIHtcblx0XHQtLV9xIDtcblx0XHRfaXN1YiggciAsIFQgLCAwICwgbSAsIGIgLCBiaSAsIGJqICkgO1xuXG5cdFx0aWYgKCBfZ3QoIFQgLCAwICwgbSAsIGEgLCBhaSAsIGFqICkgKSB7XG5cdFx0XHQtLV9xIDtcblx0XHRcdF9pc3ViKCByICwgVCAsIDAgLCBtICwgYiAsIGJpICwgYmogKSA7XG5cdFx0fVxuXG5cdH1cblxuXHRxW3FpICsgbSAtIDFdICs9IF9xIDtcblxuXHRfaXN1YiggciAsIGEgLCBhaSAsIGFqICwgVCAsIDAgLCBtICkgO1xuXG59XG4iXX0=