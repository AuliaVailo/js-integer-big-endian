'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._schoolbook_div_subroutine = _schoolbook_div_subroutine;

var _array = require('../../array');

var _compare = require('../../compare');

var _ = require('..');

/**
 *
 * Input
 * -----
 *
 *  Two integers A and B such that 0 <= A < r^n+1 and (r^n)/2 <= B < r^(n).
 *
 * Output
 * -----
 *
 *  The quotient floor( A/B ) and the remainder A mod B.
 *
 * @param {Number} r radix
 * @param {Array} a dividend
 * @param {Number} ai
 * @param {Number} aj
 * @param {Array} b divisor (aj - ai = bj - bi + 1)
 * @param {Number} bi
 * @param {Number} bj
 * @param {Array} q quotient (length is at least qi + aj - ai)
 * @param {Number} qi
 *
 */

function _schoolbook_div_subroutine(r, a, ai, aj, b, bi, bj, q, qi) {

	var m = aj - ai;

	// If A ≥ B*β, compute the quotient q and remainder r of ( A − B*β ) / B
	// recursively, and return β + q and r.
	if ((0, _compare._ge)(a, ai, aj - 1, b, bi, bj)) {
		(0, _._isub)(r, a, ai, aj - 1, b, bi, bj);
		_schoolbook_div_subroutine(r, a, ai, aj, b, bi, bj, q, qi);
		(0, _._increment)(r, q, qi, qi + m - 1);
		return;
	}

	// If A < B*β, then A/B < β
	// q <- min [ ( β a_0 + a_1 ) / b_0 , β - 1 ]
	var _q = Math.min(r - 1, Math.floor((a[ai] * r + a[ai + 1]) / b[bi]));

	// fix _q
	var T = (0, _array._zeros)(m);
	(0, _._mul_limb)(r, _q, b, bi, bj, T, 0, m);

	if ((0, _compare._gt)(T, 0, m, a, ai, aj)) {
		--_q;
		(0, _._isub)(r, T, 0, m, b, bi, bj);

		if ((0, _compare._gt)(T, 0, m, a, ai, aj)) {
			--_q;
			(0, _._isub)(r, T, 0, m, b, bi, bj);
		}
	}

	q[qi + m - 1] += _q;

	(0, _._isub)(r, a, ai, aj, T, 0, m);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy8xLW5ldy9hcml0aG1ldGljL2Rpdi9fc2Nob29sYm9va19kaXZfc3Vicm91dGluZS5qcyJdLCJuYW1lcyI6WyJfc2Nob29sYm9va19kaXZfc3Vicm91dGluZSIsInIiLCJhIiwiYWkiLCJhaiIsImIiLCJiaSIsImJqIiwicSIsInFpIiwibSIsIl9xIiwiTWF0aCIsIm1pbiIsImZsb29yIiwiVCJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUE4QmdCQSwwQixHQUFBQSwwQjs7QUE5QmhCOztBQUNBOztBQUNBOztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3Qk8sU0FBU0EsMEJBQVQsQ0FBc0NDLENBQXRDLEVBQTBDQyxDQUExQyxFQUE4Q0MsRUFBOUMsRUFBbURDLEVBQW5ELEVBQXdEQyxDQUF4RCxFQUE0REMsRUFBNUQsRUFBaUVDLEVBQWpFLEVBQXNFQyxDQUF0RSxFQUEwRUMsRUFBMUUsRUFBK0U7O0FBRXJGLEtBQU1DLElBQUlOLEtBQUtELEVBQWY7O0FBRUE7QUFDQTtBQUNBLEtBQUssa0JBQUtELENBQUwsRUFBU0MsRUFBVCxFQUFjQyxLQUFLLENBQW5CLEVBQXVCQyxDQUF2QixFQUEyQkMsRUFBM0IsRUFBZ0NDLEVBQWhDLENBQUwsRUFBNEM7QUFDM0MsZUFBT04sQ0FBUCxFQUFXQyxDQUFYLEVBQWVDLEVBQWYsRUFBb0JDLEtBQUssQ0FBekIsRUFBNkJDLENBQTdCLEVBQWlDQyxFQUFqQyxFQUFzQ0MsRUFBdEM7QUFDQVAsNkJBQTRCQyxDQUE1QixFQUFnQ0MsQ0FBaEMsRUFBb0NDLEVBQXBDLEVBQXlDQyxFQUF6QyxFQUE4Q0MsQ0FBOUMsRUFBa0RDLEVBQWxELEVBQXVEQyxFQUF2RCxFQUE0REMsQ0FBNUQsRUFBZ0VDLEVBQWhFO0FBQ0Esb0JBQVlSLENBQVosRUFBZ0JPLENBQWhCLEVBQW9CQyxFQUFwQixFQUF5QkEsS0FBS0MsQ0FBTCxHQUFTLENBQWxDO0FBQ0E7QUFDQTs7QUFFRDtBQUNBO0FBQ0EsS0FBSUMsS0FBS0MsS0FBS0MsR0FBTCxDQUFVWixJQUFJLENBQWQsRUFBa0JXLEtBQUtFLEtBQUwsQ0FBWSxDQUFFWixFQUFFQyxFQUFGLElBQVFGLENBQVIsR0FBWUMsRUFBRUMsS0FBRyxDQUFMLENBQWQsSUFBMEJFLEVBQUVDLEVBQUYsQ0FBdEMsQ0FBbEIsQ0FBVDs7QUFFQTtBQUNBLEtBQU1TLElBQUksbUJBQVFMLENBQVIsQ0FBVjtBQUNBLGtCQUFXVCxDQUFYLEVBQWVVLEVBQWYsRUFBb0JOLENBQXBCLEVBQXdCQyxFQUF4QixFQUE2QkMsRUFBN0IsRUFBa0NRLENBQWxDLEVBQXNDLENBQXRDLEVBQTBDTCxDQUExQzs7QUFFQSxLQUFLLGtCQUFLSyxDQUFMLEVBQVMsQ0FBVCxFQUFhTCxDQUFiLEVBQWlCUixDQUFqQixFQUFxQkMsRUFBckIsRUFBMEJDLEVBQTFCLENBQUwsRUFBc0M7QUFDckMsSUFBRU8sRUFBRjtBQUNBLGVBQU9WLENBQVAsRUFBV2MsQ0FBWCxFQUFlLENBQWYsRUFBbUJMLENBQW5CLEVBQXVCTCxDQUF2QixFQUEyQkMsRUFBM0IsRUFBZ0NDLEVBQWhDOztBQUVBLE1BQUssa0JBQUtRLENBQUwsRUFBUyxDQUFULEVBQWFMLENBQWIsRUFBaUJSLENBQWpCLEVBQXFCQyxFQUFyQixFQUEwQkMsRUFBMUIsQ0FBTCxFQUFzQztBQUNyQyxLQUFFTyxFQUFGO0FBQ0EsZ0JBQU9WLENBQVAsRUFBV2MsQ0FBWCxFQUFlLENBQWYsRUFBbUJMLENBQW5CLEVBQXVCTCxDQUF2QixFQUEyQkMsRUFBM0IsRUFBZ0NDLEVBQWhDO0FBQ0E7QUFFRDs7QUFFREMsR0FBRUMsS0FBS0MsQ0FBTCxHQUFTLENBQVgsS0FBaUJDLEVBQWpCOztBQUVBLGNBQU9WLENBQVAsRUFBV0MsQ0FBWCxFQUFlQyxFQUFmLEVBQW9CQyxFQUFwQixFQUF5QlcsQ0FBekIsRUFBNkIsQ0FBN0IsRUFBaUNMLENBQWpDO0FBRUEiLCJmaWxlIjoiX3NjaG9vbGJvb2tfZGl2X3N1YnJvdXRpbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfemVyb3MgfSBmcm9tICcuLi8uLi9hcnJheScgO1xuaW1wb3J0IHsgX2dlICwgX2d0IH0gZnJvbSAnLi4vLi4vY29tcGFyZScgO1xuaW1wb3J0IHsgX2luY3JlbWVudCB9IGZyb20gJy4uJyA7XG5pbXBvcnQgeyBfaXN1YiB9IGZyb20gJy4uJyA7XG5pbXBvcnQgeyBfbXVsX2xpbWIgfSBmcm9tICcuLicgO1xuXG4vKipcbiAqXG4gKiBJbnB1dFxuICogLS0tLS1cbiAqXG4gKiAgVHdvIGludGVnZXJzIEEgYW5kIEIgc3VjaCB0aGF0IDAgPD0gQSA8IHJebisxIGFuZCAocl5uKS8yIDw9IEIgPCByXihuKS5cbiAqXG4gKiBPdXRwdXRcbiAqIC0tLS0tXG4gKlxuICogIFRoZSBxdW90aWVudCBmbG9vciggQS9CICkgYW5kIHRoZSByZW1haW5kZXIgQSBtb2QgQi5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gciByYWRpeFxuICogQHBhcmFtIHtBcnJheX0gYSBkaXZpZGVuZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFpXG4gKiBAcGFyYW0ge051bWJlcn0gYWpcbiAqIEBwYXJhbSB7QXJyYXl9IGIgZGl2aXNvciAoYWogLSBhaSA9IGJqIC0gYmkgKyAxKVxuICogQHBhcmFtIHtOdW1iZXJ9IGJpXG4gKiBAcGFyYW0ge051bWJlcn0gYmpcbiAqIEBwYXJhbSB7QXJyYXl9IHEgcXVvdGllbnQgKGxlbmd0aCBpcyBhdCBsZWFzdCBxaSArIGFqIC0gYWkpXG4gKiBAcGFyYW0ge051bWJlcn0gcWlcbiAqXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIF9zY2hvb2xib29rX2Rpdl9zdWJyb3V0aW5lICggciAsIGEgLCBhaSAsIGFqICwgYiAsIGJpICwgYmogLCBxICwgcWkgKSB7XG5cblx0Y29uc3QgbSA9IGFqIC0gYWkgO1xuXG5cdC8vIElmIEEg4omlIEIqzrIsIGNvbXB1dGUgdGhlIHF1b3RpZW50IHEgYW5kIHJlbWFpbmRlciByIG9mICggQSDiiJIgQirOsiApIC8gQlxuXHQvLyByZWN1cnNpdmVseSwgYW5kIHJldHVybiDOsiArIHEgYW5kIHIuXG5cdGlmICggX2dlKCBhICwgYWkgLCBhaiAtIDEgLCBiICwgYmkgLCBiaiApICkge1xuXHRcdF9pc3ViKCByICwgYSAsIGFpICwgYWogLSAxICwgYiAsIGJpICwgYmogKSA7XG5cdFx0X3NjaG9vbGJvb2tfZGl2X3N1YnJvdXRpbmUoIHIgLCBhICwgYWkgLCBhaiAsIGIgLCBiaSAsIGJqICwgcSAsIHFpICkgO1xuXHRcdF9pbmNyZW1lbnQoIHIgLCBxICwgcWkgLCBxaSArIG0gLSAxICkgO1xuXHRcdHJldHVybiA7XG5cdH1cblxuXHQvLyBJZiBBIDwgQirOsiwgdGhlbiBBL0IgPCDOslxuXHQvLyBxIDwtIG1pbiBbICggzrIgYV8wICsgYV8xICkgLyBiXzAgLCDOsiAtIDEgXVxuXHRsZXQgX3EgPSBNYXRoLm1pbiggciAtIDEgLCBNYXRoLmZsb29yKCAoIGFbYWldICogciArIGFbYWkrMV0gKSAvIGJbYmldICkgKSA7XG5cblx0Ly8gZml4IF9xXG5cdGNvbnN0IFQgPSBfemVyb3MoIG0gKSA7XG5cdF9tdWxfbGltYiggciAsIF9xICwgYiAsIGJpICwgYmogLCBUICwgMCAsIG0gKSA7XG5cblx0aWYgKCBfZ3QoIFQgLCAwICwgbSAsIGEgLCBhaSAsIGFqICkgKSB7XG5cdFx0LS1fcSA7XG5cdFx0X2lzdWIoIHIgLCBUICwgMCAsIG0gLCBiICwgYmkgLCBiaiApIDtcblxuXHRcdGlmICggX2d0KCBUICwgMCAsIG0gLCBhICwgYWkgLCBhaiApICkge1xuXHRcdFx0LS1fcSA7XG5cdFx0XHRfaXN1YiggciAsIFQgLCAwICwgbSAsIGIgLCBiaSAsIGJqICkgO1xuXHRcdH1cblxuXHR9XG5cblx0cVtxaSArIG0gLSAxXSArPSBfcSA7XG5cblx0X2lzdWIoIHIgLCBhICwgYWkgLCBhaiAsIFQgLCAwICwgbSApIDtcblxufVxuIl19