'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._dc_div = _dc_div;

var _array = require('../../array');

var _mul = require('../mul');

var _ = require('.');

var _compare = require('../../compare');

/**
 * Input
 * -----
 *  - No leading zeros
 *  - |A| = |C|
 *
 * References
 * ----------
 *   - https://gmplib.org/manual/Divide-and-Conquer-Division.html
 *
 */
function _dc_div(X, a, ai, aj, b, bi, bj, c, ci, cj) {

	// [BZ98] Fast Recursive Division

	var r = aj - ai;
	var s = bj - bi;

	if (r < s || r === s && (0, _compare._CMP_n)(a, ai, aj, b, bi) < 0) return;

	// shift to get n = 2^k for some k
	var _n = 1;

	while (_n < s) {
		_n <<= 1;
	}var n = _n;

	var shift = n - s;

	var x = b[bi];
	var _X = X / 2;
	var _normalize = x < _X;
	var z = Math.ceil(_X / x);

	var w = r + shift + (_normalize || a[ai] >= _X);
	var t = Math.ceil(w / n);
	var _ai = 0;
	var _aj = t * n; // + 1 if
	var _a = (0, _array._zeros)(_aj); // potential normalization overflow
	var _ak = _aj - shift - r; // or if A potentially bigger than B
	(0, _array._copy)(a, ai, aj, _a, _ak);

	var _bi = 0;
	var _bj = n;
	var _b = (0, _array._zeros)(n);
	(0, _array._copy)(b, bi, bj, _b, 0);

	if (_normalize) {

		_imul_limb(X, z, _a, _ai, _aj);
		_imul_limb(X, z, _b, _bi, _bj);
	}

	var _cj = _aj;
	var _c = (0, _array._zeros)(_cj);

	for (var i = 0; i < _aj - n; i += n) {

		(0, _._dc_div_21)(X, _a, i, i + (n << 1), _b, _bi, _bj, _c, i, i + (n << 1));
	}

	if (_normalize) {
		var p = (0, _._mod_limb)(X, z, _a, _ai, _ak);
		(0, _._div_limb_partial_fast)(X, p, z, _a, _ak, _aj - shift, a, ai, aj);
	} else {
		(0, _array._copy)(_a, _ak, _aj - shift, a, ai, aj);
	}

	(0, _array._copy)(_c, _cj - r, _cj, c, ci);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2FyaXRobWV0aWMvZGl2L19kY19kaXYuanMiXSwibmFtZXMiOlsiX2RjX2RpdiIsIlgiLCJhIiwiYWkiLCJhaiIsImIiLCJiaSIsImJqIiwiYyIsImNpIiwiY2oiLCJyIiwicyIsIl9uIiwibiIsInNoaWZ0IiwieCIsIl9YIiwiX25vcm1hbGl6ZSIsInoiLCJNYXRoIiwiY2VpbCIsInciLCJ0IiwiX2FpIiwiX2FqIiwiX2EiLCJfYWsiLCJfYmkiLCJfYmoiLCJfYiIsIl9pbXVsX2xpbWIiLCJfY2oiLCJfYyIsImkiLCJwIl0sIm1hcHBpbmdzIjoiOzs7OztRQWlCZ0JBLE8sR0FBQUEsTzs7QUFqQmhCOztBQUNBOztBQUNBOztBQUNBOztBQUdBOzs7Ozs7Ozs7OztBQVdPLFNBQVNBLE9BQVQsQ0FBbUJDLENBQW5CLEVBQXVCQyxDQUF2QixFQUEyQkMsRUFBM0IsRUFBZ0NDLEVBQWhDLEVBQXFDQyxDQUFyQyxFQUF5Q0MsRUFBekMsRUFBOENDLEVBQTlDLEVBQW1EQyxDQUFuRCxFQUF1REMsRUFBdkQsRUFBNERDLEVBQTVELEVBQWlFOztBQUV2RTs7QUFFQSxLQUFNQyxJQUFJUCxLQUFLRCxFQUFmO0FBQ0EsS0FBTVMsSUFBSUwsS0FBS0QsRUFBZjs7QUFFQSxLQUFLSyxJQUFJQyxDQUFKLElBQVNELE1BQU1DLENBQU4sSUFBVyxxQkFBUVYsQ0FBUixFQUFZQyxFQUFaLEVBQWlCQyxFQUFqQixFQUFzQkMsQ0FBdEIsRUFBMEJDLEVBQTFCLElBQWlDLENBQTFELEVBQThEOztBQUU5RDtBQUNBLEtBQUlPLEtBQUssQ0FBVDs7QUFFQSxRQUFRQSxLQUFNRCxDQUFkO0FBQWtCQyxTQUFPLENBQVA7QUFBbEIsRUFFQSxJQUFNQyxJQUFJRCxFQUFWOztBQUVBLEtBQU1FLFFBQVFELElBQUlGLENBQWxCOztBQUVBLEtBQU1JLElBQUlYLEVBQUVDLEVBQUYsQ0FBVjtBQUNBLEtBQU1XLEtBQUtoQixJQUFJLENBQWY7QUFDQSxLQUFNaUIsYUFBYUYsSUFBSUMsRUFBdkI7QUFDQSxLQUFNRSxJQUFJQyxLQUFLQyxJQUFMLENBQVdKLEtBQUtELENBQWhCLENBQVY7O0FBRUEsS0FBTU0sSUFBSVgsSUFBSUksS0FBSixJQUFjRyxjQUFjaEIsRUFBRUMsRUFBRixLQUFTYyxFQUFyQyxDQUFWO0FBQ0EsS0FBTU0sSUFBSUgsS0FBS0MsSUFBTCxDQUFXQyxJQUFJUixDQUFmLENBQVY7QUFDQSxLQUFNVSxNQUFNLENBQVo7QUFDQSxLQUFNQyxNQUFNRixJQUFJVCxDQUFoQixDQTFCdUUsQ0EwQnhDO0FBQy9CLEtBQU1ZLEtBQUssbUJBQVFELEdBQVIsQ0FBWCxDQTNCdUUsQ0EyQnhDO0FBQy9CLEtBQU1FLE1BQU1GLE1BQU1WLEtBQU4sR0FBY0osQ0FBMUIsQ0E1QnVFLENBNEJ4QztBQUMvQixtQkFBT1QsQ0FBUCxFQUFXQyxFQUFYLEVBQWdCQyxFQUFoQixFQUFxQnNCLEVBQXJCLEVBQTBCQyxHQUExQjs7QUFFQSxLQUFNQyxNQUFNLENBQVo7QUFDQSxLQUFNQyxNQUFNZixDQUFaO0FBQ0EsS0FBTWdCLEtBQUssbUJBQVFoQixDQUFSLENBQVg7QUFDQSxtQkFBT1QsQ0FBUCxFQUFXQyxFQUFYLEVBQWdCQyxFQUFoQixFQUFxQnVCLEVBQXJCLEVBQTBCLENBQTFCOztBQUVBLEtBQUtaLFVBQUwsRUFBa0I7O0FBRWpCYSxhQUFZOUIsQ0FBWixFQUFnQmtCLENBQWhCLEVBQW9CTyxFQUFwQixFQUF5QkYsR0FBekIsRUFBK0JDLEdBQS9CO0FBQ0FNLGFBQVk5QixDQUFaLEVBQWdCa0IsQ0FBaEIsRUFBb0JXLEVBQXBCLEVBQXlCRixHQUF6QixFQUErQkMsR0FBL0I7QUFFQTs7QUFFRCxLQUFNRyxNQUFNUCxHQUFaO0FBQ0EsS0FBTVEsS0FBSyxtQkFBUUQsR0FBUixDQUFYOztBQUVBLE1BQU0sSUFBSUUsSUFBSSxDQUFkLEVBQWtCQSxJQUFJVCxNQUFNWCxDQUE1QixFQUFnQ29CLEtBQUtwQixDQUFyQyxFQUF5Qzs7QUFFeEMsb0JBQVliLENBQVosRUFBZ0J5QixFQUFoQixFQUFxQlEsQ0FBckIsRUFBeUJBLEtBQU1wQixLQUFLLENBQVgsQ0FBekIsRUFBMENnQixFQUExQyxFQUErQ0YsR0FBL0MsRUFBcURDLEdBQXJELEVBQTJESSxFQUEzRCxFQUFnRUMsQ0FBaEUsRUFBb0VBLEtBQU1wQixLQUFLLENBQVgsQ0FBcEU7QUFFQTs7QUFFRCxLQUFLSSxVQUFMLEVBQWtCO0FBQ2pCLE1BQU1pQixJQUFJLGlCQUFXbEMsQ0FBWCxFQUFla0IsQ0FBZixFQUFtQk8sRUFBbkIsRUFBd0JGLEdBQXhCLEVBQThCRyxHQUE5QixDQUFWO0FBQ0EsZ0NBQXdCMUIsQ0FBeEIsRUFBNEJrQyxDQUE1QixFQUFnQ2hCLENBQWhDLEVBQW9DTyxFQUFwQyxFQUF5Q0MsR0FBekMsRUFBK0NGLE1BQU1WLEtBQXJELEVBQTZEYixDQUE3RCxFQUFpRUMsRUFBakUsRUFBc0VDLEVBQXRFO0FBQ0EsRUFIRCxNQUlLO0FBQ0osb0JBQU9zQixFQUFQLEVBQVlDLEdBQVosRUFBa0JGLE1BQU1WLEtBQXhCLEVBQWdDYixDQUFoQyxFQUFvQ0MsRUFBcEMsRUFBeUNDLEVBQXpDO0FBQ0E7O0FBRUQsbUJBQU82QixFQUFQLEVBQVlELE1BQU1yQixDQUFsQixFQUFzQnFCLEdBQXRCLEVBQTRCeEIsQ0FBNUIsRUFBZ0NDLEVBQWhDO0FBRUEiLCJmaWxlIjoiX2RjX2Rpdi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF96ZXJvcyAsIF9jb3B5IH0gZnJvbSAnLi4vLi4vYXJyYXknIDtcbmltcG9ydCB7IF9tdWxfbGltYiB9IGZyb20gJy4uL211bCcgO1xuaW1wb3J0IHsgX2RjX2Rpdl8yMSAsIF9kaXZfbGltYl9wYXJ0aWFsX2Zhc3QgLCBfbW9kX2xpbWIgfSBmcm9tICcuJyA7XG5pbXBvcnQgeyBfQ01QX24gfSBmcm9tICcuLi8uLi9jb21wYXJlJyA7XG5cblxuLyoqXG4gKiBJbnB1dFxuICogLS0tLS1cbiAqICAtIE5vIGxlYWRpbmcgemVyb3NcbiAqICAtIHxBfCA9IHxDfFxuICpcbiAqIFJlZmVyZW5jZXNcbiAqIC0tLS0tLS0tLS1cbiAqICAgLSBodHRwczovL2dtcGxpYi5vcmcvbWFudWFsL0RpdmlkZS1hbmQtQ29ucXVlci1EaXZpc2lvbi5odG1sXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gX2RjX2RpdiAoIFggLCBhICwgYWkgLCBhaiAsIGIgLCBiaSAsIGJqICwgYyAsIGNpICwgY2ogKSB7XG5cblx0Ly8gW0JaOThdIEZhc3QgUmVjdXJzaXZlIERpdmlzaW9uXG5cblx0Y29uc3QgciA9IGFqIC0gYWkgO1xuXHRjb25zdCBzID0gYmogLSBiaSA7XG5cblx0aWYgKCByIDwgcyB8fCByID09PSBzICYmIF9DTVBfbiggYSAsIGFpICwgYWogLCBiICwgYmkgKSA8IDAgKSByZXR1cm4gO1xuXG5cdC8vIHNoaWZ0IHRvIGdldCBuID0gMl5rIGZvciBzb21lIGtcblx0bGV0IF9uID0gMSA7XG5cblx0d2hpbGUgKCBfbiAgPCBzICkgX24gPDw9IDEgO1xuXG5cdGNvbnN0IG4gPSBfbiA7XG5cblx0Y29uc3Qgc2hpZnQgPSBuIC0gcyA7XG5cblx0Y29uc3QgeCA9IGJbYmldIDtcblx0Y29uc3QgX1ggPSBYIC8gMiA7XG5cdGNvbnN0IF9ub3JtYWxpemUgPSB4IDwgX1ggO1xuXHRjb25zdCB6ID0gTWF0aC5jZWlsKCBfWCAvIHggKSA7XG5cblx0Y29uc3QgdyA9IHIgKyBzaGlmdCArICggX25vcm1hbGl6ZSB8fCBhW2FpXSA+PSBfWCApIDtcblx0Y29uc3QgdCA9IE1hdGguY2VpbCggdyAvIG4gKSA7XG5cdGNvbnN0IF9haSA9IDAgO1xuXHRjb25zdCBfYWogPSB0ICogbiA7ICAgICAgICAgICAgLy8gKyAxIGlmXG5cdGNvbnN0IF9hID0gX3plcm9zKCBfYWogKSA7ICAgICAvLyBwb3RlbnRpYWwgbm9ybWFsaXphdGlvbiBvdmVyZmxvd1xuXHRjb25zdCBfYWsgPSBfYWogLSBzaGlmdCAtIHIgOyAgLy8gb3IgaWYgQSBwb3RlbnRpYWxseSBiaWdnZXIgdGhhbiBCXG5cdF9jb3B5KCBhICwgYWkgLCBhaiAsIF9hICwgX2FrICkgO1xuXG5cdGNvbnN0IF9iaSA9IDAgO1xuXHRjb25zdCBfYmogPSBuIDtcblx0Y29uc3QgX2IgPSBfemVyb3MoIG4gKSA7XG5cdF9jb3B5KCBiICwgYmkgLCBiaiAsIF9iICwgMCApIDtcblxuXHRpZiAoIF9ub3JtYWxpemUgKSB7XG5cblx0XHRfaW11bF9saW1iKCBYICwgeiAsIF9hICwgX2FpICwgX2FqICkgO1xuXHRcdF9pbXVsX2xpbWIoIFggLCB6ICwgX2IgLCBfYmkgLCBfYmogKSA7XG5cblx0fVxuXG5cdGNvbnN0IF9jaiA9IF9haiA7XG5cdGNvbnN0IF9jID0gX3plcm9zKCBfY2ogKSA7XG5cblx0Zm9yICggbGV0IGkgPSAwIDsgaSA8IF9haiAtIG4gOyBpICs9IG4gKSB7XG5cblx0XHRfZGNfZGl2XzIxKCBYICwgX2EgLCBpICwgaSArICggbiA8PCAxICkgLCBfYiAsIF9iaSAsIF9iaiAsIF9jICwgaSAsIGkgKyAoIG4gPDwgMSApICkgO1xuXG5cdH1cblxuXHRpZiAoIF9ub3JtYWxpemUgKSB7XG5cdFx0Y29uc3QgcCA9IF9tb2RfbGltYiggWCAsIHogLCBfYSAsIF9haSAsIF9hayApIDtcblx0XHRfZGl2X2xpbWJfcGFydGlhbF9mYXN0KCBYICwgcCAsIHogLCBfYSAsIF9hayAsIF9haiAtIHNoaWZ0ICwgYSAsIGFpICwgYWogKSA7XG5cdH1cblx0ZWxzZSB7XG5cdFx0X2NvcHkoIF9hICwgX2FrICwgX2FqIC0gc2hpZnQgLCBhICwgYWkgLCBhaiApIDtcblx0fVxuXG5cdF9jb3B5KCBfYyAsIF9jaiAtIHIgLCBfY2ogLCBjICwgY2kgKSA7XG5cbn1cbiJdfQ==