'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._idivmod_dc_32 = _idivmod_dc_32;

var _array = require('../../array');

var _sub = require('../sub');

var _compare = require('../../compare');

var _add = require('../add');

var _api = require('../../../api');

var _ = require('.');

/**
 * Algorithm 3.4 Divide-and-conquer division (3 by 2)
 * ==================================================
 *
 * Input
 * -----
 *  Two nonnegative integers A and B,
 *  such that A < β^n B and β^{2n} / 2 ≤ B < β^{2n}.
 *  n must be even.
 *
 *                    --------                 -----
 *                   |  |  |  |               |  |  |
 *                    --------                 -----
 *
 * Output
 * ------
 *  The quotient floor( A/B ) and the remainder A mod B.
 *
 * Complexity
 * ----------
 *  T'(n) ≤ T(n) + M(n) + Ln
 *
 */
function _idivmod_dc_32(r, a, ai, aj, b, bi, bj, c, ci, cj) {

	// 1. Let A = A_2 β^{2n} + A_1 β^n + A_0 and
	//    B = B_1 β^{n} + B_0,
	//    with 0 ≤ A_i < β^n and 0 ≤ B_i < β^n.

	var k = bj - bi;
	var n = k >>> 1;

	// 2. If A_2 < B_1, compute Q = floor( ( A_2 β^n + A_1 ) / B_1 ) with
	//    remainder R_1 using algorithm 3.3;

	if ((0, _compare._lt)(a, ai, ai + n, b, bi, bi + n)) {
		(0, _._idivmod_dc_21)(r, a, ai, aj - n, b, bi, bi + n, c, ci + n, cj);
	}

	//    otherwise let Q = β^n - 1, and R_1 = ( A_2 - B_1 ) β^n + A_1 + B_1
	//    (note in this case that A_2 = B_1)

	else {
			(0, _array._fill)(c, cj - n, cj, r - 1);
			(0, _add._iadd)(r, a, ai, aj - n, b, bi, bi + n);
			(0, _sub._isub)(r, a, ai, ai + n, b, bi, bi + n);
		}

	// 3. R <- R_1 β^n + A_0 - Q*B_0

	var zi = 0;
	var zj = n << 1;
	var z = (0, _array._zeros)(zj);
	(0, _api._mul)(r, c, cj - n, cj, b, bi + n, bj, z, zi, zj);
	(0, _sub._isub)(r, a, ai, aj, z, zi, zj);

	// 4. if R < 0 , R <- R + B and Q <- Q - 1

	if (a[ai] === 0) return;
	(0, _add._iadd)(r, a, ai, aj, b, bi, bj);
	(0, _sub._decrement)(r, c, cj - n, cj);

	// 5. if R < 0 , R <- R + B and Q <- Q - 1

	if (a[ai] === 0) return;
	(0, _add._iadd)(r, a, ai, aj, b, bi, bj);
	(0, _sub._decrement)(r, c, cj - n, cj);

	// 6. Return Q and R
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2FyaXRobWV0aWMvZGl2L19pZGl2bW9kX2RjXzMyLmpzIl0sIm5hbWVzIjpbIl9pZGl2bW9kX2RjXzMyIiwiciIsImEiLCJhaSIsImFqIiwiYiIsImJpIiwiYmoiLCJjIiwiY2kiLCJjaiIsImsiLCJuIiwiemkiLCJ6aiIsInoiXSwibWFwcGluZ3MiOiI7Ozs7O1FBOEJnQkEsYyxHQUFBQSxjOztBQTlCaEI7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJPLFNBQVNBLGNBQVQsQ0FBMEJDLENBQTFCLEVBQThCQyxDQUE5QixFQUFrQ0MsRUFBbEMsRUFBdUNDLEVBQXZDLEVBQTRDQyxDQUE1QyxFQUFnREMsRUFBaEQsRUFBcURDLEVBQXJELEVBQTBEQyxDQUExRCxFQUE4REMsRUFBOUQsRUFBbUVDLEVBQW5FLEVBQXdFOztBQUU5RTtBQUNBO0FBQ0E7O0FBRUEsS0FBTUMsSUFBSUosS0FBS0QsRUFBZjtBQUNBLEtBQU1NLElBQUlELE1BQU0sQ0FBaEI7O0FBRUE7QUFDQTs7QUFFQSxLQUFLLGtCQUFLVCxDQUFMLEVBQVNDLEVBQVQsRUFBY0EsS0FBS1MsQ0FBbkIsRUFBdUJQLENBQXZCLEVBQTJCQyxFQUEzQixFQUFnQ0EsS0FBS00sQ0FBckMsQ0FBTCxFQUFnRDtBQUMvQyx3QkFBZ0JYLENBQWhCLEVBQW9CQyxDQUFwQixFQUF3QkMsRUFBeEIsRUFBNkJDLEtBQUtRLENBQWxDLEVBQXNDUCxDQUF0QyxFQUEwQ0MsRUFBMUMsRUFBK0NBLEtBQUtNLENBQXBELEVBQXdESixDQUF4RCxFQUE0REMsS0FBS0csQ0FBakUsRUFBcUVGLEVBQXJFO0FBQ0E7O0FBRUQ7QUFDQTs7QUFMQSxNQU9LO0FBQ0oscUJBQU9GLENBQVAsRUFBV0UsS0FBS0UsQ0FBaEIsRUFBb0JGLEVBQXBCLEVBQXlCVCxJQUFJLENBQTdCO0FBQ0EsbUJBQU9BLENBQVAsRUFBV0MsQ0FBWCxFQUFlQyxFQUFmLEVBQW9CQyxLQUFLUSxDQUF6QixFQUE2QlAsQ0FBN0IsRUFBaUNDLEVBQWpDLEVBQXNDQSxLQUFLTSxDQUEzQztBQUNBLG1CQUFPWCxDQUFQLEVBQVdDLENBQVgsRUFBZUMsRUFBZixFQUFvQkEsS0FBS1MsQ0FBekIsRUFBNkJQLENBQTdCLEVBQWlDQyxFQUFqQyxFQUFzQ0EsS0FBS00sQ0FBM0M7QUFDQTs7QUFFRDs7QUFFQSxLQUFNQyxLQUFLLENBQVg7QUFDQSxLQUFNQyxLQUFLRixLQUFLLENBQWhCO0FBQ0EsS0FBTUcsSUFBSSxtQkFBUUQsRUFBUixDQUFWO0FBQ0EsZ0JBQU1iLENBQU4sRUFBVU8sQ0FBVixFQUFjRSxLQUFLRSxDQUFuQixFQUF1QkYsRUFBdkIsRUFBNEJMLENBQTVCLEVBQWdDQyxLQUFLTSxDQUFyQyxFQUF5Q0wsRUFBekMsRUFBOENRLENBQTlDLEVBQWtERixFQUFsRCxFQUF1REMsRUFBdkQ7QUFDQSxpQkFBT2IsQ0FBUCxFQUFXQyxDQUFYLEVBQWVDLEVBQWYsRUFBb0JDLEVBQXBCLEVBQXlCVyxDQUF6QixFQUE2QkYsRUFBN0IsRUFBa0NDLEVBQWxDOztBQUVBOztBQUVBLEtBQUtaLEVBQUVDLEVBQUYsTUFBVSxDQUFmLEVBQW1CO0FBQ25CLGlCQUFPRixDQUFQLEVBQVdDLENBQVgsRUFBZUMsRUFBZixFQUFvQkMsRUFBcEIsRUFBeUJDLENBQXpCLEVBQTZCQyxFQUE3QixFQUFrQ0MsRUFBbEM7QUFDQSxzQkFBWU4sQ0FBWixFQUFnQk8sQ0FBaEIsRUFBb0JFLEtBQUtFLENBQXpCLEVBQTZCRixFQUE3Qjs7QUFFQTs7QUFFQSxLQUFLUixFQUFFQyxFQUFGLE1BQVUsQ0FBZixFQUFtQjtBQUNuQixpQkFBT0YsQ0FBUCxFQUFXQyxDQUFYLEVBQWVDLEVBQWYsRUFBb0JDLEVBQXBCLEVBQXlCQyxDQUF6QixFQUE2QkMsRUFBN0IsRUFBa0NDLEVBQWxDO0FBQ0Esc0JBQVlOLENBQVosRUFBZ0JPLENBQWhCLEVBQW9CRSxLQUFLRSxDQUF6QixFQUE2QkYsRUFBN0I7O0FBRUE7QUFFQSIsImZpbGUiOiJfaWRpdm1vZF9kY18zMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF96ZXJvcyAsIF9maWxsIH0gZnJvbSAnLi4vLi4vYXJyYXknIDtcbmltcG9ydCB7IF9kZWNyZW1lbnQgLCBfaXN1YiB9IGZyb20gJy4uL3N1YicgO1xuaW1wb3J0IHsgX2x0IH0gZnJvbSAnLi4vLi4vY29tcGFyZScgO1xuaW1wb3J0IHsgX2lhZGQgfSBmcm9tICcuLi9hZGQnIDtcbmltcG9ydCB7IF9tdWwgfSBmcm9tICcuLi8uLi8uLi9hcGknIDtcbmltcG9ydCB7IF9pZGl2bW9kX2RjXzIxIH0gZnJvbSAnLicgO1xuXG4vKipcbiAqIEFsZ29yaXRobSAzLjQgRGl2aWRlLWFuZC1jb25xdWVyIGRpdmlzaW9uICgzIGJ5IDIpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICpcbiAqIElucHV0XG4gKiAtLS0tLVxuICogIFR3byBub25uZWdhdGl2ZSBpbnRlZ2VycyBBIGFuZCBCLFxuICogIHN1Y2ggdGhhdCBBIDwgzrJebiBCIGFuZCDOsl57Mm59IC8gMiDiiaQgQiA8IM6yXnsybn0uXG4gKiAgbiBtdXN0IGJlIGV2ZW4uXG4gKlxuICogICAgICAgICAgICAgICAgICAgIC0tLS0tLS0tICAgICAgICAgICAgICAgICAtLS0tLVxuICogICAgICAgICAgICAgICAgICAgfCAgfCAgfCAgfCAgICAgICAgICAgICAgIHwgIHwgIHxcbiAqICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLSAgICAgICAgICAgICAgICAgLS0tLS1cbiAqXG4gKiBPdXRwdXRcbiAqIC0tLS0tLVxuICogIFRoZSBxdW90aWVudCBmbG9vciggQS9CICkgYW5kIHRoZSByZW1haW5kZXIgQSBtb2QgQi5cbiAqXG4gKiBDb21wbGV4aXR5XG4gKiAtLS0tLS0tLS0tXG4gKiAgVCcobikg4omkIFQobikgKyBNKG4pICsgTG5cbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfaWRpdm1vZF9kY18zMiAoIHIgLCBhICwgYWkgLCBhaiAsIGIgLCBiaSAsIGJqICwgYyAsIGNpICwgY2ogKSB7XG5cblx0Ly8gMS4gTGV0IEEgPSBBXzIgzrJeezJufSArIEFfMSDOsl5uICsgQV8wIGFuZFxuXHQvLyAgICBCID0gQl8xIM6yXntufSArIEJfMCxcblx0Ly8gICAgd2l0aCAwIOKJpCBBX2kgPCDOsl5uIGFuZCAwIOKJpCBCX2kgPCDOsl5uLlxuXG5cdGNvbnN0IGsgPSBiaiAtIGJpIDtcblx0Y29uc3QgbiA9IGsgPj4+IDEgO1xuXG5cdC8vIDIuIElmIEFfMiA8IEJfMSwgY29tcHV0ZSBRID0gZmxvb3IoICggQV8yIM6yXm4gKyBBXzEgKSAvIEJfMSApIHdpdGhcblx0Ly8gICAgcmVtYWluZGVyIFJfMSB1c2luZyBhbGdvcml0aG0gMy4zO1xuXG5cdGlmICggX2x0KCBhICwgYWkgLCBhaSArIG4gLCBiICwgYmkgLCBiaSArIG4gKSApIHtcblx0XHRfaWRpdm1vZF9kY18yMSggciAsIGEgLCBhaSAsIGFqIC0gbiAsIGIgLCBiaSAsIGJpICsgbiAsIGMgLCBjaSArIG4gLCBjaiApIDtcblx0fVxuXG5cdC8vICAgIG90aGVyd2lzZSBsZXQgUSA9IM6yXm4gLSAxLCBhbmQgUl8xID0gKCBBXzIgLSBCXzEgKSDOsl5uICsgQV8xICsgQl8xXG5cdC8vICAgIChub3RlIGluIHRoaXMgY2FzZSB0aGF0IEFfMiA9IEJfMSlcblxuXHRlbHNlIHtcblx0XHRfZmlsbCggYyAsIGNqIC0gbiAsIGNqICwgciAtIDEgKSA7XG5cdFx0X2lhZGQoIHIgLCBhICwgYWkgLCBhaiAtIG4gLCBiICwgYmkgLCBiaSArIG4gICkgO1xuXHRcdF9pc3ViKCByICwgYSAsIGFpICwgYWkgKyBuICwgYiAsIGJpICwgYmkgKyBuICApIDtcblx0fVxuXG5cdC8vIDMuIFIgPC0gUl8xIM6yXm4gKyBBXzAgLSBRKkJfMFxuXG5cdGNvbnN0IHppID0gMCA7XG5cdGNvbnN0IHpqID0gbiA8PCAxIDtcblx0Y29uc3QgeiA9IF96ZXJvcyggemogKSA7XG5cdF9tdWwoIHIgLCBjICwgY2ogLSBuICwgY2ogLCBiICwgYmkgKyBuICwgYmogLCB6ICwgemkgLCB6aiApIDtcblx0X2lzdWIoIHIgLCBhICwgYWkgLCBhaiAsIHogLCB6aSAsIHpqICkgO1xuXG5cdC8vIDQuIGlmIFIgPCAwICwgUiA8LSBSICsgQiBhbmQgUSA8LSBRIC0gMVxuXG5cdGlmICggYVthaV0gPT09IDAgKSByZXR1cm4gO1xuXHRfaWFkZCggciAsIGEgLCBhaSAsIGFqICwgYiAsIGJpICwgYmogKSA7XG5cdF9kZWNyZW1lbnQoIHIgLCBjICwgY2ogLSBuICwgY2ogKSA7XG5cblx0Ly8gNS4gaWYgUiA8IDAgLCBSIDwtIFIgKyBCIGFuZCBRIDwtIFEgLSAxXG5cblx0aWYgKCBhW2FpXSA9PT0gMCApIHJldHVybiA7XG5cdF9pYWRkKCByICwgYSAsIGFpICwgYWogLCBiICwgYmkgLCBiaiApIDtcblx0X2RlY3JlbWVudCggciAsIGMgLCBjaiAtIG4gLCBjaiApIDtcblxuXHQvLyA2LiBSZXR1cm4gUSBhbmQgUlxuXG59XG4iXX0=