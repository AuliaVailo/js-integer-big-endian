'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._idivmod_dc_32 = _idivmod_dc_32;

var _array = require('../../array');

var _sub = require('../sub');

var _compare = require('../../compare');

var _api = require('../../../api');

var _ = require('.');

/**
 * Algorithm 3.4 Divide-and-conquer division (3 by 2)
 * ==================================================
 *
 * Input
 * -----
 *  Two nonnegative integers A and B,
 *  such that A < β^n B and β^{2n} / 2 ≤ B < β^{2n}.
 *  n must be even.
 *
 *                    --------                 -----
 *                   |  |  |  |               |  |  |
 *                    --------                 -----
 *
 * Output
 * ------
 *  The quotient floor( A/B ) and the remainder A mod B.
 *
 * Complexity
 * ----------
 *  T'(n) ≤ T(n) + M(n) + Ln
 *
 */
function _idivmod_dc_32(r, a, ai, aj, b, bi, bj, c, ci, cj) {

	// 1. Let A = A_2 β^{2n} + A_1 β^n + A_0 and
	//    B = B_1 β^{n} + B_0,
	//    with 0 ≤ A_i < β^n and 0 ≤ B_i < β^n.

	var k = bj - bi;
	var n = k >>> 1;

	// 2. If A_2 < B_1, compute Q = floor( ( A_2 β^n + A_1 ) / B_1 ) with
	//    remainder R_1 using algorithm 3.3;

	if ((0, _compare._lt)(a, ai, ai + n, b, bi, bi + n)) {
		(0, _._idivmod_dc_21)(r, a, ai, aj - n, b, bi, bi + n, c, ci + n, cj);
	}

	//    otherwise let Q = β^n - 1, and R_1 = ( A_2 - B_1 ) β^n + A_1 + B_1
	//    (note in this case that A_2 = B_1)

	else {
			(0, _array._fill)(c, cj - n, cj, r - 1);
			(0, _api.iadd)(r, a, ai, aj - n, b, bi, bi + n);
			(0, _sub._isub)(r, a, ai, ai + n, b, bi, bi + n);
		}

	// 3. R <- R_1 β^n + A_0 - Q*B_0

	var zi = 0;
	var zj = n << 1;
	var z = (0, _array._zeros)(zj);
	(0, _api.mul)(r, c, cj - n, cj, b, bi + n, bj, z, zi, zj);
	(0, _sub._isub)(r, a, ai, aj, z, zi, zj);

	// 4. if R < 0 , R <- R + B and Q <- Q - 1

	if (a[ai] === 0) return;
	(0, _api.iadd)(r, a, ai, aj, b, bi, bj);
	(0, _sub._decrement)(r, c, cj - n, cj);

	// 5. if R < 0 , R <- R + B and Q <- Q - 1

	if (a[ai] === 0) return;
	(0, _api.iadd)(r, a, ai, aj, b, bi, bj);
	(0, _sub._decrement)(r, c, cj - n, cj);

	// 6. Return Q and R
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2FyaXRobWV0aWMvZGl2L19pZGl2bW9kX2RjXzMyLmpzIl0sIm5hbWVzIjpbIl9pZGl2bW9kX2RjXzMyIiwiciIsImEiLCJhaSIsImFqIiwiYiIsImJpIiwiYmoiLCJjIiwiY2kiLCJjaiIsImsiLCJuIiwiemkiLCJ6aiIsInoiXSwibWFwcGluZ3MiOiI7Ozs7O1FBNkJnQkEsYyxHQUFBQSxjOztBQTdCaEI7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJPLFNBQVNBLGNBQVQsQ0FBMEJDLENBQTFCLEVBQThCQyxDQUE5QixFQUFrQ0MsRUFBbEMsRUFBdUNDLEVBQXZDLEVBQTRDQyxDQUE1QyxFQUFnREMsRUFBaEQsRUFBcURDLEVBQXJELEVBQTBEQyxDQUExRCxFQUE4REMsRUFBOUQsRUFBbUVDLEVBQW5FLEVBQXdFOztBQUU5RTtBQUNBO0FBQ0E7O0FBRUEsS0FBTUMsSUFBSUosS0FBS0QsRUFBZjtBQUNBLEtBQU1NLElBQUlELE1BQU0sQ0FBaEI7O0FBRUE7QUFDQTs7QUFFQSxLQUFLLGtCQUFLVCxDQUFMLEVBQVNDLEVBQVQsRUFBY0EsS0FBS1MsQ0FBbkIsRUFBdUJQLENBQXZCLEVBQTJCQyxFQUEzQixFQUFnQ0EsS0FBS00sQ0FBckMsQ0FBTCxFQUFnRDtBQUMvQyx3QkFBZ0JYLENBQWhCLEVBQW9CQyxDQUFwQixFQUF3QkMsRUFBeEIsRUFBNkJDLEtBQUtRLENBQWxDLEVBQXNDUCxDQUF0QyxFQUEwQ0MsRUFBMUMsRUFBK0NBLEtBQUtNLENBQXBELEVBQXdESixDQUF4RCxFQUE0REMsS0FBS0csQ0FBakUsRUFBcUVGLEVBQXJFO0FBQ0E7O0FBRUQ7QUFDQTs7QUFMQSxNQU9LO0FBQ0oscUJBQU9GLENBQVAsRUFBV0UsS0FBS0UsQ0FBaEIsRUFBb0JGLEVBQXBCLEVBQXlCVCxJQUFJLENBQTdCO0FBQ0Esa0JBQU1BLENBQU4sRUFBVUMsQ0FBVixFQUFjQyxFQUFkLEVBQW1CQyxLQUFLUSxDQUF4QixFQUE0QlAsQ0FBNUIsRUFBZ0NDLEVBQWhDLEVBQXFDQSxLQUFLTSxDQUExQztBQUNBLG1CQUFPWCxDQUFQLEVBQVdDLENBQVgsRUFBZUMsRUFBZixFQUFvQkEsS0FBS1MsQ0FBekIsRUFBNkJQLENBQTdCLEVBQWlDQyxFQUFqQyxFQUFzQ0EsS0FBS00sQ0FBM0M7QUFDQTs7QUFFRDs7QUFFQSxLQUFNQyxLQUFLLENBQVg7QUFDQSxLQUFNQyxLQUFLRixLQUFLLENBQWhCO0FBQ0EsS0FBTUcsSUFBSSxtQkFBUUQsRUFBUixDQUFWO0FBQ0EsZUFBS2IsQ0FBTCxFQUFTTyxDQUFULEVBQWFFLEtBQUtFLENBQWxCLEVBQXNCRixFQUF0QixFQUEyQkwsQ0FBM0IsRUFBK0JDLEtBQUtNLENBQXBDLEVBQXdDTCxFQUF4QyxFQUE2Q1EsQ0FBN0MsRUFBaURGLEVBQWpELEVBQXNEQyxFQUF0RDtBQUNBLGlCQUFPYixDQUFQLEVBQVdDLENBQVgsRUFBZUMsRUFBZixFQUFvQkMsRUFBcEIsRUFBeUJXLENBQXpCLEVBQTZCRixFQUE3QixFQUFrQ0MsRUFBbEM7O0FBRUE7O0FBRUEsS0FBS1osRUFBRUMsRUFBRixNQUFVLENBQWYsRUFBbUI7QUFDbkIsZ0JBQU1GLENBQU4sRUFBVUMsQ0FBVixFQUFjQyxFQUFkLEVBQW1CQyxFQUFuQixFQUF3QkMsQ0FBeEIsRUFBNEJDLEVBQTVCLEVBQWlDQyxFQUFqQztBQUNBLHNCQUFZTixDQUFaLEVBQWdCTyxDQUFoQixFQUFvQkUsS0FBS0UsQ0FBekIsRUFBNkJGLEVBQTdCOztBQUVBOztBQUVBLEtBQUtSLEVBQUVDLEVBQUYsTUFBVSxDQUFmLEVBQW1CO0FBQ25CLGdCQUFNRixDQUFOLEVBQVVDLENBQVYsRUFBY0MsRUFBZCxFQUFtQkMsRUFBbkIsRUFBd0JDLENBQXhCLEVBQTRCQyxFQUE1QixFQUFpQ0MsRUFBakM7QUFDQSxzQkFBWU4sQ0FBWixFQUFnQk8sQ0FBaEIsRUFBb0JFLEtBQUtFLENBQXpCLEVBQTZCRixFQUE3Qjs7QUFFQTtBQUVBIiwiZmlsZSI6Il9pZGl2bW9kX2RjXzMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX3plcm9zICwgX2ZpbGwgfSBmcm9tICcuLi8uLi9hcnJheScgO1xuaW1wb3J0IHsgX2RlY3JlbWVudCAsIF9pc3ViIH0gZnJvbSAnLi4vc3ViJyA7XG5pbXBvcnQgeyBfbHQgfSBmcm9tICcuLi8uLi9jb21wYXJlJyA7XG5pbXBvcnQgeyBpYWRkICwgbXVsIH0gZnJvbSAnLi4vLi4vLi4vYXBpJyA7XG5pbXBvcnQgeyBfaWRpdm1vZF9kY18yMSB9IGZyb20gJy4nIDtcblxuLyoqXG4gKiBBbGdvcml0aG0gMy40IERpdmlkZS1hbmQtY29ucXVlciBkaXZpc2lvbiAoMyBieSAyKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqXG4gKiBJbnB1dFxuICogLS0tLS1cbiAqICBUd28gbm9ubmVnYXRpdmUgaW50ZWdlcnMgQSBhbmQgQixcbiAqICBzdWNoIHRoYXQgQSA8IM6yXm4gQiBhbmQgzrJeezJufSAvIDIg4omkIEIgPCDOsl57Mm59LlxuICogIG4gbXVzdCBiZSBldmVuLlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAtLS0tLS0tLSAgICAgICAgICAgICAgICAgLS0tLS1cbiAqICAgICAgICAgICAgICAgICAgIHwgIHwgIHwgIHwgICAgICAgICAgICAgICB8ICB8ICB8XG4gKiAgICAgICAgICAgICAgICAgICAgLS0tLS0tLS0gICAgICAgICAgICAgICAgIC0tLS0tXG4gKlxuICogT3V0cHV0XG4gKiAtLS0tLS1cbiAqICBUaGUgcXVvdGllbnQgZmxvb3IoIEEvQiApIGFuZCB0aGUgcmVtYWluZGVyIEEgbW9kIEIuXG4gKlxuICogQ29tcGxleGl0eVxuICogLS0tLS0tLS0tLVxuICogIFQnKG4pIOKJpCBUKG4pICsgTShuKSArIExuXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gX2lkaXZtb2RfZGNfMzIgKCByICwgYSAsIGFpICwgYWogLCBiICwgYmkgLCBiaiAsIGMgLCBjaSAsIGNqICkge1xuXG5cdC8vIDEuIExldCBBID0gQV8yIM6yXnsybn0gKyBBXzEgzrJebiArIEFfMCBhbmRcblx0Ly8gICAgQiA9IEJfMSDOsl57bn0gKyBCXzAsXG5cdC8vICAgIHdpdGggMCDiiaQgQV9pIDwgzrJebiBhbmQgMCDiiaQgQl9pIDwgzrJebi5cblxuXHRjb25zdCBrID0gYmogLSBiaSA7XG5cdGNvbnN0IG4gPSBrID4+PiAxIDtcblxuXHQvLyAyLiBJZiBBXzIgPCBCXzEsIGNvbXB1dGUgUSA9IGZsb29yKCAoIEFfMiDOsl5uICsgQV8xICkgLyBCXzEgKSB3aXRoXG5cdC8vICAgIHJlbWFpbmRlciBSXzEgdXNpbmcgYWxnb3JpdGhtIDMuMztcblxuXHRpZiAoIF9sdCggYSAsIGFpICwgYWkgKyBuICwgYiAsIGJpICwgYmkgKyBuICkgKSB7XG5cdFx0X2lkaXZtb2RfZGNfMjEoIHIgLCBhICwgYWkgLCBhaiAtIG4gLCBiICwgYmkgLCBiaSArIG4gLCBjICwgY2kgKyBuICwgY2ogKSA7XG5cdH1cblxuXHQvLyAgICBvdGhlcndpc2UgbGV0IFEgPSDOsl5uIC0gMSwgYW5kIFJfMSA9ICggQV8yIC0gQl8xICkgzrJebiArIEFfMSArIEJfMVxuXHQvLyAgICAobm90ZSBpbiB0aGlzIGNhc2UgdGhhdCBBXzIgPSBCXzEpXG5cblx0ZWxzZSB7XG5cdFx0X2ZpbGwoIGMgLCBjaiAtIG4gLCBjaiAsIHIgLSAxICkgO1xuXHRcdGlhZGQoIHIgLCBhICwgYWkgLCBhaiAtIG4gLCBiICwgYmkgLCBiaSArIG4gICkgO1xuXHRcdF9pc3ViKCByICwgYSAsIGFpICwgYWkgKyBuICwgYiAsIGJpICwgYmkgKyBuICApIDtcblx0fVxuXG5cdC8vIDMuIFIgPC0gUl8xIM6yXm4gKyBBXzAgLSBRKkJfMFxuXG5cdGNvbnN0IHppID0gMCA7XG5cdGNvbnN0IHpqID0gbiA8PCAxIDtcblx0Y29uc3QgeiA9IF96ZXJvcyggemogKSA7XG5cdG11bCggciAsIGMgLCBjaiAtIG4gLCBjaiAsIGIgLCBiaSArIG4gLCBiaiAsIHogLCB6aSAsIHpqICkgO1xuXHRfaXN1YiggciAsIGEgLCBhaSAsIGFqICwgeiAsIHppICwgemogKSA7XG5cblx0Ly8gNC4gaWYgUiA8IDAgLCBSIDwtIFIgKyBCIGFuZCBRIDwtIFEgLSAxXG5cblx0aWYgKCBhW2FpXSA9PT0gMCApIHJldHVybiA7XG5cdGlhZGQoIHIgLCBhICwgYWkgLCBhaiAsIGIgLCBiaSAsIGJqICkgO1xuXHRfZGVjcmVtZW50KCByICwgYyAsIGNqIC0gbiAsIGNqICkgO1xuXG5cdC8vIDUuIGlmIFIgPCAwICwgUiA8LSBSICsgQiBhbmQgUSA8LSBRIC0gMVxuXG5cdGlmICggYVthaV0gPT09IDAgKSByZXR1cm4gO1xuXHRpYWRkKCByICwgYSAsIGFpICwgYWogLCBiICwgYmkgLCBiaiApIDtcblx0X2RlY3JlbWVudCggciAsIGMgLCBjaiAtIG4gLCBjaiApIDtcblxuXHQvLyA2LiBSZXR1cm4gUSBhbmQgUlxuXG59XG4iXX0=