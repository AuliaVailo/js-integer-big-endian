'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._idivmod_schoolbook_subroutine = _idivmod_schoolbook_subroutine;

var _array = require('../../array');

var _compare = require('../../compare');

var _ = require('..');

/**
 * Input
 * -----
 *  - Two integers A and B such that 0 <= A < r^n+1 and (r^n)/2 <= B < r^(n).
 *  - |a| = |b| + 1
 *  - |q| = |a|
 *
 * Output
 * -----
 *  The quotient floor( A/B ) and the remainder A mod B.
 *
 * @param {Number} r The radix.
 * @param {Array} a Dividend.
 * @param {Number} ai Left of dividend.
 * @param {Number} aj Right of dividend.
 * @param {Array} b Divisor.
 * @param {Number} bi Left of divisor.
 * @param {Number} bj Right of divisor.
 * @param {Array} q Quotient.
 * @param {Number} qi Left of quotient.
 */
function _idivmod_schoolbook_subroutine(r, a, ai, aj, b, bi, bj, q, qi) {

	var m = aj - ai;

	// If A ≥ B*β, compute the quotient q and remainder r of ( A − B*β ) / B
	// recursively, and return β + q and r.
	if ((0, _compare._ge)(a, ai, aj - 1, b, bi, bj)) {
		(0, _._isub)(r, a, ai, aj - 1, b, bi, bj);
		_idivmod_schoolbook_subroutine(r, a, ai, aj, b, bi, bj, q, qi);
		(0, _._increment)(r, q, qi, qi + m - 1);
		return;
	}

	// If A < B*β, then A/B < β
	// q <- min [ ( β a_0 + a_1 ) / b_0 , β - 1 ]
	var _q = Math.min(r - 1, Math.floor((a[ai] * r + a[ai + 1]) / b[bi]));

	// fix _q
	var T = (0, _array._zeros)(m);
	(0, _._mul_limb)(r, _q, b, bi, bj, T, 0, m);

	if ((0, _compare._gt)(T, 0, m, a, ai, aj)) {
		--_q;
		(0, _._isub)(r, T, 0, m, b, bi, bj);

		if ((0, _compare._gt)(T, 0, m, a, ai, aj)) {
			--_q;
			(0, _._isub)(r, T, 0, m, b, bi, bj);
		}
	}

	q[qi + m - 1] += _q;

	(0, _._isub)(r, a, ai, aj, T, 0, m);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2FyaXRobWV0aWMvZGl2L19pZGl2bW9kX3NjaG9vbGJvb2tfc3Vicm91dGluZS5qcyJdLCJuYW1lcyI6WyJfaWRpdm1vZF9zY2hvb2xib29rX3N1YnJvdXRpbmUiLCJyIiwiYSIsImFpIiwiYWoiLCJiIiwiYmkiLCJiaiIsInEiLCJxaSIsIm0iLCJfcSIsIk1hdGgiLCJtaW4iLCJmbG9vciIsIlQiXSwibWFwcGluZ3MiOiI7Ozs7O1FBMkJnQkEsOEIsR0FBQUEsOEI7O0FBM0JoQjs7QUFDQTs7QUFDQTs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJPLFNBQVNBLDhCQUFULENBQTBDQyxDQUExQyxFQUE4Q0MsQ0FBOUMsRUFBa0RDLEVBQWxELEVBQXVEQyxFQUF2RCxFQUE0REMsQ0FBNUQsRUFBZ0VDLEVBQWhFLEVBQXFFQyxFQUFyRSxFQUEwRUMsQ0FBMUUsRUFBOEVDLEVBQTlFLEVBQW1GOztBQUV6RixLQUFNQyxJQUFJTixLQUFLRCxFQUFmOztBQUVBO0FBQ0E7QUFDQSxLQUFLLGtCQUFLRCxDQUFMLEVBQVNDLEVBQVQsRUFBY0MsS0FBSyxDQUFuQixFQUF1QkMsQ0FBdkIsRUFBMkJDLEVBQTNCLEVBQWdDQyxFQUFoQyxDQUFMLEVBQTRDO0FBQzNDLGVBQU9OLENBQVAsRUFBV0MsQ0FBWCxFQUFlQyxFQUFmLEVBQW9CQyxLQUFLLENBQXpCLEVBQTZCQyxDQUE3QixFQUFpQ0MsRUFBakMsRUFBc0NDLEVBQXRDO0FBQ0FQLGlDQUFnQ0MsQ0FBaEMsRUFBb0NDLENBQXBDLEVBQXdDQyxFQUF4QyxFQUE2Q0MsRUFBN0MsRUFBa0RDLENBQWxELEVBQXNEQyxFQUF0RCxFQUEyREMsRUFBM0QsRUFBZ0VDLENBQWhFLEVBQW9FQyxFQUFwRTtBQUNBLG9CQUFZUixDQUFaLEVBQWdCTyxDQUFoQixFQUFvQkMsRUFBcEIsRUFBeUJBLEtBQUtDLENBQUwsR0FBUyxDQUFsQztBQUNBO0FBQ0E7O0FBRUQ7QUFDQTtBQUNBLEtBQUlDLEtBQUtDLEtBQUtDLEdBQUwsQ0FBVVosSUFBSSxDQUFkLEVBQWtCVyxLQUFLRSxLQUFMLENBQVksQ0FBRVosRUFBRUMsRUFBRixJQUFRRixDQUFSLEdBQVlDLEVBQUVDLEtBQUcsQ0FBTCxDQUFkLElBQTBCRSxFQUFFQyxFQUFGLENBQXRDLENBQWxCLENBQVQ7O0FBRUE7QUFDQSxLQUFNUyxJQUFJLG1CQUFRTCxDQUFSLENBQVY7QUFDQSxrQkFBV1QsQ0FBWCxFQUFlVSxFQUFmLEVBQW9CTixDQUFwQixFQUF3QkMsRUFBeEIsRUFBNkJDLEVBQTdCLEVBQWtDUSxDQUFsQyxFQUFzQyxDQUF0QyxFQUEwQ0wsQ0FBMUM7O0FBRUEsS0FBSyxrQkFBS0ssQ0FBTCxFQUFTLENBQVQsRUFBYUwsQ0FBYixFQUFpQlIsQ0FBakIsRUFBcUJDLEVBQXJCLEVBQTBCQyxFQUExQixDQUFMLEVBQXNDO0FBQ3JDLElBQUVPLEVBQUY7QUFDQSxlQUFPVixDQUFQLEVBQVdjLENBQVgsRUFBZSxDQUFmLEVBQW1CTCxDQUFuQixFQUF1QkwsQ0FBdkIsRUFBMkJDLEVBQTNCLEVBQWdDQyxFQUFoQzs7QUFFQSxNQUFLLGtCQUFLUSxDQUFMLEVBQVMsQ0FBVCxFQUFhTCxDQUFiLEVBQWlCUixDQUFqQixFQUFxQkMsRUFBckIsRUFBMEJDLEVBQTFCLENBQUwsRUFBc0M7QUFDckMsS0FBRU8sRUFBRjtBQUNBLGdCQUFPVixDQUFQLEVBQVdjLENBQVgsRUFBZSxDQUFmLEVBQW1CTCxDQUFuQixFQUF1QkwsQ0FBdkIsRUFBMkJDLEVBQTNCLEVBQWdDQyxFQUFoQztBQUNBO0FBRUQ7O0FBRURDLEdBQUVDLEtBQUtDLENBQUwsR0FBUyxDQUFYLEtBQWlCQyxFQUFqQjs7QUFFQSxjQUFPVixDQUFQLEVBQVdDLENBQVgsRUFBZUMsRUFBZixFQUFvQkMsRUFBcEIsRUFBeUJXLENBQXpCLEVBQTZCLENBQTdCLEVBQWlDTCxDQUFqQztBQUVBIiwiZmlsZSI6Il9pZGl2bW9kX3NjaG9vbGJvb2tfc3Vicm91dGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF96ZXJvcyB9IGZyb20gJy4uLy4uL2FycmF5JyA7XG5pbXBvcnQgeyBfZ2UgLCBfZ3QgfSBmcm9tICcuLi8uLi9jb21wYXJlJyA7XG5pbXBvcnQgeyBfaW5jcmVtZW50IH0gZnJvbSAnLi4nIDtcbmltcG9ydCB7IF9pc3ViIH0gZnJvbSAnLi4nIDtcbmltcG9ydCB7IF9tdWxfbGltYiB9IGZyb20gJy4uJyA7XG5cbi8qKlxuICogSW5wdXRcbiAqIC0tLS0tXG4gKiAgLSBUd28gaW50ZWdlcnMgQSBhbmQgQiBzdWNoIHRoYXQgMCA8PSBBIDwgcl5uKzEgYW5kIChyXm4pLzIgPD0gQiA8IHJeKG4pLlxuICogIC0gfGF8ID0gfGJ8ICsgMVxuICogIC0gfHF8ID0gfGF8XG4gKlxuICogT3V0cHV0XG4gKiAtLS0tLVxuICogIFRoZSBxdW90aWVudCBmbG9vciggQS9CICkgYW5kIHRoZSByZW1haW5kZXIgQSBtb2QgQi5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gciBUaGUgcmFkaXguXG4gKiBAcGFyYW0ge0FycmF5fSBhIERpdmlkZW5kLlxuICogQHBhcmFtIHtOdW1iZXJ9IGFpIExlZnQgb2YgZGl2aWRlbmQuXG4gKiBAcGFyYW0ge051bWJlcn0gYWogUmlnaHQgb2YgZGl2aWRlbmQuXG4gKiBAcGFyYW0ge0FycmF5fSBiIERpdmlzb3IuXG4gKiBAcGFyYW0ge051bWJlcn0gYmkgTGVmdCBvZiBkaXZpc29yLlxuICogQHBhcmFtIHtOdW1iZXJ9IGJqIFJpZ2h0IG9mIGRpdmlzb3IuXG4gKiBAcGFyYW0ge0FycmF5fSBxIFF1b3RpZW50LlxuICogQHBhcmFtIHtOdW1iZXJ9IHFpIExlZnQgb2YgcXVvdGllbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfaWRpdm1vZF9zY2hvb2xib29rX3N1YnJvdXRpbmUgKCByICwgYSAsIGFpICwgYWogLCBiICwgYmkgLCBiaiAsIHEgLCBxaSApIHtcblxuXHRjb25zdCBtID0gYWogLSBhaSA7XG5cblx0Ly8gSWYgQSDiiaUgQirOsiwgY29tcHV0ZSB0aGUgcXVvdGllbnQgcSBhbmQgcmVtYWluZGVyIHIgb2YgKCBBIOKIkiBCKs6yICkgLyBCXG5cdC8vIHJlY3Vyc2l2ZWx5LCBhbmQgcmV0dXJuIM6yICsgcSBhbmQgci5cblx0aWYgKCBfZ2UoIGEgLCBhaSAsIGFqIC0gMSAsIGIgLCBiaSAsIGJqICkgKSB7XG5cdFx0X2lzdWIoIHIgLCBhICwgYWkgLCBhaiAtIDEgLCBiICwgYmkgLCBiaiApIDtcblx0XHRfaWRpdm1vZF9zY2hvb2xib29rX3N1YnJvdXRpbmUoIHIgLCBhICwgYWkgLCBhaiAsIGIgLCBiaSAsIGJqICwgcSAsIHFpICkgO1xuXHRcdF9pbmNyZW1lbnQoIHIgLCBxICwgcWkgLCBxaSArIG0gLSAxICkgO1xuXHRcdHJldHVybiA7XG5cdH1cblxuXHQvLyBJZiBBIDwgQirOsiwgdGhlbiBBL0IgPCDOslxuXHQvLyBxIDwtIG1pbiBbICggzrIgYV8wICsgYV8xICkgLyBiXzAgLCDOsiAtIDEgXVxuXHRsZXQgX3EgPSBNYXRoLm1pbiggciAtIDEgLCBNYXRoLmZsb29yKCAoIGFbYWldICogciArIGFbYWkrMV0gKSAvIGJbYmldICkgKSA7XG5cblx0Ly8gZml4IF9xXG5cdGNvbnN0IFQgPSBfemVyb3MoIG0gKSA7XG5cdF9tdWxfbGltYiggciAsIF9xICwgYiAsIGJpICwgYmogLCBUICwgMCAsIG0gKSA7XG5cblx0aWYgKCBfZ3QoIFQgLCAwICwgbSAsIGEgLCBhaSAsIGFqICkgKSB7XG5cdFx0LS1fcSA7XG5cdFx0X2lzdWIoIHIgLCBUICwgMCAsIG0gLCBiICwgYmkgLCBiaiApIDtcblxuXHRcdGlmICggX2d0KCBUICwgMCAsIG0gLCBhICwgYWkgLCBhaiApICkge1xuXHRcdFx0LS1fcSA7XG5cdFx0XHRfaXN1YiggciAsIFQgLCAwICwgbSAsIGIgLCBiaSAsIGJqICkgO1xuXHRcdH1cblxuXHR9XG5cblx0cVtxaSArIG0gLSAxXSArPSBfcSA7XG5cblx0X2lzdWIoIHIgLCBhICwgYWkgLCBhaiAsIFQgLCAwICwgbSApIDtcblxufVxuIl19