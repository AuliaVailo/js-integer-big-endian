'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._schoolbook_div_subroutine = _schoolbook_div_subroutine;

var _array = require('../../array');

var _compare = require('../../compare');

var _ = require('..');

/**
 *
 * Input
 * -----
 *
 *  Two integers A and B such that 0 <= A < r^n+1 and (r^n)/2 <= B < r^(n).
 *
 * Output
 * -----
 *
 *  The quotient floor( A/B ) and the remainder A mod B.
 *
 * @param {Number} r radix
 * @param {Array} a dividend
 * @param {Number} ai
 * @param {Number} aj
 * @param {Array} b divisor (aj - ai = bj - bi + 1)
 * @param {Number} bi
 * @param {Number} bj
 * @param {Array} q quotient (length is at least qi + aj - ai)
 * @param {Number} qi
 *
 */

function _schoolbook_div_subroutine(r, a, ai, aj, b, bi, bj, q, qi) {

	var m = aj - ai;

	// If A ≥ B*β, compute the quotient q and remainder r of ( A − B*β ) / B
	// recursively, and return β + q and r.
	if ((0, _compare._ge)(a, ai, aj - 1, b, bi, bj)) {
		(0, _._isub)(r, a, ai, aj - 1, b, bi, bj);
		_schoolbook_div_subroutine(r, a, ai, aj, b, bi, bj, q, qi);
		(0, _._increment)(r, q, qi, qi + m - 1);
		return;
	}

	// If A < B*β, then A/B < β
	// q <- min [ ( β a_0 + a_1 ) / b_0 , β - 1 ]
	var _q = Math.min(r - 1, Math.floor((a[ai] * r + a[ai + 1]) / b[bi]));

	// fix _q
	var T = (0, _array._zeros)(m);
	(0, _._mul_limb)(r, _q, b, bi, bj, T, 0, m);

	if ((0, _compare._gt)(T, 0, m, a, ai, aj)) {
		--_q;
		(0, _._isub)(r, T, 0, m, b, bi, bj);

		if ((0, _compare._gt)(T, 0, m, a, ai, aj)) {
			--_q;
			(0, _._isub)(r, T, 0, m, b, bi, bj);
		}
	}

	q[qi + m - 1] += _q;

	(0, _._isub)(r, a, ai, aj, T, 0, m);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2FyaXRobWV0aWMvZGl2L19zY2hvb2xib29rX2Rpdl9zdWJyb3V0aW5lLmpzIl0sIm5hbWVzIjpbIl9zY2hvb2xib29rX2Rpdl9zdWJyb3V0aW5lIiwiciIsImEiLCJhaSIsImFqIiwiYiIsImJpIiwiYmoiLCJxIiwicWkiLCJtIiwiX3EiLCJNYXRoIiwibWluIiwiZmxvb3IiLCJUIl0sIm1hcHBpbmdzIjoiOzs7OztRQThCZ0JBLDBCLEdBQUFBLDBCOztBQTlCaEI7O0FBQ0E7O0FBQ0E7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCTyxTQUFTQSwwQkFBVCxDQUFzQ0MsQ0FBdEMsRUFBMENDLENBQTFDLEVBQThDQyxFQUE5QyxFQUFtREMsRUFBbkQsRUFBd0RDLENBQXhELEVBQTREQyxFQUE1RCxFQUFpRUMsRUFBakUsRUFBc0VDLENBQXRFLEVBQTBFQyxFQUExRSxFQUErRTs7QUFFckYsS0FBTUMsSUFBSU4sS0FBS0QsRUFBZjs7QUFFQTtBQUNBO0FBQ0EsS0FBSyxrQkFBS0QsQ0FBTCxFQUFTQyxFQUFULEVBQWNDLEtBQUssQ0FBbkIsRUFBdUJDLENBQXZCLEVBQTJCQyxFQUEzQixFQUFnQ0MsRUFBaEMsQ0FBTCxFQUE0QztBQUMzQyxlQUFPTixDQUFQLEVBQVdDLENBQVgsRUFBZUMsRUFBZixFQUFvQkMsS0FBSyxDQUF6QixFQUE2QkMsQ0FBN0IsRUFBaUNDLEVBQWpDLEVBQXNDQyxFQUF0QztBQUNBUCw2QkFBNEJDLENBQTVCLEVBQWdDQyxDQUFoQyxFQUFvQ0MsRUFBcEMsRUFBeUNDLEVBQXpDLEVBQThDQyxDQUE5QyxFQUFrREMsRUFBbEQsRUFBdURDLEVBQXZELEVBQTREQyxDQUE1RCxFQUFnRUMsRUFBaEU7QUFDQSxvQkFBWVIsQ0FBWixFQUFnQk8sQ0FBaEIsRUFBb0JDLEVBQXBCLEVBQXlCQSxLQUFLQyxDQUFMLEdBQVMsQ0FBbEM7QUFDQTtBQUNBOztBQUVEO0FBQ0E7QUFDQSxLQUFJQyxLQUFLQyxLQUFLQyxHQUFMLENBQVVaLElBQUksQ0FBZCxFQUFrQlcsS0FBS0UsS0FBTCxDQUFZLENBQUVaLEVBQUVDLEVBQUYsSUFBUUYsQ0FBUixHQUFZQyxFQUFFQyxLQUFHLENBQUwsQ0FBZCxJQUEwQkUsRUFBRUMsRUFBRixDQUF0QyxDQUFsQixDQUFUOztBQUVBO0FBQ0EsS0FBTVMsSUFBSSxtQkFBUUwsQ0FBUixDQUFWO0FBQ0Esa0JBQVdULENBQVgsRUFBZVUsRUFBZixFQUFvQk4sQ0FBcEIsRUFBd0JDLEVBQXhCLEVBQTZCQyxFQUE3QixFQUFrQ1EsQ0FBbEMsRUFBc0MsQ0FBdEMsRUFBMENMLENBQTFDOztBQUVBLEtBQUssa0JBQUtLLENBQUwsRUFBUyxDQUFULEVBQWFMLENBQWIsRUFBaUJSLENBQWpCLEVBQXFCQyxFQUFyQixFQUEwQkMsRUFBMUIsQ0FBTCxFQUFzQztBQUNyQyxJQUFFTyxFQUFGO0FBQ0EsZUFBT1YsQ0FBUCxFQUFXYyxDQUFYLEVBQWUsQ0FBZixFQUFtQkwsQ0FBbkIsRUFBdUJMLENBQXZCLEVBQTJCQyxFQUEzQixFQUFnQ0MsRUFBaEM7O0FBRUEsTUFBSyxrQkFBS1EsQ0FBTCxFQUFTLENBQVQsRUFBYUwsQ0FBYixFQUFpQlIsQ0FBakIsRUFBcUJDLEVBQXJCLEVBQTBCQyxFQUExQixDQUFMLEVBQXNDO0FBQ3JDLEtBQUVPLEVBQUY7QUFDQSxnQkFBT1YsQ0FBUCxFQUFXYyxDQUFYLEVBQWUsQ0FBZixFQUFtQkwsQ0FBbkIsRUFBdUJMLENBQXZCLEVBQTJCQyxFQUEzQixFQUFnQ0MsRUFBaEM7QUFDQTtBQUVEOztBQUVEQyxHQUFFQyxLQUFLQyxDQUFMLEdBQVMsQ0FBWCxLQUFpQkMsRUFBakI7O0FBRUEsY0FBT1YsQ0FBUCxFQUFXQyxDQUFYLEVBQWVDLEVBQWYsRUFBb0JDLEVBQXBCLEVBQXlCVyxDQUF6QixFQUE2QixDQUE3QixFQUFpQ0wsQ0FBakM7QUFFQSIsImZpbGUiOiJfc2Nob29sYm9va19kaXZfc3Vicm91dGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF96ZXJvcyB9IGZyb20gJy4uLy4uL2FycmF5JyA7XG5pbXBvcnQgeyBfZ2UgLCBfZ3QgfSBmcm9tICcuLi8uLi9jb21wYXJlJyA7XG5pbXBvcnQgeyBfaW5jcmVtZW50IH0gZnJvbSAnLi4nIDtcbmltcG9ydCB7IF9pc3ViIH0gZnJvbSAnLi4nIDtcbmltcG9ydCB7IF9tdWxfbGltYiB9IGZyb20gJy4uJyA7XG5cbi8qKlxuICpcbiAqIElucHV0XG4gKiAtLS0tLVxuICpcbiAqICBUd28gaW50ZWdlcnMgQSBhbmQgQiBzdWNoIHRoYXQgMCA8PSBBIDwgcl5uKzEgYW5kIChyXm4pLzIgPD0gQiA8IHJeKG4pLlxuICpcbiAqIE91dHB1dFxuICogLS0tLS1cbiAqXG4gKiAgVGhlIHF1b3RpZW50IGZsb29yKCBBL0IgKSBhbmQgdGhlIHJlbWFpbmRlciBBIG1vZCBCLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSByIHJhZGl4XG4gKiBAcGFyYW0ge0FycmF5fSBhIGRpdmlkZW5kXG4gKiBAcGFyYW0ge051bWJlcn0gYWlcbiAqIEBwYXJhbSB7TnVtYmVyfSBhalxuICogQHBhcmFtIHtBcnJheX0gYiBkaXZpc29yIChhaiAtIGFpID0gYmogLSBiaSArIDEpXG4gKiBAcGFyYW0ge051bWJlcn0gYmlcbiAqIEBwYXJhbSB7TnVtYmVyfSBialxuICogQHBhcmFtIHtBcnJheX0gcSBxdW90aWVudCAobGVuZ3RoIGlzIGF0IGxlYXN0IHFpICsgYWogLSBhaSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBxaVxuICpcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gX3NjaG9vbGJvb2tfZGl2X3N1YnJvdXRpbmUgKCByICwgYSAsIGFpICwgYWogLCBiICwgYmkgLCBiaiAsIHEgLCBxaSApIHtcblxuXHRjb25zdCBtID0gYWogLSBhaSA7XG5cblx0Ly8gSWYgQSDiiaUgQirOsiwgY29tcHV0ZSB0aGUgcXVvdGllbnQgcSBhbmQgcmVtYWluZGVyIHIgb2YgKCBBIOKIkiBCKs6yICkgLyBCXG5cdC8vIHJlY3Vyc2l2ZWx5LCBhbmQgcmV0dXJuIM6yICsgcSBhbmQgci5cblx0aWYgKCBfZ2UoIGEgLCBhaSAsIGFqIC0gMSAsIGIgLCBiaSAsIGJqICkgKSB7XG5cdFx0X2lzdWIoIHIgLCBhICwgYWkgLCBhaiAtIDEgLCBiICwgYmkgLCBiaiApIDtcblx0XHRfc2Nob29sYm9va19kaXZfc3Vicm91dGluZSggciAsIGEgLCBhaSAsIGFqICwgYiAsIGJpICwgYmogLCBxICwgcWkgKSA7XG5cdFx0X2luY3JlbWVudCggciAsIHEgLCBxaSAsIHFpICsgbSAtIDEgKSA7XG5cdFx0cmV0dXJuIDtcblx0fVxuXG5cdC8vIElmIEEgPCBCKs6yLCB0aGVuIEEvQiA8IM6yXG5cdC8vIHEgPC0gbWluIFsgKCDOsiBhXzAgKyBhXzEgKSAvIGJfMCAsIM6yIC0gMSBdXG5cdGxldCBfcSA9IE1hdGgubWluKCByIC0gMSAsIE1hdGguZmxvb3IoICggYVthaV0gKiByICsgYVthaSsxXSApIC8gYltiaV0gKSApIDtcblxuXHQvLyBmaXggX3Fcblx0Y29uc3QgVCA9IF96ZXJvcyggbSApIDtcblx0X211bF9saW1iKCByICwgX3EgLCBiICwgYmkgLCBiaiAsIFQgLCAwICwgbSApIDtcblxuXHRpZiAoIF9ndCggVCAsIDAgLCBtICwgYSAsIGFpICwgYWogKSApIHtcblx0XHQtLV9xIDtcblx0XHRfaXN1YiggciAsIFQgLCAwICwgbSAsIGIgLCBiaSAsIGJqICkgO1xuXG5cdFx0aWYgKCBfZ3QoIFQgLCAwICwgbSAsIGEgLCBhaSAsIGFqICkgKSB7XG5cdFx0XHQtLV9xIDtcblx0XHRcdF9pc3ViKCByICwgVCAsIDAgLCBtICwgYiAsIGJpICwgYmogKSA7XG5cdFx0fVxuXG5cdH1cblxuXHRxW3FpICsgbSAtIDFdICs9IF9xIDtcblxuXHRfaXN1YiggciAsIGEgLCBhaSAsIGFqICwgVCAsIDAgLCBtICkgO1xuXG59XG4iXX0=