'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._powd = _powd;

var _array = require('../../array');

var _api = require('../../../api');

/**
 * Computes <code>pow(a,x) = a^x</code> using exponentiation by squaring.
 * Writes result to output array.
 *
 * /!\ |C| >= |A| * x , |C| = 000...0
 *
 * @param {Number} radix The base to work with.
 * @param {Number} x The power to raise <code>a</code> to.
 * @param {Array} a The base array.
 * @param {Number} ai <code>a</code> left.
 * @param {Number} aj <code>b</code> right.
 * @param {Array} c The output array.
 * @param {Number} ci <code>a</code> left.
 * @param {Number} cj <code>b</code> right.
 */
function _powd(r, x, a, ai, aj, c, ci, cj) {

	if (x === 0) {
		c[cj - 1] = 1;
	} else if (x === 1) {
		(0, _array._copy)(a, ai, aj, c, cj - (aj - ai));
	} else if (x & 1) {

		var p = x - 1;
		var n = (aj - ai) * p;
		var u = (0, _array._zeros)(n);

		_powd(r, p, a, ai, aj, u, 0, n);
		(0, _api.mul)(r, u, 0, n, a, ai, aj, c, ci, cj); // largest must be put first
	} else {

		var _p = x / 2 | 0;
		var _n = (aj - ai) * _p;
		var _u = (0, _array._zeros)(_n);

		_powd(r, _p, a, ai, aj, _u, 0, _n);
		(0, _api.mul)(r, _u, 0, _n, _u, 0, _n, c, ci, cj);
	}
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2FyaXRobWV0aWMvcG93L19wb3dkLmpzIl0sIm5hbWVzIjpbIl9wb3dkIiwiciIsIngiLCJhIiwiYWkiLCJhaiIsImMiLCJjaSIsImNqIiwicCIsIm4iLCJ1Il0sIm1hcHBpbmdzIjoiOzs7OztRQWtCZ0JBLEssR0FBQUEsSzs7QUFsQmhCOztBQUNBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7QUFlTyxTQUFTQSxLQUFULENBQWdCQyxDQUFoQixFQUFtQkMsQ0FBbkIsRUFBc0JDLENBQXRCLEVBQXlCQyxFQUF6QixFQUE2QkMsRUFBN0IsRUFBaUNDLENBQWpDLEVBQW9DQyxFQUFwQyxFQUF3Q0MsRUFBeEMsRUFBNEM7O0FBRWxELEtBQUtOLE1BQU0sQ0FBWCxFQUFlO0FBQ2RJLElBQUVFLEtBQUcsQ0FBTCxJQUFVLENBQVY7QUFDQSxFQUZELE1BSUssSUFBS04sTUFBTSxDQUFYLEVBQWU7QUFDbkIsb0JBQU9DLENBQVAsRUFBV0MsRUFBWCxFQUFnQkMsRUFBaEIsRUFBcUJDLENBQXJCLEVBQXlCRSxNQUFPSCxLQUFLRCxFQUFaLENBQXpCO0FBQ0EsRUFGSSxNQUlBLElBQUtGLElBQUksQ0FBVCxFQUFhOztBQUVqQixNQUFNTyxJQUFJUCxJQUFJLENBQWQ7QUFDQSxNQUFNUSxJQUFJLENBQUNMLEtBQUtELEVBQU4sSUFBWUssQ0FBdEI7QUFDQSxNQUFNRSxJQUFJLG1CQUFPRCxDQUFQLENBQVY7O0FBRUFWLFFBQU1DLENBQU4sRUFBU1EsQ0FBVCxFQUFZTixDQUFaLEVBQWVDLEVBQWYsRUFBbUJDLEVBQW5CLEVBQXVCTSxDQUF2QixFQUEwQixDQUExQixFQUE2QkQsQ0FBN0I7QUFDQSxnQkFBSVQsQ0FBSixFQUFPVSxDQUFQLEVBQVUsQ0FBVixFQUFhRCxDQUFiLEVBQWdCUCxDQUFoQixFQUFtQkMsRUFBbkIsRUFBdUJDLEVBQXZCLEVBQTJCQyxDQUEzQixFQUE4QkMsRUFBOUIsRUFBa0NDLEVBQWxDLEVBUGlCLENBT3NCO0FBQ3ZDLEVBUkksTUFVQTs7QUFFSixNQUFNQyxLQUFJUCxJQUFJLENBQUosR0FBUSxDQUFsQjtBQUNBLE1BQU1RLEtBQUksQ0FBQ0wsS0FBS0QsRUFBTixJQUFZSyxFQUF0QjtBQUNBLE1BQU1FLEtBQUksbUJBQU9ELEVBQVAsQ0FBVjs7QUFFQVYsUUFBTUMsQ0FBTixFQUFTUSxFQUFULEVBQVlOLENBQVosRUFBZUMsRUFBZixFQUFtQkMsRUFBbkIsRUFBdUJNLEVBQXZCLEVBQTBCLENBQTFCLEVBQTZCRCxFQUE3QjtBQUNBLGdCQUFJVCxDQUFKLEVBQU9VLEVBQVAsRUFBVSxDQUFWLEVBQWFELEVBQWIsRUFBZ0JDLEVBQWhCLEVBQW1CLENBQW5CLEVBQXNCRCxFQUF0QixFQUF5QkosQ0FBekIsRUFBNEJDLEVBQTVCLEVBQWdDQyxFQUFoQztBQUVBO0FBRUQiLCJmaWxlIjoiX3Bvd2QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfemVyb3MgLCBfY29weSB9IGZyb20gJy4uLy4uL2FycmF5JyA7XG5pbXBvcnQgeyBtdWwgfSBmcm9tICcuLi8uLi8uLi9hcGknIDtcblxuLyoqXG4gKiBDb21wdXRlcyA8Y29kZT5wb3coYSx4KSA9IGFeeDwvY29kZT4gdXNpbmcgZXhwb25lbnRpYXRpb24gYnkgc3F1YXJpbmcuXG4gKiBXcml0ZXMgcmVzdWx0IHRvIG91dHB1dCBhcnJheS5cbiAqXG4gKiAvIVxcIHxDfCA+PSB8QXwgKiB4ICwgfEN8ID0gMDAwLi4uMFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWRpeCBUaGUgYmFzZSB0byB3b3JrIHdpdGguXG4gKiBAcGFyYW0ge051bWJlcn0geCBUaGUgcG93ZXIgdG8gcmFpc2UgPGNvZGU+YTwvY29kZT4gdG8uXG4gKiBAcGFyYW0ge0FycmF5fSBhIFRoZSBiYXNlIGFycmF5LlxuICogQHBhcmFtIHtOdW1iZXJ9IGFpIDxjb2RlPmE8L2NvZGU+IGxlZnQuXG4gKiBAcGFyYW0ge051bWJlcn0gYWogPGNvZGU+YjwvY29kZT4gcmlnaHQuXG4gKiBAcGFyYW0ge0FycmF5fSBjIFRoZSBvdXRwdXQgYXJyYXkuXG4gKiBAcGFyYW0ge051bWJlcn0gY2kgPGNvZGU+YTwvY29kZT4gbGVmdC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBjaiA8Y29kZT5iPC9jb2RlPiByaWdodC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9wb3dkIChyLCB4LCBhLCBhaSwgYWosIGMsIGNpLCBjaikge1xuXG5cdGlmICggeCA9PT0gMCApIHtcblx0XHRjW2NqLTFdID0gMTtcblx0fVxuXG5cdGVsc2UgaWYgKCB4ID09PSAxICkge1xuXHRcdF9jb3B5KCBhICwgYWkgLCBhaiAsIGMgLCBjaiAtICggYWogLSBhaSApICkgO1xuXHR9XG5cblx0ZWxzZSBpZiAoIHggJiAxICkge1xuXG5cdFx0Y29uc3QgcCA9IHggLSAxIDtcblx0XHRjb25zdCBuID0gKGFqIC0gYWkpICogcDtcblx0XHRjb25zdCB1ID0gX3plcm9zKG4pO1xuXG5cdFx0X3Bvd2QociwgcCwgYSwgYWksIGFqLCB1LCAwLCBuKTtcblx0XHRtdWwociwgdSwgMCwgbiwgYSwgYWksIGFqLCBjLCBjaSwgY2opOyAvLyBsYXJnZXN0IG11c3QgYmUgcHV0IGZpcnN0XG5cdH1cblxuXHRlbHNlIHtcblxuXHRcdGNvbnN0IHAgPSB4IC8gMiB8IDAgO1xuXHRcdGNvbnN0IG4gPSAoYWogLSBhaSkgKiBwO1xuXHRcdGNvbnN0IHUgPSBfemVyb3Mobik7XG5cblx0XHRfcG93ZChyLCBwLCBhLCBhaSwgYWosIHUsIDAsIG4pO1xuXHRcdG11bChyLCB1LCAwLCBuLCB1LCAwLCBuLCBjLCBjaSwgY2opO1xuXG5cdH1cblxufVxuIl19