'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports._powd = _powd;

var _array = require('../../array');

var _api = require('../../../api');

/**
 * Computes <code>pow(a,x) = a^x</code> using exponentiation by squaring.
 * Writes result to output array.
 *
 * /!\ |C| >= |A| * x , |C| = 000...0
 *
 * @param {Number} radix The base to work with.
 * @param {Number} x The power to raise <code>a</code> to.
 * @param {Array} a The base array.
 * @param {Number} ai <code>a</code> left.
 * @param {Number} aj <code>b</code> right.
 * @param {Array} c The output array.
 * @param {Number} ci <code>a</code> left.
 * @param {Number} cj <code>b</code> right.
 */
function _powd(r, x, a, ai, aj, c, ci, cj) {

	if (x === 0) {
		c[cj - 1] = 1;
	} else if (x === 1) {
		(0, _array._copy)(a, ai, aj, c, cj - (aj - ai));
	} else if (x & 1) {

		var p = x - 1;
		var n = (aj - ai) * p;
		var u = (0, _array._zeros)(n);

		_powd(r, p, a, ai, aj, u, 0, n);
		(0, _api._mul)(r, u, 0, n, a, ai, aj, c, ci, cj); // largest must be put first
	} else {

		var _p = x / 2 | 0;
		var _n = (aj - ai) * _p;
		var _u = (0, _array._zeros)(_n);

		_powd(r, _p, a, ai, aj, _u, 0, _n);
		(0, _api._mul)(r, _u, 0, _n, _u, 0, _n, c, ci, cj);
	}
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2FyaXRobWV0aWMvcG93L19wb3dkLmpzIl0sIm5hbWVzIjpbIl9wb3dkIiwiciIsIngiLCJhIiwiYWkiLCJhaiIsImMiLCJjaSIsImNqIiwicCIsIm4iLCJ1Il0sIm1hcHBpbmdzIjoiOzs7OztRQWtCZ0JBLEssR0FBQUEsSzs7QUFsQmhCOztBQUNBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7QUFlTyxTQUFTQSxLQUFULENBQWdCQyxDQUFoQixFQUFtQkMsQ0FBbkIsRUFBc0JDLENBQXRCLEVBQXlCQyxFQUF6QixFQUE2QkMsRUFBN0IsRUFBaUNDLENBQWpDLEVBQW9DQyxFQUFwQyxFQUF3Q0MsRUFBeEMsRUFBNEM7O0FBRWxELEtBQUtOLE1BQU0sQ0FBWCxFQUFlO0FBQ2RJLElBQUVFLEtBQUcsQ0FBTCxJQUFVLENBQVY7QUFDQSxFQUZELE1BSUssSUFBS04sTUFBTSxDQUFYLEVBQWU7QUFDbkIsb0JBQU9DLENBQVAsRUFBV0MsRUFBWCxFQUFnQkMsRUFBaEIsRUFBcUJDLENBQXJCLEVBQXlCRSxNQUFPSCxLQUFLRCxFQUFaLENBQXpCO0FBQ0EsRUFGSSxNQUlBLElBQUtGLElBQUksQ0FBVCxFQUFhOztBQUVqQixNQUFNTyxJQUFJUCxJQUFJLENBQWQ7QUFDQSxNQUFNUSxJQUFJLENBQUNMLEtBQUtELEVBQU4sSUFBWUssQ0FBdEI7QUFDQSxNQUFNRSxJQUFJLG1CQUFPRCxDQUFQLENBQVY7O0FBRUFWLFFBQU1DLENBQU4sRUFBU1EsQ0FBVCxFQUFZTixDQUFaLEVBQWVDLEVBQWYsRUFBbUJDLEVBQW5CLEVBQXVCTSxDQUF2QixFQUEwQixDQUExQixFQUE2QkQsQ0FBN0I7QUFDQSxpQkFBS1QsQ0FBTCxFQUFRVSxDQUFSLEVBQVcsQ0FBWCxFQUFjRCxDQUFkLEVBQWlCUCxDQUFqQixFQUFvQkMsRUFBcEIsRUFBd0JDLEVBQXhCLEVBQTRCQyxDQUE1QixFQUErQkMsRUFBL0IsRUFBbUNDLEVBQW5DLEVBUGlCLENBT3VCO0FBQ3hDLEVBUkksTUFVQTs7QUFFSixNQUFNQyxLQUFJUCxJQUFJLENBQUosR0FBUSxDQUFsQjtBQUNBLE1BQU1RLEtBQUksQ0FBQ0wsS0FBS0QsRUFBTixJQUFZSyxFQUF0QjtBQUNBLE1BQU1FLEtBQUksbUJBQU9ELEVBQVAsQ0FBVjs7QUFFQVYsUUFBTUMsQ0FBTixFQUFTUSxFQUFULEVBQVlOLENBQVosRUFBZUMsRUFBZixFQUFtQkMsRUFBbkIsRUFBdUJNLEVBQXZCLEVBQTBCLENBQTFCLEVBQTZCRCxFQUE3QjtBQUNBLGlCQUFLVCxDQUFMLEVBQVFVLEVBQVIsRUFBVyxDQUFYLEVBQWNELEVBQWQsRUFBaUJDLEVBQWpCLEVBQW9CLENBQXBCLEVBQXVCRCxFQUF2QixFQUEwQkosQ0FBMUIsRUFBNkJDLEVBQTdCLEVBQWlDQyxFQUFqQztBQUVBO0FBRUQiLCJmaWxlIjoiX3Bvd2QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfemVyb3MgLCBfY29weSB9IGZyb20gJy4uLy4uL2FycmF5JyA7XG5pbXBvcnQgeyBfbXVsIH0gZnJvbSAnLi4vLi4vLi4vYXBpJyA7XG5cbi8qKlxuICogQ29tcHV0ZXMgPGNvZGU+cG93KGEseCkgPSBhXng8L2NvZGU+IHVzaW5nIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nLlxuICogV3JpdGVzIHJlc3VsdCB0byBvdXRwdXQgYXJyYXkuXG4gKlxuICogLyFcXCB8Q3wgPj0gfEF8ICogeCAsIHxDfCA9IDAwMC4uLjBcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkaXggVGhlIGJhc2UgdG8gd29yayB3aXRoLlxuICogQHBhcmFtIHtOdW1iZXJ9IHggVGhlIHBvd2VyIHRvIHJhaXNlIDxjb2RlPmE8L2NvZGU+IHRvLlxuICogQHBhcmFtIHtBcnJheX0gYSBUaGUgYmFzZSBhcnJheS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBhaSA8Y29kZT5hPC9jb2RlPiBsZWZ0LlxuICogQHBhcmFtIHtOdW1iZXJ9IGFqIDxjb2RlPmI8L2NvZGU+IHJpZ2h0LlxuICogQHBhcmFtIHtBcnJheX0gYyBUaGUgb3V0cHV0IGFycmF5LlxuICogQHBhcmFtIHtOdW1iZXJ9IGNpIDxjb2RlPmE8L2NvZGU+IGxlZnQuXG4gKiBAcGFyYW0ge051bWJlcn0gY2ogPGNvZGU+YjwvY29kZT4gcmlnaHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfcG93ZCAociwgeCwgYSwgYWksIGFqLCBjLCBjaSwgY2opIHtcblxuXHRpZiAoIHggPT09IDAgKSB7XG5cdFx0Y1tjai0xXSA9IDE7XG5cdH1cblxuXHRlbHNlIGlmICggeCA9PT0gMSApIHtcblx0XHRfY29weSggYSAsIGFpICwgYWogLCBjICwgY2ogLSAoIGFqIC0gYWkgKSApIDtcblx0fVxuXG5cdGVsc2UgaWYgKCB4ICYgMSApIHtcblxuXHRcdGNvbnN0IHAgPSB4IC0gMSA7XG5cdFx0Y29uc3QgbiA9IChhaiAtIGFpKSAqIHA7XG5cdFx0Y29uc3QgdSA9IF96ZXJvcyhuKTtcblxuXHRcdF9wb3dkKHIsIHAsIGEsIGFpLCBhaiwgdSwgMCwgbik7XG5cdFx0X211bChyLCB1LCAwLCBuLCBhLCBhaSwgYWosIGMsIGNpLCBjaik7IC8vIGxhcmdlc3QgbXVzdCBiZSBwdXQgZmlyc3Rcblx0fVxuXG5cdGVsc2Uge1xuXG5cdFx0Y29uc3QgcCA9IHggLyAyIHwgMCA7XG5cdFx0Y29uc3QgbiA9IChhaiAtIGFpKSAqIHA7XG5cdFx0Y29uc3QgdSA9IF96ZXJvcyhuKTtcblxuXHRcdF9wb3dkKHIsIHAsIGEsIGFpLCBhaiwgdSwgMCwgbik7XG5cdFx0X211bChyLCB1LCAwLCBuLCB1LCAwLCBuLCBjLCBjaSwgY2opO1xuXG5cdH1cblxufVxuIl19